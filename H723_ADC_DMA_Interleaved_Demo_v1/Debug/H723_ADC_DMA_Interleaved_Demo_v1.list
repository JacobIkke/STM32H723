
H723_ADC_DMA_Interleaved_Demo_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c18c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800c45c  0800c45c  0000d45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c534  0800c534  0000d534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c53c  0800c53c  0000d53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c540  0800c540  0000d540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800c544  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005ac  2400006c  0800c5b0  0000e06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000618  0800c5b0  0000e618  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ae7d  00000000  00000000  0000e09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e82  00000000  00000000  00028f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015b8  00000000  00000000  0002bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010f6  00000000  00000000  0002d358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035d78  00000000  00000000  0002e44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cb02  00000000  00000000  000641c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001642dc  00000000  00000000  00080cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e4fa4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006690  00000000  00000000  001e4fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  001eb678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c444 	.word	0x0800c444

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800c444 	.word	0x0800c444

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006a6:	4b55      	ldr	r3, [pc, #340]	@ (80007fc <main+0x15c>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d11b      	bne.n	80006ea <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b8:	f3bf 8f6f 	isb	sy
}
 80006bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006be:	4b4f      	ldr	r3, [pc, #316]	@ (80007fc <main+0x15c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006c6:	f3bf 8f4f 	dsb	sy
}
 80006ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006cc:	f3bf 8f6f 	isb	sy
}
 80006d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d2:	4b4a      	ldr	r3, [pc, #296]	@ (80007fc <main+0x15c>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a49      	ldr	r2, [pc, #292]	@ (80007fc <main+0x15c>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006de:	f3bf 8f4f 	dsb	sy
}
 80006e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e4:	f3bf 8f6f 	isb	sy
}
 80006e8:	e000      	b.n	80006ec <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ea:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fe5a 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f898 	bl	8000824 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f4:	f000 f90a 	bl	800090c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f000 faa8 	bl	8000c4c <MX_GPIO_Init>
  MX_DMA_Init();
 80006fc:	f000 fa86 	bl	8000c0c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000700:	f000 fa38 	bl	8000b74 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000704:	f000 f920 	bl	8000948 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000708:	f000 f9fe 	bl	8000b08 <MX_TIM6_Init>
  MX_ADC2_Init();
 800070c:	f000 f99c 	bl	8000a48 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  printf("STM32H723 ADC interleaved DMA Demo v1.0 \n");
 8000710:	483b      	ldr	r0, [pc, #236]	@ (8000800 <main+0x160>)
 8000712:	f00a ffff 	bl	800b714 <puts>

  // Calibrate ADC1 with linearity offset in single-ended mode
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK) {
 8000716:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800071a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800071e:	4839      	ldr	r0, [pc, #228]	@ (8000804 <main+0x164>)
 8000720:	f002 fca2 	bl	8003068 <HAL_ADCEx_Calibration_Start>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <main+0x8e>
      Error_Handler(); // Handle calibration error for ADC1
 800072a:	f000 fb07 	bl	8000d3c <Error_Handler>
  }

  // Calibrate ADC2 with linearity offset in single-ended mode
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK) {
 800072e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000732:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000736:	4834      	ldr	r0, [pc, #208]	@ (8000808 <main+0x168>)
 8000738:	f002 fc96 	bl	8003068 <HAL_ADCEx_Calibration_Start>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <main+0xa6>
      Error_Handler(); // Handle calibration error for ADC2
 8000742:	f000 fafb 	bl	8000d3c <Error_Handler>
  }

  // Start the multi-mode ADC DMA transfer for ADC1
  if (HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *)&ADC_buf1, buffer_size) != HAL_OK) {
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	4930      	ldr	r1, [pc, #192]	@ (800080c <main+0x16c>)
 800074a:	482e      	ldr	r0, [pc, #184]	@ (8000804 <main+0x164>)
 800074c:	f002 fcf0 	bl	8003130 <HAL_ADCEx_MultiModeStart_DMA>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0xc0>
      printf("ADC MM DMA Error \n"); // Print error message for ADC multi-mode DMA start failure
 8000756:	482e      	ldr	r0, [pc, #184]	@ (8000810 <main+0x170>)
 8000758:	f00a ffdc 	bl	800b714 <puts>
      Error_Handler(); // Handle DMA start error for multi-mode ADC
 800075c:	f000 faee 	bl	8000d3c <Error_Handler>
  }

  // Start the base timer that triggers the ADC conversions
  if (HAL_TIM_Base_Start(&htim6) != HAL_OK) {
 8000760:	482c      	ldr	r0, [pc, #176]	@ (8000814 <main+0x174>)
 8000762:	f009 fa6b 	bl	8009c3c <HAL_TIM_Base_Start>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <main+0xd4>
      Error_Handler(); // Handle timer start error
 800076c:	f000 fae6 	bl	8000d3c <Error_Handler>
  while (1) {

	// Wait for the DMA transfer to complete
	// Note: This can be replaced with a flag system to prevent blocking the main loop.
	// For simplicity, a busy-wait loop is used here for demonstration purposes.
	while(HAL_DMA_GetState(&hdma_adc1) != (HAL_DMA_StateTypeDef)HAL_DMA_STATE_READY) {
 8000770:	e000      	b.n	8000774 <main+0xd4>
		__NOP(); // No Operation: wait here
 8000772:	bf00      	nop
	while(HAL_DMA_GetState(&hdma_adc1) != (HAL_DMA_StateTypeDef)HAL_DMA_STATE_READY) {
 8000774:	4828      	ldr	r0, [pc, #160]	@ (8000818 <main+0x178>)
 8000776:	f005 f885 	bl	8005884 <HAL_DMA_GetState>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d1f8      	bne.n	8000772 <main+0xd2>
	}

	// Read the DMA buffer, interleaving the values: store ADC1 value in lower 16 bits and ADC2 value in upper 16 bits
	for(int i = 0; i < buffer_size; i++) {
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	e01d      	b.n	80007c2 <main+0x122>
		if(i % 32 == 0) {
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f003 031f 	and.w	r3, r3, #31
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <main+0xf6>
			printf("\n"); // New line for every 32 values for better readability
 8000790:	200a      	movs	r0, #10
 8000792:	f00a ff61 	bl	800b658 <putchar>
		}
		printf("%04i ", (uint16_t)ADC_buf1[i]);        // Print ADC1 value
 8000796:	4a1d      	ldr	r2, [pc, #116]	@ (800080c <main+0x16c>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	481e      	ldr	r0, [pc, #120]	@ (800081c <main+0x17c>)
 80007a4:	f00a ff46 	bl	800b634 <iprintf>
		printf("%04i ", (uint16_t)(ADC_buf1[i] >> 16)); // Print ADC2 value
 80007a8:	4a18      	ldr	r2, [pc, #96]	@ (800080c <main+0x16c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b0:	0c1b      	lsrs	r3, r3, #16
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	4819      	ldr	r0, [pc, #100]	@ (800081c <main+0x17c>)
 80007b8:	f00a ff3c 	bl	800b634 <iprintf>
	for(int i = 0; i < buffer_size; i++) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3301      	adds	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007c6:	ddde      	ble.n	8000786 <main+0xe6>
	}
	printf("\n");
 80007c8:	200a      	movs	r0, #10
 80007ca:	f00a ff45 	bl	800b658 <putchar>

	// Restart the DMA multi-mode transfer for the next set of readings
	if(HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *)&ADC_buf1, buffer_size) != HAL_OK) {
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	490e      	ldr	r1, [pc, #56]	@ (800080c <main+0x16c>)
 80007d2:	480c      	ldr	r0, [pc, #48]	@ (8000804 <main+0x164>)
 80007d4:	f002 fcac 	bl	8003130 <HAL_ADCEx_MultiModeStart_DMA>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d004      	beq.n	80007e8 <main+0x148>
		printf("ADC MM DMA Error \n"); // Print error message for ADC multi-mode DMA start failure
 80007de:	480c      	ldr	r0, [pc, #48]	@ (8000810 <main+0x170>)
 80007e0:	f00a ff98 	bl	800b714 <puts>
		Error_Handler(); // Handle DMA start error for multi-mode ADC
 80007e4:	f000 faaa 	bl	8000d3c <Error_Handler>
	}

	// Toggle the LED and delay to indicate the code is running
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3); // Toggle LED connected to GPIO pin
 80007e8:	2108      	movs	r1, #8
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <main+0x180>)
 80007ec:	f005 fe01 	bl	80063f2 <HAL_GPIO_TogglePin>
	HAL_Delay(1000); // Delay for 1000 ms (1 second)
 80007f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f4:	f000 fe68 	bl	80014c8 <HAL_Delay>
	while(HAL_DMA_GetState(&hdma_adc1) != (HAL_DMA_StateTypeDef)HAL_DMA_STATE_READY) {
 80007f8:	e7bc      	b.n	8000774 <main+0xd4>
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00
 8000800:	0800c45c 	.word	0x0800c45c
 8000804:	24000088 	.word	0x24000088
 8000808:	240000f8 	.word	0x240000f8
 800080c:	240002c0 	.word	0x240002c0
 8000810:	0800c488 	.word	0x0800c488
 8000814:	240001e0 	.word	0x240001e0
 8000818:	24000168 	.word	0x24000168
 800081c:	0800c49c 	.word	0x0800c49c
 8000820:	58021000 	.word	0x58021000

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09c      	sub	sp, #112	@ 0x70
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082e:	224c      	movs	r2, #76	@ 0x4c
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f00b f84e 	bl	800b8d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2220      	movs	r2, #32
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f00b f848 	bl	800b8d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000844:	2002      	movs	r0, #2
 8000846:	f005 fdef 	bl	8006428 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b2e      	ldr	r3, [pc, #184]	@ (8000908 <SystemClock_Config+0xe4>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a2d      	ldr	r2, [pc, #180]	@ (8000908 <SystemClock_Config+0xe4>)
 8000854:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <SystemClock_Config+0xe4>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000866:	bf00      	nop
 8000868:	4b27      	ldr	r3, [pc, #156]	@ (8000908 <SystemClock_Config+0xe4>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000874:	d1f8      	bne.n	8000868 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000876:	2303      	movs	r3, #3
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000880:	2301      	movs	r3, #1
 8000882:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000884:	2340      	movs	r3, #64	@ 0x40
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088c:	2302      	movs	r3, #2
 800088e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000894:	2328      	movs	r3, #40	@ 0x28
 8000896:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008a4:	230c      	movs	r3, #12
 80008a6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b4:	4618      	mov	r0, r3
 80008b6:	f005 fdf1 	bl	800649c <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008c0:	f000 fa3c 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	233f      	movs	r3, #63	@ 0x3f
 80008c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2303      	movs	r3, #3
 80008ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008d0:	2308      	movs	r3, #8
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008d4:	2340      	movs	r3, #64	@ 0x40
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008d8:	2340      	movs	r3, #64	@ 0x40
 80008da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008e2:	2340      	movs	r3, #64	@ 0x40
 80008e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2103      	movs	r1, #3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f006 f9b0 	bl	8006c50 <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80008f6:	f000 fa21 	bl	8000d3c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80008fa:	f006 fb5f 	bl	8006fbc <HAL_RCC_EnableCSS>
}
 80008fe:	bf00      	nop
 8000900:	3770      	adds	r7, #112	@ 0x70
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	58024800 	.word	0x58024800

0800090c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0ae      	sub	sp, #184	@ 0xb8
 8000910:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	22b8      	movs	r2, #184	@ 0xb8
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f00a ffdb 	bl	800b8d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800091e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000922:	f04f 0300 	mov.w	r3, #0
 8000926:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800092a:	2300      	movs	r3, #0
 800092c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4618      	mov	r0, r3
 8000932:	f006 fd45 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 800093c:	f000 f9fe 	bl	8000d3c <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	37b8      	adds	r7, #184	@ 0xb8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	@ 0x30
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800094e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2224      	movs	r2, #36	@ 0x24
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f00a ffb7 	bl	800b8d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000966:	4b35      	ldr	r3, [pc, #212]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 8000968:	4a35      	ldr	r2, [pc, #212]	@ (8000a40 <MX_ADC1_Init+0xf8>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800096c:	4b33      	ldr	r3, [pc, #204]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 800096e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000974:	4b31      	ldr	r3, [pc, #196]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097a:	4b30      	ldr	r3, [pc, #192]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000980:	4b2e      	ldr	r3, [pc, #184]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 8000982:	2204      	movs	r2, #4
 8000984:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000986:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 8000988:	2200      	movs	r2, #0
 800098a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800098c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 800098e:	2200      	movs	r2, #0
 8000990:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000992:	4b2a      	ldr	r3, [pc, #168]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 8000994:	2201      	movs	r2, #1
 8000996:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80009a0:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 80009a2:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80009a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80009a8:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 80009aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 80009b2:	2203      	movs	r2, #3
 80009b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ca:	481c      	ldr	r0, [pc, #112]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 80009cc:	f001 f86a 	bl	8001aa4 <HAL_ADC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009d6:	f000 f9b1 	bl	8000d3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 80009da:	2307      	movs	r3, #7
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80009de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80009e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 80009f2:	f002 fd4b 	bl	800348c <HAL_ADCEx_MultiModeConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80009fc:	f000 f99e 	bl	8000d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a00:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <MX_ADC1_Init+0xfc>)
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a04:	2306      	movs	r3, #6
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a0c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a10:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a12:	2304      	movs	r3, #4
 8000a14:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_ADC1_Init+0xf4>)
 8000a26:	f001 fa59 	bl	8001edc <HAL_ADC_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000a30:	f000 f984 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	@ 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	24000088 	.word	0x24000088
 8000a40:	40022000 	.word	0x40022000
 8000a44:	0c900008 	.word	0x0c900008

08000a48 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2224      	movs	r2, #36	@ 0x24
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00a ff3d 	bl	800b8d4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a5c:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <MX_ADC2_Init+0xb8>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a6e:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aae:	4813      	ldr	r0, [pc, #76]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000ab0:	f000 fff8 	bl	8001aa4 <HAL_ADC_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000aba:	f000 f93f 	bl	8000d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_ADC2_Init+0xbc>)
 8000ac0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aca:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ace:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	@ (8000afc <MX_ADC2_Init+0xb4>)
 8000ae4:	f001 f9fa 	bl	8001edc <HAL_ADC_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000aee:	f000 f925 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	@ 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	240000f8 	.word	0x240000f8
 8000b00:	40022100 	.word	0x40022100
 8000b04:	0c900008 	.word	0x0c900008

08000b08 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_TIM6_Init+0x64>)
 8000b1a:	4a15      	ldr	r2, [pc, #84]	@ (8000b70 <MX_TIM6_Init+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_TIM6_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_TIM6_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <MX_TIM6_Init+0x64>)
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_TIM6_Init+0x64>)
 8000b32:	2280      	movs	r2, #128	@ 0x80
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b36:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <MX_TIM6_Init+0x64>)
 8000b38:	f009 f828 	bl	8009b8c <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b42:	f000 f8fb 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b46:	2320      	movs	r3, #32
 8000b48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <MX_TIM6_Init+0x64>)
 8000b54:	f009 f9a2 	bl	8009e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b5e:	f000 f8ed 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	240001e0 	.word	0x240001e0
 8000b70:	40001000 	.word	0x40001000

08000b74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b78:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b7a:	4a23      	ldr	r2, [pc, #140]	@ (8000c08 <MX_USART1_UART_Init+0x94>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bbc:	4811      	ldr	r0, [pc, #68]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bbe:	f009 fa09 	bl	8009fd4 <HAL_UART_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bc8:	f000 f8b8 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bd0:	f00a fba3 	bl	800b31a <HAL_UARTEx_SetTxFifoThreshold>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bda:	f000 f8af 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4808      	ldr	r0, [pc, #32]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000be2:	f00a fbd8 	bl	800b396 <HAL_UARTEx_SetRxFifoThreshold>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bec:	f000 f8a6 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	@ (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bf2:	f00a fb59 	bl	800b2a8 <HAL_UARTEx_DisableFifoMode>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bfc:	f000 f89e 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2400022c 	.word	0x2400022c
 8000c08:	40011000 	.word	0x40011000

08000c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <MX_DMA_Init+0x3c>)
 8000c14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c18:	4a0b      	ldr	r2, [pc, #44]	@ (8000c48 <MX_DMA_Init+0x3c>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_DMA_Init+0x3c>)
 8000c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	200b      	movs	r0, #11
 8000c36:	f002 fde6 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c3a:	200b      	movs	r0, #11
 8000c3c:	f002 fdfd 	bl	800383a <HAL_NVIC_EnableIRQ>

}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58024400 	.word	0x58024400

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <MX_GPIO_Init+0xa0>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c68:	4a20      	ldr	r2, [pc, #128]	@ (8000cec <MX_GPIO_Init+0xa0>)
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c72:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <MX_GPIO_Init+0xa0>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c80:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <MX_GPIO_Init+0xa0>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c86:	4a19      	ldr	r2, [pc, #100]	@ (8000cec <MX_GPIO_Init+0xa0>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c90:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MX_GPIO_Init+0xa0>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_GPIO_Init+0xa0>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca4:	4a11      	ldr	r2, [pc, #68]	@ (8000cec <MX_GPIO_Init+0xa0>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_GPIO_Init+0xa0>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <MX_GPIO_Init+0xa4>)
 8000cc2:	f005 fb7d 	bl	80063c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_GPIO_Init+0xa4>)
 8000cde:	f005 f9c7 	bl	8006070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58021000 	.word	0x58021000

08000cf4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000cfe:	f002 faf7 	bl	80032f0 <HAL_ADCEx_MultiModeStop_DMA>
	printf("ADC DMA transfer is Ready \n"); // Optional serial output for debugging
 8000d02:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <HAL_ADC_ConvCpltCallback+0x20>)
 8000d04:	f00a fd06 	bl	800b714 <puts>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	24000088 	.word	0x24000088
 8000d14:	0800c4a4 	.word	0x0800c4a4

08000d18 <__io_putchar>:

PUTCHAR_PROTOTYPE{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000d20:	1d39      	adds	r1, r7, #4
 8000d22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d26:	2201      	movs	r2, #1
 8000d28:	4803      	ldr	r0, [pc, #12]	@ (8000d38 <__io_putchar+0x20>)
 8000d2a:	f009 f9a3 	bl	800a074 <HAL_UART_Transmit>
  return ch;
 8000d2e:	687b      	ldr	r3, [r7, #4]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2400022c 	.word	0x2400022c

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <Error_Handler+0x8>

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_MspInit+0x30>)
 8000d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d54:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <HAL_MspInit+0x30>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_MspInit+0x30>)
 8000d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	58024400 	.word	0x58024400

08000d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0ba      	sub	sp, #232	@ 0xe8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	22b8      	movs	r2, #184	@ 0xb8
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f00a fd99 	bl	800b8d4 <memset>
  if(hadc->Instance==ADC1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a69      	ldr	r2, [pc, #420]	@ (8000f4c <HAL_ADC_MspInit+0x1d0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d17b      	bne.n	8000ea4 <HAL_ADC_MspInit+0x128>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000db8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f006 fafb 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000dd0:	f7ff ffb4 	bl	8000d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8000f50 <HAL_ADC_MspInit+0x1d4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	4a5d      	ldr	r2, [pc, #372]	@ (8000f50 <HAL_ADC_MspInit+0x1d4>)
 8000ddc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dde:	4b5c      	ldr	r3, [pc, #368]	@ (8000f50 <HAL_ADC_MspInit+0x1d4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d10e      	bne.n	8000e04 <HAL_ADC_MspInit+0x88>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000de6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dec:	4a59      	ldr	r2, [pc, #356]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000dee:	f043 0320 	orr.w	r3, r3, #32
 8000df2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000df6:	4b57      	ldr	r3, [pc, #348]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dfc:	f003 0320 	and.w	r3, r3, #32
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b53      	ldr	r3, [pc, #332]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0a:	4a52      	ldr	r2, [pc, #328]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e14:	4b4f      	ldr	r3, [pc, #316]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e22:	2340      	movs	r3, #64	@ 0x40
 8000e24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4847      	ldr	r0, [pc, #284]	@ (8000f58 <HAL_ADC_MspInit+0x1dc>)
 8000e3c:	f005 f918 	bl	8006070 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e40:	4b46      	ldr	r3, [pc, #280]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e42:	4a47      	ldr	r2, [pc, #284]	@ (8000f60 <HAL_ADC_MspInit+0x1e4>)
 8000e44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e46:	4b45      	ldr	r3, [pc, #276]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e48:	2209      	movs	r2, #9
 8000e4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4c:	4b43      	ldr	r3, [pc, #268]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e52:	4b42      	ldr	r3, [pc, #264]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e58:	4b40      	ldr	r3, [pc, #256]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e60:	4b3e      	ldr	r3, [pc, #248]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e68:	4b3c      	ldr	r3, [pc, #240]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e70:	4b3a      	ldr	r3, [pc, #232]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e76:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e78:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e80:	4b36      	ldr	r3, [pc, #216]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e86:	4835      	ldr	r0, [pc, #212]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e88:	f002 fcf2 	bl	8003870 <HAL_DMA_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8000e92:	f7ff ff53 	bl	8000d3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a30      	ldr	r2, [pc, #192]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8000e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000f5c <HAL_ADC_MspInit+0x1e0>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ea2:	e04e      	b.n	8000f42 <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2e      	ldr	r2, [pc, #184]	@ (8000f64 <HAL_ADC_MspInit+0x1e8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d149      	bne.n	8000f42 <HAL_ADC_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000eba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec2:	f107 0318 	add.w	r3, r7, #24
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f006 fa7a 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_ADC_MspInit+0x15a>
      Error_Handler();
 8000ed2:	f7ff ff33 	bl	8000d3c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <HAL_ADC_MspInit+0x1d4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <HAL_ADC_MspInit+0x1d4>)
 8000ede:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <HAL_ADC_MspInit+0x1d4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d10e      	bne.n	8000f06 <HAL_ADC_MspInit+0x18a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eee:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000ef0:	f043 0320 	orr.w	r3, r3, #32
 8000ef4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000efa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <HAL_ADC_MspInit+0x1d8>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f24:	2340      	movs	r3, #64	@ 0x40
 8000f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <HAL_ADC_MspInit+0x1dc>)
 8000f3e:	f005 f897 	bl	8006070 <HAL_GPIO_Init>
}
 8000f42:	bf00      	nop
 8000f44:	37e8      	adds	r7, #232	@ 0xe8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40022000 	.word	0x40022000
 8000f50:	240004c0 	.word	0x240004c0
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020000 	.word	0x58020000
 8000f5c:	24000168 	.word	0x24000168
 8000f60:	40020010 	.word	0x40020010
 8000f64:	40022100 	.word	0x40022100

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x3c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10e      	bne.n	8000f98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x40>)
 8000f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f80:	4a09      	ldr	r2, [pc, #36]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x40>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x40>)
 8000f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40001000 	.word	0x40001000
 8000fa8:	58024400 	.word	0x58024400

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0b8      	sub	sp, #224	@ 0xe0
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	22b8      	movs	r2, #184	@ 0xb8
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00a fc81 	bl	800b8d4 <memset>
  if(huart->Instance==USART1)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001094 <HAL_UART_MspInit+0xe8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d156      	bne.n	800108a <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fdc:	f04f 0201 	mov.w	r2, #1
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000fec:	2381      	movs	r3, #129	@ 0x81
 8000fee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 16;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000ffc:	2340      	movs	r3, #64	@ 0x40
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8001008:	2308      	movs	r3, #8
 800100a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4618      	mov	r0, r3
 8001014:	f006 f9d4 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 800101e:	f7ff fe8d 	bl	8000d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001022:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8001024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001028:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <HAL_UART_MspInit+0xec>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8001034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001038:	f003 0310 	and.w	r3, r3, #16
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800105e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001062:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001078:	2307      	movs	r3, #7
 800107a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <HAL_UART_MspInit+0xf0>)
 8001086:	f004 fff3 	bl	8006070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	37e0      	adds	r7, #224	@ 0xe0
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40011000 	.word	0x40011000
 8001098:	58024400 	.word	0x58024400
 800109c:	58020000 	.word	0x58020000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80010a4:	f006 f970 	bl	8007388 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <NMI_Handler+0x8>

080010ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <MemManage_Handler+0x4>

080010bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <UsageFault_Handler+0x4>

080010cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fa:	f000 f9c5 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <DMA1_Stream0_IRQHandler+0x10>)
 800110a:	f003 fc91 	bl	8004a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	24000168 	.word	0x24000168

08001118 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e00a      	b.n	8001140 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800112a:	f3af 8000 	nop.w
 800112e:	4601      	mov	r1, r0
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	b2ca      	uxtb	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbf0      	blt.n	800112a <_read+0x12>
  }

  return len;
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e009      	b.n	8001178 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fdd3 	bl	8000d18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbf1      	blt.n	8001164 <_write+0x12>
  }
  return len;
 8001180:	687b      	ldr	r3, [r7, #4]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_close>:

int _close(int file)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011b2:	605a      	str	r2, [r3, #4]
  return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_isatty>:

int _isatty(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011fc:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <_sbrk+0x5c>)
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <_sbrk+0x60>)
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <_sbrk+0x64>)
 8001212:	4a12      	ldr	r2, [pc, #72]	@ (800125c <_sbrk+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	d207      	bcs.n	8001234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001224:	f00a fba4 	bl	800b970 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	220c      	movs	r2, #12
 800122c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e009      	b.n	8001248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	4a05      	ldr	r2, [pc, #20]	@ (8001258 <_sbrk+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	24050000 	.word	0x24050000
 8001254:	00000400 	.word	0x00000400
 8001258:	240004c4 	.word	0x240004c4
 800125c:	24000618 	.word	0x24000618

08001260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001264:	4b32      	ldr	r3, [pc, #200]	@ (8001330 <SystemInit+0xd0>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126a:	4a31      	ldr	r2, [pc, #196]	@ (8001330 <SystemInit+0xd0>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001274:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <SystemInit+0xd4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	2b06      	cmp	r3, #6
 800127e:	d807      	bhi.n	8001290 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001280:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <SystemInit+0xd4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 030f 	bic.w	r3, r3, #15
 8001288:	4a2a      	ldr	r2, [pc, #168]	@ (8001334 <SystemInit+0xd4>)
 800128a:	f043 0307 	orr.w	r3, r3, #7
 800128e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001290:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <SystemInit+0xd8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a28      	ldr	r2, [pc, #160]	@ (8001338 <SystemInit+0xd8>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800129c:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <SystemInit+0xd8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012a2:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <SystemInit+0xd8>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4924      	ldr	r1, [pc, #144]	@ (8001338 <SystemInit+0xd8>)
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <SystemInit+0xdc>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <SystemInit+0xd4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <SystemInit+0xd4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 030f 	bic.w	r3, r3, #15
 80012c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001334 <SystemInit+0xd4>)
 80012c4:	f043 0307 	orr.w	r3, r3, #7
 80012c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <SystemInit+0xd8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <SystemInit+0xd8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <SystemInit+0xd8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <SystemInit+0xd8>)
 80012de:	4a18      	ldr	r2, [pc, #96]	@ (8001340 <SystemInit+0xe0>)
 80012e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <SystemInit+0xd8>)
 80012e4:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <SystemInit+0xe4>)
 80012e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <SystemInit+0xd8>)
 80012ea:	4a17      	ldr	r2, [pc, #92]	@ (8001348 <SystemInit+0xe8>)
 80012ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <SystemInit+0xd8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012f4:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <SystemInit+0xd8>)
 80012f6:	4a14      	ldr	r2, [pc, #80]	@ (8001348 <SystemInit+0xe8>)
 80012f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <SystemInit+0xd8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001300:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <SystemInit+0xd8>)
 8001302:	4a11      	ldr	r2, [pc, #68]	@ (8001348 <SystemInit+0xe8>)
 8001304:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <SystemInit+0xd8>)
 8001308:	2200      	movs	r2, #0
 800130a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <SystemInit+0xd8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a09      	ldr	r2, [pc, #36]	@ (8001338 <SystemInit+0xd8>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001316:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <SystemInit+0xd8>)
 800131a:	2200      	movs	r2, #0
 800131c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <SystemInit+0xec>)
 8001320:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001324:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00
 8001334:	52002000 	.word	0x52002000
 8001338:	58024400 	.word	0x58024400
 800133c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001340:	02020200 	.word	0x02020200
 8001344:	01ff0000 	.word	0x01ff0000
 8001348:	01010280 	.word	0x01010280
 800134c:	52004000 	.word	0x52004000

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001388 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001354:	f7ff ff84 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	@ (800138c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	@ (8001390 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	@ (800139c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f00a fafd 	bl	800b97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff f98d 	bl	80006a0 <main>
  bx  lr
 8001386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800138c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001390:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001394:	0800c544 	.word	0x0800c544
  ldr r2, =_sbss
 8001398:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800139c:	24000618 	.word	0x24000618

080013a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC3_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f002 fa20 	bl	80037f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013b0:	f005 fe14 	bl	8006fdc <HAL_RCC_GetSysClockFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_Init+0x68>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	4913      	ldr	r1, [pc, #76]	@ (8001410 <HAL_Init+0x6c>)
 80013c2:	5ccb      	ldrb	r3, [r1, r3]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_Init+0x68>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <HAL_Init+0x6c>)
 80013d8:	5cd3      	ldrb	r3, [r2, r3]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001414 <HAL_Init+0x70>)
 80013e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001418 <HAL_Init+0x74>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ee:	200f      	movs	r0, #15
 80013f0:	f000 f814 	bl	800141c <HAL_InitTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e002      	b.n	8001404 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013fe:	f7ff fca3 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	58024400 	.word	0x58024400
 8001410:	0800c4c0 	.word	0x0800c4c0
 8001414:	24000004 	.word	0x24000004
 8001418:	24000000 	.word	0x24000000

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001424:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_InitTick+0x60>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e021      	b.n	8001474 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <HAL_InitTick+0x64>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_InitTick+0x60>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800143e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fa05 	bl	8003856 <HAL_SYSTICK_Config>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e00e      	b.n	8001474 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d80a      	bhi.n	8001472 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f002 f9cf 	bl	8003806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001468:	4a06      	ldr	r2, [pc, #24]	@ (8001484 <HAL_InitTick+0x68>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2400000c 	.word	0x2400000c
 8001480:	24000000 	.word	0x24000000
 8001484:	24000008 	.word	0x24000008

08001488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_IncTick+0x20>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_IncTick+0x24>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <HAL_IncTick+0x24>)
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2400000c 	.word	0x2400000c
 80014ac:	240004c8 	.word	0x240004c8

080014b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b03      	ldr	r3, [pc, #12]	@ (80014c4 <HAL_GetTick+0x14>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	240004c8 	.word	0x240004c8

080014c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff ffee 	bl	80014b0 <HAL_GetTick>
 80014d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e0:	d005      	beq.n	80014ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_Delay+0x44>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ee:	bf00      	nop
 80014f0:	f7ff ffde 	bl	80014b0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d8f7      	bhi.n	80014f0 <HAL_Delay+0x28>
  {
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2400000c 	.word	0x2400000c

08001510 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3360      	adds	r3, #96	@ 0x60
 800158a:	461a      	mov	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a10      	ldr	r2, [pc, #64]	@ (80015d8 <LL_ADC_SetOffset+0x60>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d10b      	bne.n	80015b4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80015b2:	e00b      	b.n	80015cc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	bf00      	nop
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	58026000 	.word	0x58026000

080015dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3360      	adds	r3, #96	@ 0x60
 80015ea:	461a      	mov	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	611a      	str	r2, [r3, #16]
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4a0c      	ldr	r2, [pc, #48]	@ (800167c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00e      	beq.n	800166e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3360      	adds	r3, #96	@ 0x60
 8001654:	461a      	mov	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	431a      	orrs	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]
  }
}
 800166e:	bf00      	nop
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	58026000 	.word	0x58026000

08001680 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a0c      	ldr	r2, [pc, #48]	@ (80016c0 <LL_ADC_SetOffsetSaturation+0x40>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d10e      	bne.n	80016b2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3360      	adds	r3, #96	@ 0x60
 8001698:	461a      	mov	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80016b2:	bf00      	nop
 80016b4:	371c      	adds	r7, #28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	58026000 	.word	0x58026000

080016c4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001704 <LL_ADC_SetOffsetSign+0x40>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d10e      	bne.n	80016f6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3360      	adds	r3, #96	@ 0x60
 80016dc:	461a      	mov	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80016f6:	bf00      	nop
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	58026000 	.word	0x58026000

08001708 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3360      	adds	r3, #96	@ 0x60
 8001718:	461a      	mov	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4a0c      	ldr	r2, [pc, #48]	@ (8001758 <LL_ADC_SetOffsetState+0x50>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d108      	bne.n	800173c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	431a      	orrs	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800173a:	e007      	b.n	800174c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	431a      	orrs	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	58026000 	.word	0x58026000

0800175c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001782:	b480      	push	{r7}
 8001784:	b087      	sub	sp, #28
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3330      	adds	r3, #48	@ 0x30
 8001792:	461a      	mov	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	4413      	add	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	211f      	movs	r1, #31
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	401a      	ands	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	0e9b      	lsrs	r3, r3, #26
 80017ba:	f003 011f 	and.w	r1, r3, #31
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	431a      	orrs	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017da:	b480      	push	{r7}
 80017dc:	b087      	sub	sp, #28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3314      	adds	r3, #20
 80017ea:	461a      	mov	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	0e5b      	lsrs	r3, r3, #25
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	0d1b      	lsrs	r3, r3, #20
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2107      	movs	r1, #7
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	401a      	ands	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	0d1b      	lsrs	r3, r3, #20
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	431a      	orrs	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001824:	bf00      	nop
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a1a      	ldr	r2, [pc, #104]	@ (80018a8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d115      	bne.n	8001870 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0318 	and.w	r3, r3, #24
 800185a:	4914      	ldr	r1, [pc, #80]	@ (80018ac <LL_ADC_SetChannelSingleDiff+0x7c>)
 800185c:	40d9      	lsrs	r1, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	400b      	ands	r3, r1
 8001862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001866:	431a      	orrs	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800186e:	e014      	b.n	800189a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0318 	and.w	r3, r3, #24
 8001886:	4909      	ldr	r1, [pc, #36]	@ (80018ac <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001888:	40d9      	lsrs	r1, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	400b      	ands	r3, r1
 800188e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001892:	431a      	orrs	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	58026000 	.word	0x58026000
 80018ac:	000fffff 	.word	0x000fffff

080018b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 031f 	and.w	r3, r3, #31
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <LL_ADC_DisableDeepPowerDown+0x20>)
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6093      	str	r3, [r2, #8]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	5fffffc0 	.word	0x5fffffc0

080018f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001904:	d101      	bne.n	800190a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <LL_ADC_EnableInternalRegulator+0x24>)
 8001926:	4013      	ands	r3, r2
 8001928:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	6fffffc0 	.word	0x6fffffc0

08001940 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001954:	d101      	bne.n	800195a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <LL_ADC_Enable+0x24>)
 8001976:	4013      	ands	r3, r2
 8001978:	f043 0201 	orr.w	r2, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	7fffffc0 	.word	0x7fffffc0

08001990 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <LL_ADC_Disable+0x24>)
 800199e:	4013      	ands	r3, r2
 80019a0:	f043 0202 	orr.w	r2, r3, #2
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	7fffffc0 	.word	0x7fffffc0

080019b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <LL_ADC_IsEnabled+0x18>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <LL_ADC_IsEnabled+0x1a>
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_IsDisableOngoing+0x18>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_IsDisableOngoing+0x1a>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <LL_ADC_REG_StopConversion+0x24>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	f043 0210 	orr.w	r2, r3, #16
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	7fffffc0 	.word	0x7fffffc0

08001a2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d101      	bne.n	8001a44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <LL_ADC_INJ_StopConversion+0x24>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	f043 0220 	orr.w	r2, r3, #32
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	7fffffc0 	.word	0x7fffffc0

08001a7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d101      	bne.n	8001a94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e1ee      	b.n	8001e9c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff f955 	bl	8000d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff03 	bl	80018f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fee9 	bl	80018cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff1e 	bl	8001940 <LL_ADC_IsInternalRegulatorEnabled>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d114      	bne.n	8001b34 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff02 	bl	8001918 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b14:	4b8e      	ldr	r3, [pc, #568]	@ (8001d50 <HAL_ADC_Init+0x2ac>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	4a8e      	ldr	r2, [pc, #568]	@ (8001d54 <HAL_ADC_Init+0x2b0>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	3301      	adds	r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b26:	e002      	b.n	8001b2e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f9      	bne.n	8001b28 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff01 	bl	8001940 <LL_ADC_IsInternalRegulatorEnabled>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10d      	bne.n	8001b60 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b48:	f043 0210 	orr.w	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b54:	f043 0201 	orr.w	r2, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff61 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 8001b6a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f040 8188 	bne.w	8001e8a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f040 8184 	bne.w	8001e8a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b8a:	f043 0202 	orr.w	r2, r3, #2
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff0e 	bl	80019b8 <LL_ADC_IsEnabled>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d136      	bne.n	8001c10 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6c      	ldr	r2, [pc, #432]	@ (8001d58 <HAL_ADC_Init+0x2b4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d004      	beq.n	8001bb6 <HAL_ADC_Init+0x112>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d5c <HAL_ADC_Init+0x2b8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_ADC_Init+0x130>
 8001bb6:	4868      	ldr	r0, [pc, #416]	@ (8001d58 <HAL_ADC_Init+0x2b4>)
 8001bb8:	f7ff fefe 	bl	80019b8 <LL_ADC_IsEnabled>
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	4867      	ldr	r0, [pc, #412]	@ (8001d5c <HAL_ADC_Init+0x2b8>)
 8001bc0:	f7ff fefa 	bl	80019b8 <LL_ADC_IsEnabled>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	e008      	b.n	8001be6 <HAL_ADC_Init+0x142>
 8001bd4:	4862      	ldr	r0, [pc, #392]	@ (8001d60 <HAL_ADC_Init+0x2bc>)
 8001bd6:	f7ff feef 	bl	80019b8 <LL_ADC_IsEnabled>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d012      	beq.n	8001c10 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a5a      	ldr	r2, [pc, #360]	@ (8001d58 <HAL_ADC_Init+0x2b4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d004      	beq.n	8001bfe <HAL_ADC_Init+0x15a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a58      	ldr	r2, [pc, #352]	@ (8001d5c <HAL_ADC_Init+0x2b8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Init+0x15e>
 8001bfe:	4a59      	ldr	r2, [pc, #356]	@ (8001d64 <HAL_ADC_Init+0x2c0>)
 8001c00:	e000      	b.n	8001c04 <HAL_ADC_Init+0x160>
 8001c02:	4a59      	ldr	r2, [pc, #356]	@ (8001d68 <HAL_ADC_Init+0x2c4>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7ff fc80 	bl	8001510 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a52      	ldr	r2, [pc, #328]	@ (8001d60 <HAL_ADC_Init+0x2bc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d129      	bne.n	8001c6e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7e5b      	ldrb	r3, [r3, #25]
 8001c1e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001c24:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001c2a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d013      	beq.n	8001c5c <HAL_ADC_Init+0x1b8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	d00d      	beq.n	8001c58 <HAL_ADC_Init+0x1b4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b1c      	cmp	r3, #28
 8001c42:	d007      	beq.n	8001c54 <HAL_ADC_Init+0x1b0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b18      	cmp	r3, #24
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_Init+0x1ac>
 8001c4c:	2318      	movs	r3, #24
 8001c4e:	e006      	b.n	8001c5e <HAL_ADC_Init+0x1ba>
 8001c50:	2300      	movs	r3, #0
 8001c52:	e004      	b.n	8001c5e <HAL_ADC_Init+0x1ba>
 8001c54:	2310      	movs	r3, #16
 8001c56:	e002      	b.n	8001c5e <HAL_ADC_Init+0x1ba>
 8001c58:	2308      	movs	r3, #8
 8001c5a:	e000      	b.n	8001c5e <HAL_ADC_Init+0x1ba>
 8001c5c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001c5e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c66:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	e00e      	b.n	8001c8c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7e5b      	ldrb	r3, [r3, #25]
 8001c72:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c78:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c7e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c86:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d106      	bne.n	8001ca4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	045b      	lsls	r3, r3, #17
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d009      	beq.n	8001cc0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a26      	ldr	r2, [pc, #152]	@ (8001d60 <HAL_ADC_Init+0x2bc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d115      	bne.n	8001cf6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <HAL_ADC_Init+0x2c8>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	69b9      	ldr	r1, [r7, #24]
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	e009      	b.n	8001d0a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d70 <HAL_ADC_Init+0x2cc>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	69b9      	ldr	r1, [r7, #24]
 8001d06:	430b      	orrs	r3, r1
 8001d08:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fe8c 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 8001d14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff feae 	bl	8001a7c <LL_ADC_INJ_IsConversionOngoing>
 8001d20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f040 808e 	bne.w	8001e46 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f040 808a 	bne.w	8001e46 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <HAL_ADC_Init+0x2bc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d11b      	bne.n	8001d74 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7e1b      	ldrb	r3, [r3, #24]
 8001d40:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d48:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	e018      	b.n	8001d82 <HAL_ADC_Init+0x2de>
 8001d50:	24000000 	.word	0x24000000
 8001d54:	053e2d63 	.word	0x053e2d63
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40022100 	.word	0x40022100
 8001d60:	58026000 	.word	0x58026000
 8001d64:	40022300 	.word	0x40022300
 8001d68:	58026300 	.word	0x58026300
 8001d6c:	fff04007 	.word	0xfff04007
 8001d70:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7e1b      	ldrb	r3, [r3, #24]
 8001d78:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	4b46      	ldr	r3, [pc, #280]	@ (8001ea4 <HAL_ADC_Init+0x400>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	69b9      	ldr	r1, [r7, #24]
 8001d92:	430b      	orrs	r3, r1
 8001d94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d137      	bne.n	8001e10 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea8 <HAL_ADC_Init+0x404>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d116      	bne.n	8001dde <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <HAL_ADC_Init+0x408>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	611a      	str	r2, [r3, #16]
 8001ddc:	e020      	b.n	8001e20 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	4b32      	ldr	r3, [pc, #200]	@ (8001eb0 <HAL_ADC_Init+0x40c>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dec:	3a01      	subs	r2, #1
 8001dee:	0411      	lsls	r1, r2, #16
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001df4:	4311      	orrs	r1, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001e00:	430a      	orrs	r2, r1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	611a      	str	r2, [r3, #16]
 8001e0e:	e007      	b.n	8001e20 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <HAL_ADC_Init+0x404>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d002      	beq.n	8001e46 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 ffb5 	bl	8002db0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10c      	bne.n	8001e68 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e54:	f023 010f 	bic.w	r1, r3, #15
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e66:	e007      	b.n	8001e78 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 020f 	bic.w	r2, r2, #15
 8001e76:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7c:	f023 0303 	bic.w	r3, r3, #3
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	661a      	str	r2, [r3, #96]	@ 0x60
 8001e88:	e007      	b.n	8001e9a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8e:	f043 0210 	orr.w	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3724      	adds	r7, #36	@ 0x24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	ffffbffc 	.word	0xffffbffc
 8001ea8:	58026000 	.word	0x58026000
 8001eac:	fc00f81f 	.word	0xfc00f81f
 8001eb0:	fc00f81e 	.word	0xfc00f81e

08001eb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b0b9      	sub	sp, #228	@ 0xe4
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ef6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4aab      	ldr	r2, [pc, #684]	@ (80021ac <HAL_ADC_ConfigChannel+0x2d0>)
 8001efe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x34>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f000 bcfe 	b.w	800290c <HAL_ADC_ConfigChannel+0xa30>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fd85 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 84e2 	bne.w	80028ee <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db38      	blt.n	8001fa4 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a9e      	ldr	r2, [pc, #632]	@ (80021b0 <HAL_ADC_ConfigChannel+0x2d4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d033      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x7e>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2201      	movs	r2, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	e01d      	b.n	8001f96 <HAL_ADC_ConfigChannel+0xba>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	e004      	b.n	8001f8c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8001f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2201      	movs	r2, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	69d1      	ldr	r1, [r2, #28]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f7ff fbe6 	bl	8001782 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fd36 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 8001fc0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fd57 	bl	8001a7c <LL_ADC_INJ_IsConversionOngoing>
 8001fce:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 8270 	bne.w	80024bc <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 826b 	bne.w	80024bc <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f7ff fbf1 	bl	80017da <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a6c      	ldr	r2, [pc, #432]	@ (80021b0 <HAL_ADC_ConfigChannel+0x2d4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10d      	bne.n	800201e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	08db      	lsrs	r3, r3, #3
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800201c:	e032      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800201e:	4b65      	ldr	r3, [pc, #404]	@ (80021b4 <HAL_ADC_ConfigChannel+0x2d8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800202a:	d10b      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x168>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	e01d      	b.n	8002080 <HAL_ADC_ConfigChannel+0x1a4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10b      	bne.n	800206a <HAL_ADC_ConfigChannel+0x18e>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	e00a      	b.n	8002080 <HAL_ADC_ConfigChannel+0x1a4>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b04      	cmp	r3, #4
 800208a:	d048      	beq.n	800211e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6919      	ldr	r1, [r3, #16]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800209c:	f7ff fa6c 	bl	8001578 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a42      	ldr	r2, [pc, #264]	@ (80021b0 <HAL_ADC_ConfigChannel+0x2d4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d119      	bne.n	80020de <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6919      	ldr	r1, [r3, #16]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f7ff fb04 	bl	80016c4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6919      	ldr	r1, [r3, #16]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d102      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x1f8>
 80020ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020d2:	e000      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x1fa>
 80020d4:	2300      	movs	r3, #0
 80020d6:	461a      	mov	r2, r3
 80020d8:	f7ff fad2 	bl	8001680 <LL_ADC_SetOffsetSaturation>
 80020dc:	e1ee      	b.n	80024bc <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6919      	ldr	r1, [r3, #16]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d102      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x21a>
 80020f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80020f4:	e000      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x21c>
 80020f6:	2300      	movs	r3, #0
 80020f8:	461a      	mov	r2, r3
 80020fa:	f7ff fa9f 	bl	800163c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6919      	ldr	r1, [r3, #16]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	7e1b      	ldrb	r3, [r3, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x238>
 800210e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002112:	e000      	b.n	8002116 <HAL_ADC_ConfigChannel+0x23a>
 8002114:	2300      	movs	r3, #0
 8002116:	461a      	mov	r2, r3
 8002118:	f7ff fa76 	bl	8001608 <LL_ADC_SetDataRightShift>
 800211c:	e1ce      	b.n	80024bc <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a23      	ldr	r2, [pc, #140]	@ (80021b0 <HAL_ADC_ConfigChannel+0x2d4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	f040 8181 	bne.w	800242c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fa53 	bl	80015dc <LL_ADC_GetOffsetChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x27a>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fa48 	bl	80015dc <LL_ADC_GetOffsetChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	e01e      	b.n	8002194 <HAL_ADC_ConfigChannel+0x2b8>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fa3d 	bl	80015dc <LL_ADC_GetOffsetChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002174:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002178:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800217c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e004      	b.n	8002192 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002188:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x2dc>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	e01e      	b.n	80021ea <HAL_ADC_ConfigChannel+0x30e>
 80021ac:	47ff0000 	.word	0x47ff0000
 80021b0:	58026000 	.word	0x58026000
 80021b4:	5c001000 	.word	0x5c001000
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80021cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80021d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80021dc:	2320      	movs	r3, #32
 80021de:	e004      	b.n	80021ea <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80021e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d106      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2200      	movs	r2, #0
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fa86 	bl	8001708 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f9ea 	bl	80015dc <LL_ADC_GetOffsetChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10a      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x34c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2101      	movs	r1, #1
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f9df 	bl	80015dc <LL_ADC_GetOffsetChannel>
 800221e:	4603      	mov	r3, r0
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	f003 021f 	and.w	r2, r3, #31
 8002226:	e01e      	b.n	8002266 <HAL_ADC_ConfigChannel+0x38a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f9d4 	bl	80015dc <LL_ADC_GetOffsetChannel>
 8002234:	4603      	mov	r3, r0
 8002236:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002246:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800224a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800224e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e004      	b.n	8002264 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800225a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_ADC_ConfigChannel+0x3a2>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0e9b      	lsrs	r3, r3, #26
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	e018      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x3d4>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002292:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002296:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800229a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80022a2:	2320      	movs	r3, #32
 80022a4:	e004      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80022a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d106      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2101      	movs	r1, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fa23 	bl	8001708 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2102      	movs	r1, #2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f987 	bl	80015dc <LL_ADC_GetOffsetChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10a      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x412>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff f97c 	bl	80015dc <LL_ADC_GetOffsetChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	e01e      	b.n	800232c <HAL_ADC_ConfigChannel+0x450>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2102      	movs	r1, #2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff f971 	bl	80015dc <LL_ADC_GetOffsetChannel>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800230c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e004      	b.n	800232a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x468>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	e014      	b.n	800236e <HAL_ADC_ConfigChannel+0x492>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002354:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002358:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002360:	2320      	movs	r3, #32
 8002362:	e004      	b.n	800236e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002364:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	429a      	cmp	r2, r3
 8002370:	d106      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	2102      	movs	r1, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f9c4 	bl	8001708 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2103      	movs	r1, #3
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff f928 	bl	80015dc <LL_ADC_GetOffsetChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10a      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x4d0>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2103      	movs	r1, #3
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff f91d 	bl	80015dc <LL_ADC_GetOffsetChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 021f 	and.w	r2, r3, #31
 80023aa:	e017      	b.n	80023dc <HAL_ADC_ConfigChannel+0x500>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2103      	movs	r1, #3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f912 	bl	80015dc <LL_ADC_GetOffsetChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80023c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023c6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80023c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e003      	b.n	80023da <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80023d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x518>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	e011      	b.n	8002418 <HAL_ADC_ConfigChannel+0x53c>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002404:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002406:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e003      	b.n	8002418 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	429a      	cmp	r2, r3
 800241a:	d14f      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2200      	movs	r2, #0
 8002422:	2103      	movs	r1, #3
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff f96f 	bl	8001708 <LL_ADC_SetOffsetState>
 800242a:	e047      	b.n	80024bc <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002432:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	069b      	lsls	r3, r3, #26
 800243c:	429a      	cmp	r2, r3
 800243e:	d107      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800244e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002456:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	069b      	lsls	r3, r3, #26
 8002460:	429a      	cmp	r2, r3
 8002462:	d107      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002472:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800247a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	069b      	lsls	r3, r3, #26
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002496:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800249e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	069b      	lsls	r3, r3, #26
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d107      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fa79 	bl	80019b8 <LL_ADC_IsEnabled>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 8219 	bne.w	8002900 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	461a      	mov	r2, r3
 80024dc:	f7ff f9a8 	bl	8001830 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4aa1      	ldr	r2, [pc, #644]	@ (800276c <HAL_ADC_ConfigChannel+0x890>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	f040 812e 	bne.w	8002748 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x638>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	3301      	adds	r3, #1
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2b09      	cmp	r3, #9
 800250a:	bf94      	ite	ls
 800250c:	2301      	movls	r3, #1
 800250e:	2300      	movhi	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e019      	b.n	8002548 <HAL_ADC_ConfigChannel+0x66c>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002524:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800252c:	2320      	movs	r3, #32
 800252e:	e003      	b.n	8002538 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3301      	adds	r3, #1
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	2b09      	cmp	r3, #9
 8002540:	bf94      	ite	ls
 8002542:	2301      	movls	r3, #1
 8002544:	2300      	movhi	r3, #0
 8002546:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002548:	2b00      	cmp	r3, #0
 800254a:	d079      	beq.n	8002640 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002554:	2b00      	cmp	r3, #0
 8002556:	d107      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x68c>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	3301      	adds	r3, #1
 8002560:	069b      	lsls	r3, r3, #26
 8002562:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002566:	e015      	b.n	8002594 <HAL_ADC_ConfigChannel+0x6b8>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002578:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800257a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e003      	b.n	800258c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	3301      	adds	r3, #1
 800258e:	069b      	lsls	r3, r3, #26
 8002590:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x6d8>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e9b      	lsrs	r3, r3, #26
 80025a6:	3301      	adds	r3, #1
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	e017      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x708>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80025c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80025c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80025cc:	2320      	movs	r3, #32
 80025ce:	e003      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80025d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	ea42 0103 	orr.w	r1, r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <HAL_ADC_ConfigChannel+0x72e>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	3301      	adds	r3, #1
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	051b      	lsls	r3, r3, #20
 8002608:	e018      	b.n	800263c <HAL_ADC_ConfigChannel+0x760>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800261c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e003      	b.n	800262e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	3301      	adds	r3, #1
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800263c:	430b      	orrs	r3, r1
 800263e:	e07e      	b.n	800273e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002648:	2b00      	cmp	r3, #0
 800264a:	d107      	bne.n	800265c <HAL_ADC_ConfigChannel+0x780>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	3301      	adds	r3, #1
 8002654:	069b      	lsls	r3, r3, #26
 8002656:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800265a:	e015      	b.n	8002688 <HAL_ADC_ConfigChannel+0x7ac>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002674:	2320      	movs	r3, #32
 8002676:	e003      	b.n	8002680 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	3301      	adds	r3, #1
 8002682:	069b      	lsls	r3, r3, #26
 8002684:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x7cc>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	3301      	adds	r3, #1
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2101      	movs	r1, #1
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	e017      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x7fc>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	61bb      	str	r3, [r7, #24]
  return result;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80026c0:	2320      	movs	r3, #32
 80026c2:	e003      	b.n	80026cc <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	ea42 0103 	orr.w	r1, r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10d      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x828>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0e9b      	lsrs	r3, r3, #26
 80026ee:	3301      	adds	r3, #1
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	3b1e      	subs	r3, #30
 80026fc:	051b      	lsls	r3, r3, #20
 80026fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002702:	e01b      	b.n	800273c <HAL_ADC_ConfigChannel+0x860>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	60fb      	str	r3, [r7, #12]
  return result;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e003      	b.n	8002728 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	3b1e      	subs	r3, #30
 8002736:	051b      	lsls	r3, r3, #20
 8002738:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273c:	430b      	orrs	r3, r1
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	6892      	ldr	r2, [r2, #8]
 8002742:	4619      	mov	r1, r3
 8002744:	f7ff f849 	bl	80017da <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f280 80d7 	bge.w	8002900 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a06      	ldr	r2, [pc, #24]	@ (8002770 <HAL_ADC_ConfigChannel+0x894>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_ADC_ConfigChannel+0x88a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <HAL_ADC_ConfigChannel+0x898>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10a      	bne.n	800277c <HAL_ADC_ConfigChannel+0x8a0>
 8002766:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <HAL_ADC_ConfigChannel+0x89c>)
 8002768:	e009      	b.n	800277e <HAL_ADC_ConfigChannel+0x8a2>
 800276a:	bf00      	nop
 800276c:	47ff0000 	.word	0x47ff0000
 8002770:	40022000 	.word	0x40022000
 8002774:	40022100 	.word	0x40022100
 8002778:	40022300 	.word	0x40022300
 800277c:	4b65      	ldr	r3, [pc, #404]	@ (8002914 <HAL_ADC_ConfigChannel+0xa38>)
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe feec 	bl	800155c <LL_ADC_GetCommonPathInternalCh>
 8002784:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a62      	ldr	r2, [pc, #392]	@ (8002918 <HAL_ADC_ConfigChannel+0xa3c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <HAL_ADC_ConfigChannel+0x8c0>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a61      	ldr	r2, [pc, #388]	@ (800291c <HAL_ADC_ConfigChannel+0xa40>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d10e      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x8de>
 800279c:	485e      	ldr	r0, [pc, #376]	@ (8002918 <HAL_ADC_ConfigChannel+0xa3c>)
 800279e:	f7ff f90b 	bl	80019b8 <LL_ADC_IsEnabled>
 80027a2:	4604      	mov	r4, r0
 80027a4:	485d      	ldr	r0, [pc, #372]	@ (800291c <HAL_ADC_ConfigChannel+0xa40>)
 80027a6:	f7ff f907 	bl	80019b8 <LL_ADC_IsEnabled>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4323      	orrs	r3, r4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	e008      	b.n	80027cc <HAL_ADC_ConfigChannel+0x8f0>
 80027ba:	4859      	ldr	r0, [pc, #356]	@ (8002920 <HAL_ADC_ConfigChannel+0xa44>)
 80027bc:	f7ff f8fc 	bl	80019b8 <LL_ADC_IsEnabled>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf0c      	ite	eq
 80027c6:	2301      	moveq	r3, #1
 80027c8:	2300      	movne	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8084 	beq.w	80028da <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a53      	ldr	r2, [pc, #332]	@ (8002924 <HAL_ADC_ConfigChannel+0xa48>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d132      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x966>
 80027dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d12c      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002920 <HAL_ADC_ConfigChannel+0xa44>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f040 8086 	bne.w	8002900 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a47      	ldr	r2, [pc, #284]	@ (8002918 <HAL_ADC_ConfigChannel+0xa3c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_ADC_ConfigChannel+0x92c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a46      	ldr	r2, [pc, #280]	@ (800291c <HAL_ADC_ConfigChannel+0xa40>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x930>
 8002808:	4a47      	ldr	r2, [pc, #284]	@ (8002928 <HAL_ADC_ConfigChannel+0xa4c>)
 800280a:	e000      	b.n	800280e <HAL_ADC_ConfigChannel+0x932>
 800280c:	4a41      	ldr	r2, [pc, #260]	@ (8002914 <HAL_ADC_ConfigChannel+0xa38>)
 800280e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002812:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f7fe fe8c 	bl	8001536 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800281e:	4b43      	ldr	r3, [pc, #268]	@ (800292c <HAL_ADC_ConfigChannel+0xa50>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	4a42      	ldr	r2, [pc, #264]	@ (8002930 <HAL_ADC_ConfigChannel+0xa54>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	099b      	lsrs	r3, r3, #6
 800282c:	3301      	adds	r3, #1
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002832:	e002      	b.n	800283a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	3b01      	subs	r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f9      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002840:	e05e      	b.n	8002900 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a3b      	ldr	r2, [pc, #236]	@ (8002934 <HAL_ADC_ConfigChannel+0xa58>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d120      	bne.n	800288e <HAL_ADC_ConfigChannel+0x9b2>
 800284c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d11a      	bne.n	800288e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a30      	ldr	r2, [pc, #192]	@ (8002920 <HAL_ADC_ConfigChannel+0xa44>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d14e      	bne.n	8002900 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2c      	ldr	r2, [pc, #176]	@ (8002918 <HAL_ADC_ConfigChannel+0xa3c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d004      	beq.n	8002876 <HAL_ADC_ConfigChannel+0x99a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2a      	ldr	r2, [pc, #168]	@ (800291c <HAL_ADC_ConfigChannel+0xa40>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x99e>
 8002876:	4a2c      	ldr	r2, [pc, #176]	@ (8002928 <HAL_ADC_ConfigChannel+0xa4c>)
 8002878:	e000      	b.n	800287c <HAL_ADC_ConfigChannel+0x9a0>
 800287a:	4a26      	ldr	r2, [pc, #152]	@ (8002914 <HAL_ADC_ConfigChannel+0xa38>)
 800287c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002880:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7fe fe55 	bl	8001536 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800288c:	e038      	b.n	8002900 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a29      	ldr	r2, [pc, #164]	@ (8002938 <HAL_ADC_ConfigChannel+0xa5c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d133      	bne.n	8002900 <HAL_ADC_ConfigChannel+0xa24>
 8002898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800289c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d12d      	bne.n	8002900 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <HAL_ADC_ConfigChannel+0xa44>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d128      	bne.n	8002900 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a19      	ldr	r2, [pc, #100]	@ (8002918 <HAL_ADC_ConfigChannel+0xa3c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x9e6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a17      	ldr	r2, [pc, #92]	@ (800291c <HAL_ADC_ConfigChannel+0xa40>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x9ea>
 80028c2:	4a19      	ldr	r2, [pc, #100]	@ (8002928 <HAL_ADC_ConfigChannel+0xa4c>)
 80028c4:	e000      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x9ec>
 80028c6:	4a13      	ldr	r2, [pc, #76]	@ (8002914 <HAL_ADC_ConfigChannel+0xa38>)
 80028c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f7fe fe2f 	bl	8001536 <LL_ADC_SetCommonPathInternalCh>
 80028d8:	e012      	b.n	8002900 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80028ec:	e008      	b.n	8002900 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f2:	f043 0220 	orr.w	r2, r3, #32
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002908:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800290c:	4618      	mov	r0, r3
 800290e:	37e4      	adds	r7, #228	@ 0xe4
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	58026300 	.word	0x58026300
 8002918:	40022000 	.word	0x40022000
 800291c:	40022100 	.word	0x40022100
 8002920:	58026000 	.word	0x58026000
 8002924:	c7520000 	.word	0xc7520000
 8002928:	40022300 	.word	0x40022300
 800292c:	24000000 	.word	0x24000000
 8002930:	053e2d63 	.word	0x053e2d63
 8002934:	c3210000 	.word	0xc3210000
 8002938:	cb840000 	.word	0xcb840000

0800293c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f86a 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 8002958:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f88c 	bl	8001a7c <LL_ADC_INJ_IsConversionOngoing>
 8002964:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d103      	bne.n	8002974 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8098 	beq.w	8002aa4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02a      	beq.n	80029d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7e5b      	ldrb	r3, [r3, #25]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d126      	bne.n	80029d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7e1b      	ldrb	r3, [r3, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d122      	bne.n	80029d8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002992:	2301      	movs	r3, #1
 8002994:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002996:	e014      	b.n	80029c2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	4a45      	ldr	r2, [pc, #276]	@ (8002ab0 <ADC_ConversionStop+0x174>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d90d      	bls.n	80029bc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a4:	f043 0210 	orr.w	r2, r3, #16
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e074      	b.n	8002aa6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	3301      	adds	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029cc:	2b40      	cmp	r3, #64	@ 0x40
 80029ce:	d1e3      	bne.n	8002998 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2240      	movs	r2, #64	@ 0x40
 80029d6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d014      	beq.n	8002a08 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff f822 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fff3 	bl	80019de <LL_ADC_IsDisableOngoing>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d104      	bne.n	8002a08 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fffe 	bl	8001a04 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d014      	beq.n	8002a38 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff f832 	bl	8001a7c <LL_ADC_INJ_IsConversionOngoing>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe ffdb 	bl	80019de <LL_ADC_IsDisableOngoing>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d104      	bne.n	8002a38 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f80e 	bl	8001a54 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d005      	beq.n	8002a4a <ADC_ConversionStop+0x10e>
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d105      	bne.n	8002a50 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a44:	230c      	movs	r3, #12
 8002a46:	617b      	str	r3, [r7, #20]
        break;
 8002a48:	e005      	b.n	8002a56 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	617b      	str	r3, [r7, #20]
        break;
 8002a4e:	e002      	b.n	8002a56 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a50:	2304      	movs	r3, #4
 8002a52:	617b      	str	r3, [r7, #20]
        break;
 8002a54:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a56:	f7fe fd2b 	bl	80014b0 <HAL_GetTick>
 8002a5a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a5c:	e01b      	b.n	8002a96 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a5e:	f7fe fd27 	bl	80014b0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d914      	bls.n	8002a96 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00d      	beq.n	8002a96 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e007      	b.n	8002aa6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1dc      	bne.n	8002a5e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	000cdbff 	.word	0x000cdbff

08002ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe ff79 	bl	80019b8 <LL_ADC_IsEnabled>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d16e      	bne.n	8002baa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	4b38      	ldr	r3, [pc, #224]	@ (8002bb4 <ADC_Enable+0x100>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ade:	f043 0210 	orr.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e05a      	b.n	8002bac <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe ff34 	bl	8001968 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fcd6 	bl	80014b0 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <ADC_Enable+0x104>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <ADC_Enable+0x66>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a29      	ldr	r2, [pc, #164]	@ (8002bbc <ADC_Enable+0x108>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <ADC_Enable+0x6a>
 8002b1a:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <ADC_Enable+0x10c>)
 8002b1c:	e000      	b.n	8002b20 <ADC_Enable+0x6c>
 8002b1e:	4b29      	ldr	r3, [pc, #164]	@ (8002bc4 <ADC_Enable+0x110>)
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fec5 	bl	80018b0 <LL_ADC_GetMultimode>
 8002b26:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a23      	ldr	r2, [pc, #140]	@ (8002bbc <ADC_Enable+0x108>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d002      	beq.n	8002b38 <ADC_Enable+0x84>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e000      	b.n	8002b3a <ADC_Enable+0x86>
 8002b38:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb8 <ADC_Enable+0x104>)
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02c      	beq.n	8002b9c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d130      	bne.n	8002baa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b48:	e028      	b.n	8002b9c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe ff32 	bl	80019b8 <LL_ADC_IsEnabled>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe ff02 	bl	8001968 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b64:	f7fe fca4 	bl	80014b0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d914      	bls.n	8002b9c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d00d      	beq.n	8002b9c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b84:	f043 0210 	orr.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e007      	b.n	8002bac <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d1cf      	bne.n	8002b4a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	8000003f 	.word	0x8000003f
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	40022100 	.word	0x40022100
 8002bc0:	40022300 	.word	0x40022300
 8002bc4:	58026300 	.word	0x58026300

08002bc8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe ff02 	bl	80019de <LL_ADC_IsDisableOngoing>
 8002bda:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fee9 	bl	80019b8 <LL_ADC_IsEnabled>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d047      	beq.n	8002c7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d144      	bne.n	8002c7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030d 	and.w	r3, r3, #13
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10c      	bne.n	8002c1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fec3 	bl	8001990 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2203      	movs	r2, #3
 8002c10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c12:	f7fe fc4d 	bl	80014b0 <HAL_GetTick>
 8002c16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c18:	e029      	b.n	8002c6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e023      	b.n	8002c7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c36:	f7fe fc3b 	bl	80014b0 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d914      	bls.n	8002c6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c56:	f043 0210 	orr.w	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e007      	b.n	8002c7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1dc      	bne.n	8002c36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d14b      	bne.n	8002d38 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d021      	beq.n	8002cfe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fd4c 	bl	800175c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d032      	beq.n	8002d30 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d12b      	bne.n	8002d30 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d11f      	bne.n	8002d30 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	661a      	str	r2, [r3, #96]	@ 0x60
 8002cfc:	e018      	b.n	8002d30 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d111      	bne.n	8002d30 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7fd ffdf 	bl	8000cf4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d36:	e00e      	b.n	8002d56 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff f8bf 	bl	8001ec8 <HAL_ADC_ErrorCallback>
}
 8002d4a:	e004      	b.n	8002d56 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff f8a1 	bl	8001eb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d98:	f043 0204 	orr.w	r2, r3, #4
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff f891 	bl	8001ec8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a6c      	ldr	r2, [pc, #432]	@ (8002f70 <ADC_ConfigureBoostMode+0x1c0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <ADC_ConfigureBoostMode+0x1c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6b      	ldr	r2, [pc, #428]	@ (8002f74 <ADC_ConfigureBoostMode+0x1c4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d109      	bne.n	8002de0 <ADC_ConfigureBoostMode+0x30>
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f78 <ADC_ConfigureBoostMode+0x1c8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e008      	b.n	8002df2 <ADC_ConfigureBoostMode+0x42>
 8002de0:	4b66      	ldr	r3, [pc, #408]	@ (8002f7c <ADC_ConfigureBoostMode+0x1cc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01c      	beq.n	8002e30 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002df6:	f004 fa6b 	bl	80072d0 <HAL_RCC_GetHCLKFreq>
 8002dfa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e04:	d010      	beq.n	8002e28 <ADC_ConfigureBoostMode+0x78>
 8002e06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e0a:	d873      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x144>
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e10:	d002      	beq.n	8002e18 <ADC_ConfigureBoostMode+0x68>
 8002e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e16:	d16d      	bne.n	8002ef4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	0c1b      	lsrs	r3, r3, #16
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	60fb      	str	r3, [r7, #12]
        break;
 8002e26:	e068      	b.n	8002efa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	60fb      	str	r3, [r7, #12]
        break;
 8002e2e:	e064      	b.n	8002efa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e30:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	f005 fc62 	bl	8008700 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e3c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e46:	d051      	beq.n	8002eec <ADC_ConfigureBoostMode+0x13c>
 8002e48:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e4c:	d854      	bhi.n	8002ef8 <ADC_ConfigureBoostMode+0x148>
 8002e4e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e52:	d047      	beq.n	8002ee4 <ADC_ConfigureBoostMode+0x134>
 8002e54:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e58:	d84e      	bhi.n	8002ef8 <ADC_ConfigureBoostMode+0x148>
 8002e5a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e5e:	d03d      	beq.n	8002edc <ADC_ConfigureBoostMode+0x12c>
 8002e60:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e64:	d848      	bhi.n	8002ef8 <ADC_ConfigureBoostMode+0x148>
 8002e66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e6a:	d033      	beq.n	8002ed4 <ADC_ConfigureBoostMode+0x124>
 8002e6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e70:	d842      	bhi.n	8002ef8 <ADC_ConfigureBoostMode+0x148>
 8002e72:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e76:	d029      	beq.n	8002ecc <ADC_ConfigureBoostMode+0x11c>
 8002e78:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e7c:	d83c      	bhi.n	8002ef8 <ADC_ConfigureBoostMode+0x148>
 8002e7e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e82:	d01a      	beq.n	8002eba <ADC_ConfigureBoostMode+0x10a>
 8002e84:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e88:	d836      	bhi.n	8002ef8 <ADC_ConfigureBoostMode+0x148>
 8002e8a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e8e:	d014      	beq.n	8002eba <ADC_ConfigureBoostMode+0x10a>
 8002e90:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e94:	d830      	bhi.n	8002ef8 <ADC_ConfigureBoostMode+0x148>
 8002e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e9a:	d00e      	beq.n	8002eba <ADC_ConfigureBoostMode+0x10a>
 8002e9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ea0:	d82a      	bhi.n	8002ef8 <ADC_ConfigureBoostMode+0x148>
 8002ea2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ea6:	d008      	beq.n	8002eba <ADC_ConfigureBoostMode+0x10a>
 8002ea8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002eac:	d824      	bhi.n	8002ef8 <ADC_ConfigureBoostMode+0x148>
 8002eae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002eb2:	d002      	beq.n	8002eba <ADC_ConfigureBoostMode+0x10a>
 8002eb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002eb8:	d11e      	bne.n	8002ef8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	0c9b      	lsrs	r3, r3, #18
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec8:	60fb      	str	r3, [r7, #12]
        break;
 8002eca:	e016      	b.n	8002efa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	60fb      	str	r3, [r7, #12]
        break;
 8002ed2:	e012      	b.n	8002efa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	60fb      	str	r3, [r7, #12]
        break;
 8002eda:	e00e      	b.n	8002efa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	099b      	lsrs	r3, r3, #6
 8002ee0:	60fb      	str	r3, [r7, #12]
        break;
 8002ee2:	e00a      	b.n	8002efa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	09db      	lsrs	r3, r3, #7
 8002ee8:	60fb      	str	r3, [r7, #12]
        break;
 8002eea:	e006      	b.n	8002efa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	60fb      	str	r3, [r7, #12]
        break;
 8002ef2:	e002      	b.n	8002efa <ADC_ConfigureBoostMode+0x14a>
        break;
 8002ef4:	bf00      	nop
 8002ef6:	e000      	b.n	8002efa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002ef8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a1f      	ldr	r2, [pc, #124]	@ (8002f80 <ADC_ConfigureBoostMode+0x1d0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d808      	bhi.n	8002f1a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f16:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f18:	e025      	b.n	8002f66 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a19      	ldr	r2, [pc, #100]	@ (8002f84 <ADC_ConfigureBoostMode+0x1d4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d80a      	bhi.n	8002f38 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f34:	609a      	str	r2, [r3, #8]
}
 8002f36:	e016      	b.n	8002f66 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a13      	ldr	r2, [pc, #76]	@ (8002f88 <ADC_ConfigureBoostMode+0x1d8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d80a      	bhi.n	8002f56 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f52:	609a      	str	r2, [r3, #8]
}
 8002f54:	e007      	b.n	8002f66 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002f64:	609a      	str	r2, [r3, #8]
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40022000 	.word	0x40022000
 8002f74:	40022100 	.word	0x40022100
 8002f78:	40022300 	.word	0x40022300
 8002f7c:	58026300 	.word	0x58026300
 8002f80:	005f5e10 	.word	0x005f5e10
 8002f84:	00bebc20 	.word	0x00bebc20
 8002f88:	017d7840 	.word	0x017d7840

08002f8c <LL_ADC_IsEnabled>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <LL_ADC_IsEnabled+0x18>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <LL_ADC_IsEnabled+0x1a>
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <LL_ADC_StartCalibration>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <LL_ADC_StartCalibration+0x38>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	609a      	str	r2, [r3, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	3ffeffc0 	.word	0x3ffeffc0

08002ff0 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003004:	d101      	bne.n	800300a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_ADC_REG_StartConversion>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <LL_ADC_REG_StartConversion+0x24>)
 8003026:	4013      	ands	r3, r2
 8003028:	f043 0204 	orr.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	7fffffc0 	.word	0x7fffffc0

08003040 <LL_ADC_REG_IsConversionOngoing>:
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d101      	bne.n	8003058 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_ADCEx_Calibration_Start+0x1e>
 8003082:	2302      	movs	r3, #2
 8003084:	e04c      	b.n	8003120 <HAL_ADCEx_Calibration_Start+0xb8>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff fd9a 	bl	8002bc8 <ADC_Disable>
 8003094:	4603      	mov	r3, r0
 8003096:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d135      	bne.n	800310a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030a2:	4b21      	ldr	r3, [pc, #132]	@ (8003128 <HAL_ADCEx_Calibration_Start+0xc0>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	f043 0202 	orr.w	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff7c 	bl	8002fb4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030bc:	e014      	b.n	80030e8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3301      	adds	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4a19      	ldr	r2, [pc, #100]	@ (800312c <HAL_ADCEx_Calibration_Start+0xc4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d30d      	bcc.n	80030e8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d0:	f023 0312 	bic.w	r3, r3, #18
 80030d4:	f043 0210 	orr.w	r2, r3, #16
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e01b      	b.n	8003120 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff7f 	bl	8002ff0 <LL_ADC_IsCalibrationOnGoing>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e2      	bne.n	80030be <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fc:	f023 0303 	bic.w	r3, r3, #3
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	661a      	str	r2, [r3, #96]	@ 0x60
 8003108:	e005      	b.n	8003116 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	f043 0210 	orr.w	r2, r3, #16
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	ffffeefd 	.word	0xffffeefd
 800312c:	25c3f800 	.word	0x25c3f800

08003130 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b0a2      	sub	sp, #136	@ 0x88
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff7d 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
 800314e:	e0bb      	b.n	80032c8 <HAL_ADCEx_MultiModeStart_DMA+0x198>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800315a:	2302      	movs	r3, #2
 800315c:	e0b4      	b.n	80032c8 <HAL_ADCEx_MultiModeStart_DMA+0x198>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a59      	ldr	r2, [pc, #356]	@ (80032d0 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d002      	beq.n	8003176 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	e000      	b.n	8003178 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 8003176:	4b57      	ldr	r3, [pc, #348]	@ (80032d4 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	4293      	cmp	r3, r2
 800317e:	d006      	beq.n	800318e <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7ff fc97 	bl	8002ab4 <ADC_Enable>
 8003186:	4603      	mov	r3, r0
 8003188:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800318c:	e02e      	b.n	80031ec <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	673b      	str	r3, [r7, #112]	@ 0x70
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003192:	2300      	movs	r3, #0
 8003194:	677b      	str	r3, [r7, #116]	@ 0x74
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a4e      	ldr	r2, [pc, #312]	@ (80032d4 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d102      	bne.n	80031a6 <HAL_ADCEx_MultiModeStart_DMA+0x76>
 80031a0:	4b4b      	ldr	r3, [pc, #300]	@ (80032d0 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	e001      	b.n	80031aa <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]

      if (tmphadcSlave.Instance == NULL)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10b      	bne.n	80031c8 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e07f      	b.n	80032c8 <HAL_ADCEx_MultiModeStart_DMA+0x198>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff fc73 	bl	8002ab4 <ADC_Enable>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (tmp_hal_status == HAL_OK)
 80031d4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d107      	bne.n	80031ec <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80031dc:	f107 0310 	add.w	r3, r7, #16
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fc67 	bl	8002ab4 <ADC_Enable>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80031ec:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d163      	bne.n	80032bc <HAL_ADCEx_MultiModeStart_DMA+0x18c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031f8:	4b37      	ldr	r3, [pc, #220]	@ (80032d8 <HAL_ADCEx_MultiModeStart_DMA+0x1a8>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320e:	4a33      	ldr	r2, [pc, #204]	@ (80032dc <HAL_ADCEx_MultiModeStart_DMA+0x1ac>)
 8003210:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	4a32      	ldr	r2, [pc, #200]	@ (80032e0 <HAL_ADCEx_MultiModeStart_DMA+0x1b0>)
 8003218:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321e:	4a31      	ldr	r2, [pc, #196]	@ (80032e4 <HAL_ADCEx_MultiModeStart_DMA+0x1b4>)
 8003220:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	221c      	movs	r2, #28
 8003228:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0210 	orr.w	r2, r2, #16
 8003240:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a22      	ldr	r2, [pc, #136]	@ (80032d0 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d002      	beq.n	8003252 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	e000      	b.n	8003254 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 8003252:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	4293      	cmp	r3, r2
 800325a:	d00d      	beq.n	8003278 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3340      	adds	r3, #64	@ 0x40
 8003266:	4619      	mov	r1, r3
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f000 fe58 	bl	8003f20 <HAL_DMA_Start_IT>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003276:	e025      	b.n	80032c4 <HAL_ADCEx_MultiModeStart_DMA+0x194>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a15      	ldr	r2, [pc, #84]	@ (80032d4 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_ADCEx_MultiModeStart_DMA+0x15c>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a12      	ldr	r2, [pc, #72]	@ (80032d0 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_ADCEx_MultiModeStart_DMA+0x160>
 800328c:	4b16      	ldr	r3, [pc, #88]	@ (80032e8 <HAL_ADCEx_MultiModeStart_DMA+0x1b8>)
 800328e:	e000      	b.n	8003292 <HAL_ADCEx_MultiModeStart_DMA+0x162>
 8003290:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <HAL_ADCEx_MultiModeStart_DMA+0x1bc>)
 8003292:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800329a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800329e:	330c      	adds	r3, #12
 80032a0:	4619      	mov	r1, r3
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f000 fe3b 	bl	8003f20 <HAL_DMA_Start_IT>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff feaf 	bl	8003018 <LL_ADC_REG_StartConversion>
 80032ba:	e003      	b.n	80032c4 <HAL_ADCEx_MultiModeStart_DMA+0x194>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 80032c4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3788      	adds	r7, #136	@ 0x88
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40022100 	.word	0x40022100
 80032d4:	40022000 	.word	0x40022000
 80032d8:	fffff0fe 	.word	0xfffff0fe
 80032dc:	08002c87 	.word	0x08002c87
 80032e0:	08002d5f 	.word	0x08002d5f
 80032e4:	08002d7b 	.word	0x08002d7b
 80032e8:	40022300 	.word	0x40022300
 80032ec:	58026300 	.word	0x58026300

080032f0 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b0a2      	sub	sp, #136	@ 0x88
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_ADCEx_MultiModeStop_DMA+0x16>
 8003302:	2302      	movs	r3, #2
 8003304:	e0b7      	b.n	8003476 <HAL_ADCEx_MultiModeStop_DMA+0x186>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800330e:	2103      	movs	r1, #3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff fb13 	bl	800293c <ADC_ConversionStop>
 8003316:	4603      	mov	r3, r0
 8003318:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800331c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003320:	2b00      	cmp	r3, #0
 8003322:	f040 80a2 	bne.w	800346a <HAL_ADCEx_MultiModeStop_DMA+0x17a>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003326:	2300      	movs	r3, #0
 8003328:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800332a:	2300      	movs	r3, #0
 800332c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a53      	ldr	r2, [pc, #332]	@ (8003480 <HAL_ADCEx_MultiModeStop_DMA+0x190>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d102      	bne.n	800333e <HAL_ADCEx_MultiModeStop_DMA+0x4e>
 8003338:	4b52      	ldr	r3, [pc, #328]	@ (8003484 <HAL_ADCEx_MultiModeStop_DMA+0x194>)
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	e001      	b.n	8003342 <HAL_ADCEx_MultiModeStop_DMA+0x52>
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]

    if (tmphadcSlave.Instance == NULL)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <HAL_ADCEx_MultiModeStop_DMA+0x70>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e08a      	b.n	8003476 <HAL_ADCEx_MultiModeStop_DMA+0x186>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 8003360:	f7fe f8a6 	bl	80014b0 <HAL_GetTick>
 8003364:	67f8      	str	r0, [r7, #124]	@ 0x7c

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fe69 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 800336e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8003372:	e02a      	b.n	80033ca <HAL_ADCEx_MultiModeStop_DMA+0xda>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003374:	f7fe f89c 	bl	80014b0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b05      	cmp	r3, #5
 8003380:	d91d      	bls.n	80033be <HAL_ADCEx_MultiModeStop_DMA+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fe5b 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 800338a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fe54 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 8003398:	4603      	mov	r3, r0
 800339a:	2b01      	cmp	r3, #1
 800339c:	d003      	beq.n	80033a6 <HAL_ADCEx_MultiModeStop_DMA+0xb6>
           || (tmphadcSlave_conversion_on_going == 1UL)
 800339e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d10b      	bne.n	80033be <HAL_ADCEx_MultiModeStop_DMA+0xce>
          )
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033aa:	f043 0210 	orr.w	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e05b      	b.n	8003476 <HAL_ADCEx_MultiModeStop_DMA+0x186>
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fe3d 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 80033c6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fe36 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 80033d4:	4603      	mov	r3, r0
           || (tmphadcSlave_conversion_on_going == 1UL)
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d0cc      	beq.n	8003374 <HAL_ADCEx_MultiModeStop_DMA+0x84>
 80033da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d0c8      	beq.n	8003374 <HAL_ADCEx_MultiModeStop_DMA+0x84>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 f804 	bl	80043f4 <HAL_DMA_Abort>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 80033f2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d105      	bne.n	8003406 <HAL_ADCEx_MultiModeStop_DMA+0x116>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0210 	bic.w	r2, r2, #16
 8003414:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 8003416:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800341a:	2b00      	cmp	r3, #0
 800341c:	d115      	bne.n	800344a <HAL_ADCEx_MultiModeStop_DMA+0x15a>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 800341e:	f107 0308 	add.w	r3, r7, #8
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fbd0 	bl	8002bc8 <ADC_Disable>
 8003428:	4603      	mov	r3, r0
 800342a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff fbca 	bl	8002bc8 <ADC_Disable>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_ADCEx_MultiModeStop_DMA+0x16a>
 800343a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10b      	bne.n	800345a <HAL_ADCEx_MultiModeStop_DMA+0x16a>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003448:	e007      	b.n	800345a <HAL_ADCEx_MultiModeStop_DMA+0x16a>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff fbbc 	bl	8002bc8 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8003450:	f107 0308 	add.w	r3, r7, #8
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fbb7 	bl	8002bc8 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800345e:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <HAL_ADCEx_MultiModeStop_DMA+0x198>)
 8003460:	4013      	ands	r3, r2
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003472:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003476:	4618      	mov	r0, r3
 8003478:	3788      	adds	r7, #136	@ 0x88
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40022000 	.word	0x40022000
 8003484:	40022100 	.word	0x40022100
 8003488:	ffffeefe 	.word	0xffffeefe

0800348c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b0a3      	sub	sp, #140	@ 0x8c
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e0c1      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a5e      	ldr	r2, [pc, #376]	@ (8003638 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d102      	bne.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034c4:	4b5d      	ldr	r3, [pc, #372]	@ (800363c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e001      	b.n	80034ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0a0      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fda6 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 80034f4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fd9f 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	f040 8081 	bne.w	800360c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800350a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d17c      	bne.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a48      	ldr	r2, [pc, #288]	@ (8003638 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a46      	ldr	r2, [pc, #280]	@ (800363c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003526:	4b46      	ldr	r3, [pc, #280]	@ (8003640 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003528:	e000      	b.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800352a:	4b46      	ldr	r3, [pc, #280]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800352c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d039      	beq.n	80035aa <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003536:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	431a      	orrs	r2, r3
 8003544:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003546:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a3a      	ldr	r2, [pc, #232]	@ (8003638 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a39      	ldr	r2, [pc, #228]	@ (800363c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d10e      	bne.n	800357a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800355c:	4836      	ldr	r0, [pc, #216]	@ (8003638 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800355e:	f7ff fd15 	bl	8002f8c <LL_ADC_IsEnabled>
 8003562:	4604      	mov	r4, r0
 8003564:	4835      	ldr	r0, [pc, #212]	@ (800363c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003566:	f7ff fd11 	bl	8002f8c <LL_ADC_IsEnabled>
 800356a:	4603      	mov	r3, r0
 800356c:	4323      	orrs	r3, r4
 800356e:	2b00      	cmp	r3, #0
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	e008      	b.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800357a:	4833      	ldr	r0, [pc, #204]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800357c:	f7ff fd06 	bl	8002f8c <LL_ADC_IsEnabled>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d047      	beq.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003590:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	4b2d      	ldr	r3, [pc, #180]	@ (800364c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003596:	4013      	ands	r3, r2
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	6811      	ldr	r1, [r2, #0]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	6892      	ldr	r2, [r2, #8]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	431a      	orrs	r2, r3
 80035a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035a6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035a8:	e03a      	b.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80035aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003638 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1d      	ldr	r2, [pc, #116]	@ (800363c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10e      	bne.n	80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80035ca:	481b      	ldr	r0, [pc, #108]	@ (8003638 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80035cc:	f7ff fcde 	bl	8002f8c <LL_ADC_IsEnabled>
 80035d0:	4604      	mov	r4, r0
 80035d2:	481a      	ldr	r0, [pc, #104]	@ (800363c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035d4:	f7ff fcda 	bl	8002f8c <LL_ADC_IsEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	4323      	orrs	r3, r4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e008      	b.n	80035fa <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80035e8:	4817      	ldr	r0, [pc, #92]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80035ea:	f7ff fccf 	bl	8002f8c <LL_ADC_IsEnabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d010      	beq.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	4b12      	ldr	r3, [pc, #72]	@ (800364c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003604:	4013      	ands	r3, r2
 8003606:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003608:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800360a:	e009      	b.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800361e:	e000      	b.n	8003622 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003620:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800362a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800362e:	4618      	mov	r0, r3
 8003630:	378c      	adds	r7, #140	@ 0x8c
 8003632:	46bd      	mov	sp, r7
 8003634:	bd90      	pop	{r4, r7, pc}
 8003636:	bf00      	nop
 8003638:	40022000 	.word	0x40022000
 800363c:	40022100 	.word	0x40022100
 8003640:	40022300 	.word	0x40022300
 8003644:	58026300 	.word	0x58026300
 8003648:	58026000 	.word	0x58026000
 800364c:	fffff0e0 	.word	0xfffff0e0

08003650 <__NVIC_SetPriorityGrouping>:
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003660:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <__NVIC_SetPriorityGrouping+0x40>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800366c:	4013      	ands	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 800367a:	4313      	orrs	r3, r2
 800367c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367e:	4a04      	ldr	r2, [pc, #16]	@ (8003690 <__NVIC_SetPriorityGrouping+0x40>)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	60d3      	str	r3, [r2, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00
 8003694:	05fa0000 	.word	0x05fa0000

08003698 <__NVIC_GetPriorityGrouping>:
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800369c:	4b04      	ldr	r3, [pc, #16]	@ (80036b0 <__NVIC_GetPriorityGrouping+0x18>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 0307 	and.w	r3, r3, #7
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <__NVIC_EnableIRQ>:
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	db0b      	blt.n	80036de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	4907      	ldr	r1, [pc, #28]	@ (80036ec <__NVIC_EnableIRQ+0x38>)
 80036ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2001      	movs	r0, #1
 80036d6:	fa00 f202 	lsl.w	r2, r0, r2
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000e100 	.word	0xe000e100

080036f0 <__NVIC_SetPriority>:
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003700:	2b00      	cmp	r3, #0
 8003702:	db0a      	blt.n	800371a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	b2da      	uxtb	r2, r3
 8003708:	490c      	ldr	r1, [pc, #48]	@ (800373c <__NVIC_SetPriority+0x4c>)
 800370a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800370e:	0112      	lsls	r2, r2, #4
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	440b      	add	r3, r1
 8003714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003718:	e00a      	b.n	8003730 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4908      	ldr	r1, [pc, #32]	@ (8003740 <__NVIC_SetPriority+0x50>)
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	3b04      	subs	r3, #4
 8003728:	0112      	lsls	r2, r2, #4
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	440b      	add	r3, r1
 800372e:	761a      	strb	r2, [r3, #24]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000e100 	.word	0xe000e100
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <NVIC_EncodePriority>:
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	@ 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f1c3 0307 	rsb	r3, r3, #7
 800375e:	2b04      	cmp	r3, #4
 8003760:	bf28      	it	cs
 8003762:	2304      	movcs	r3, #4
 8003764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3304      	adds	r3, #4
 800376a:	2b06      	cmp	r3, #6
 800376c:	d902      	bls.n	8003774 <NVIC_EncodePriority+0x30>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3b03      	subs	r3, #3
 8003772:	e000      	b.n	8003776 <NVIC_EncodePriority+0x32>
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43da      	mvns	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	401a      	ands	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800378c:	f04f 31ff 	mov.w	r1, #4294967295
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	43d9      	mvns	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	4313      	orrs	r3, r2
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3724      	adds	r7, #36	@ 0x24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037bc:	d301      	bcc.n	80037c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037be:	2301      	movs	r3, #1
 80037c0:	e00f      	b.n	80037e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c2:	4a0a      	ldr	r2, [pc, #40]	@ (80037ec <SysTick_Config+0x40>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ca:	210f      	movs	r1, #15
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	f7ff ff8e 	bl	80036f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <SysTick_Config+0x40>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037da:	4b04      	ldr	r3, [pc, #16]	@ (80037ec <SysTick_Config+0x40>)
 80037dc:	2207      	movs	r2, #7
 80037de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	e000e010 	.word	0xe000e010

080037f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff29 	bl	8003650 <__NVIC_SetPriorityGrouping>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003814:	f7ff ff40 	bl	8003698 <__NVIC_GetPriorityGrouping>
 8003818:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f7ff ff90 	bl	8003744 <NVIC_EncodePriority>
 8003824:	4602      	mov	r2, r0
 8003826:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff5f 	bl	80036f0 <__NVIC_SetPriority>
}
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff33 	bl	80036b4 <__NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffa4 	bl	80037ac <SysTick_Config>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7fd fe1a 	bl	80014b0 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e312      	b.n	8003eae <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a66      	ldr	r2, [pc, #408]	@ (8003a28 <HAL_DMA_Init+0x1b8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d04a      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a65      	ldr	r2, [pc, #404]	@ (8003a2c <HAL_DMA_Init+0x1bc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d045      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a63      	ldr	r2, [pc, #396]	@ (8003a30 <HAL_DMA_Init+0x1c0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d040      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a62      	ldr	r2, [pc, #392]	@ (8003a34 <HAL_DMA_Init+0x1c4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d03b      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a60      	ldr	r2, [pc, #384]	@ (8003a38 <HAL_DMA_Init+0x1c8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d036      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a5f      	ldr	r2, [pc, #380]	@ (8003a3c <HAL_DMA_Init+0x1cc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d031      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a40 <HAL_DMA_Init+0x1d0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d02c      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003a44 <HAL_DMA_Init+0x1d4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d027      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003a48 <HAL_DMA_Init+0x1d8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d022      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a59      	ldr	r2, [pc, #356]	@ (8003a4c <HAL_DMA_Init+0x1dc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d01d      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a57      	ldr	r2, [pc, #348]	@ (8003a50 <HAL_DMA_Init+0x1e0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d018      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a56      	ldr	r2, [pc, #344]	@ (8003a54 <HAL_DMA_Init+0x1e4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a54      	ldr	r2, [pc, #336]	@ (8003a58 <HAL_DMA_Init+0x1e8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a53      	ldr	r2, [pc, #332]	@ (8003a5c <HAL_DMA_Init+0x1ec>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d009      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a51      	ldr	r2, [pc, #324]	@ (8003a60 <HAL_DMA_Init+0x1f0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_DMA_Init+0xb8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a50      	ldr	r2, [pc, #320]	@ (8003a64 <HAL_DMA_Init+0x1f4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d101      	bne.n	800392c <HAL_DMA_Init+0xbc>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <HAL_DMA_Init+0xbe>
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 813c 	beq.w	8003bac <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a37      	ldr	r2, [pc, #220]	@ (8003a28 <HAL_DMA_Init+0x1b8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d04a      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a36      	ldr	r2, [pc, #216]	@ (8003a2c <HAL_DMA_Init+0x1bc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d045      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a34      	ldr	r2, [pc, #208]	@ (8003a30 <HAL_DMA_Init+0x1c0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d040      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a33      	ldr	r2, [pc, #204]	@ (8003a34 <HAL_DMA_Init+0x1c4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d03b      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a31      	ldr	r2, [pc, #196]	@ (8003a38 <HAL_DMA_Init+0x1c8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d036      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a30      	ldr	r2, [pc, #192]	@ (8003a3c <HAL_DMA_Init+0x1cc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d031      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2e      	ldr	r2, [pc, #184]	@ (8003a40 <HAL_DMA_Init+0x1d0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02c      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2d      	ldr	r2, [pc, #180]	@ (8003a44 <HAL_DMA_Init+0x1d4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d027      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2b      	ldr	r2, [pc, #172]	@ (8003a48 <HAL_DMA_Init+0x1d8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d022      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a4c <HAL_DMA_Init+0x1dc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d01d      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a28      	ldr	r2, [pc, #160]	@ (8003a50 <HAL_DMA_Init+0x1e0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d018      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a27      	ldr	r2, [pc, #156]	@ (8003a54 <HAL_DMA_Init+0x1e4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a25      	ldr	r2, [pc, #148]	@ (8003a58 <HAL_DMA_Init+0x1e8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a24      	ldr	r2, [pc, #144]	@ (8003a5c <HAL_DMA_Init+0x1ec>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a22      	ldr	r2, [pc, #136]	@ (8003a60 <HAL_DMA_Init+0x1f0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_DMA_Init+0x174>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a21      	ldr	r2, [pc, #132]	@ (8003a64 <HAL_DMA_Init+0x1f4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d108      	bne.n	80039f6 <HAL_DMA_Init+0x186>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e007      	b.n	8003a06 <HAL_DMA_Init+0x196>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a06:	e02f      	b.n	8003a68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a08:	f7fd fd52 	bl	80014b0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d928      	bls.n	8003a68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2203      	movs	r2, #3
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e242      	b.n	8003eae <HAL_DMA_Init+0x63e>
 8003a28:	40020010 	.word	0x40020010
 8003a2c:	40020028 	.word	0x40020028
 8003a30:	40020040 	.word	0x40020040
 8003a34:	40020058 	.word	0x40020058
 8003a38:	40020070 	.word	0x40020070
 8003a3c:	40020088 	.word	0x40020088
 8003a40:	400200a0 	.word	0x400200a0
 8003a44:	400200b8 	.word	0x400200b8
 8003a48:	40020410 	.word	0x40020410
 8003a4c:	40020428 	.word	0x40020428
 8003a50:	40020440 	.word	0x40020440
 8003a54:	40020458 	.word	0x40020458
 8003a58:	40020470 	.word	0x40020470
 8003a5c:	40020488 	.word	0x40020488
 8003a60:	400204a0 	.word	0x400204a0
 8003a64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1c8      	bne.n	8003a08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4b83      	ldr	r3, [pc, #524]	@ (8003c90 <HAL_DMA_Init+0x420>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d107      	bne.n	8003acc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b28      	cmp	r3, #40	@ 0x28
 8003ad2:	d903      	bls.n	8003adc <HAL_DMA_Init+0x26c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ada:	d91f      	bls.n	8003b1c <HAL_DMA_Init+0x2ac>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ae2:	d903      	bls.n	8003aec <HAL_DMA_Init+0x27c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b42      	cmp	r3, #66	@ 0x42
 8003aea:	d917      	bls.n	8003b1c <HAL_DMA_Init+0x2ac>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b46      	cmp	r3, #70	@ 0x46
 8003af2:	d903      	bls.n	8003afc <HAL_DMA_Init+0x28c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b48      	cmp	r3, #72	@ 0x48
 8003afa:	d90f      	bls.n	8003b1c <HAL_DMA_Init+0x2ac>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b4e      	cmp	r3, #78	@ 0x4e
 8003b02:	d903      	bls.n	8003b0c <HAL_DMA_Init+0x29c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b52      	cmp	r3, #82	@ 0x52
 8003b0a:	d907      	bls.n	8003b1c <HAL_DMA_Init+0x2ac>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b73      	cmp	r3, #115	@ 0x73
 8003b12:	d905      	bls.n	8003b20 <HAL_DMA_Init+0x2b0>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b77      	cmp	r3, #119	@ 0x77
 8003b1a:	d801      	bhi.n	8003b20 <HAL_DMA_Init+0x2b0>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_DMA_Init+0x2b2>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b2c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f023 0307 	bic.w	r3, r3, #7
 8003b44:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d117      	bne.n	8003b88 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00e      	beq.n	8003b88 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f002 f8f6 	bl	8005d5c <DMA_CheckFifoParam>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2240      	movs	r2, #64	@ 0x40
 8003b7a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e192      	b.n	8003eae <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f002 f831 	bl	8005bf8 <DMA_CalcBaseAndBitshift>
 8003b96:	4603      	mov	r3, r0
 8003b98:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	223f      	movs	r2, #63	@ 0x3f
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	609a      	str	r2, [r3, #8]
 8003baa:	e0c8      	b.n	8003d3e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a38      	ldr	r2, [pc, #224]	@ (8003c94 <HAL_DMA_Init+0x424>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d022      	beq.n	8003bfc <HAL_DMA_Init+0x38c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a37      	ldr	r2, [pc, #220]	@ (8003c98 <HAL_DMA_Init+0x428>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d01d      	beq.n	8003bfc <HAL_DMA_Init+0x38c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a35      	ldr	r2, [pc, #212]	@ (8003c9c <HAL_DMA_Init+0x42c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d018      	beq.n	8003bfc <HAL_DMA_Init+0x38c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a34      	ldr	r2, [pc, #208]	@ (8003ca0 <HAL_DMA_Init+0x430>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <HAL_DMA_Init+0x38c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a32      	ldr	r2, [pc, #200]	@ (8003ca4 <HAL_DMA_Init+0x434>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <HAL_DMA_Init+0x38c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a31      	ldr	r2, [pc, #196]	@ (8003ca8 <HAL_DMA_Init+0x438>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_DMA_Init+0x38c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2f      	ldr	r2, [pc, #188]	@ (8003cac <HAL_DMA_Init+0x43c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_DMA_Init+0x38c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb0 <HAL_DMA_Init+0x440>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <HAL_DMA_Init+0x390>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <HAL_DMA_Init+0x392>
 8003c00:	2300      	movs	r3, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8092 	beq.w	8003d2c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a21      	ldr	r2, [pc, #132]	@ (8003c94 <HAL_DMA_Init+0x424>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d021      	beq.n	8003c56 <HAL_DMA_Init+0x3e6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a20      	ldr	r2, [pc, #128]	@ (8003c98 <HAL_DMA_Init+0x428>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01c      	beq.n	8003c56 <HAL_DMA_Init+0x3e6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1e      	ldr	r2, [pc, #120]	@ (8003c9c <HAL_DMA_Init+0x42c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d017      	beq.n	8003c56 <HAL_DMA_Init+0x3e6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca0 <HAL_DMA_Init+0x430>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d012      	beq.n	8003c56 <HAL_DMA_Init+0x3e6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca4 <HAL_DMA_Init+0x434>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00d      	beq.n	8003c56 <HAL_DMA_Init+0x3e6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca8 <HAL_DMA_Init+0x438>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d008      	beq.n	8003c56 <HAL_DMA_Init+0x3e6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a18      	ldr	r2, [pc, #96]	@ (8003cac <HAL_DMA_Init+0x43c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <HAL_DMA_Init+0x3e6>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a17      	ldr	r2, [pc, #92]	@ (8003cb0 <HAL_DMA_Init+0x440>)
 8003c54:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_DMA_Init+0x444>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b40      	cmp	r3, #64	@ 0x40
 8003c7c:	d01c      	beq.n	8003cb8 <HAL_DMA_Init+0x448>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b80      	cmp	r3, #128	@ 0x80
 8003c84:	d102      	bne.n	8003c8c <HAL_DMA_Init+0x41c>
 8003c86:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c8a:	e016      	b.n	8003cba <HAL_DMA_Init+0x44a>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e014      	b.n	8003cba <HAL_DMA_Init+0x44a>
 8003c90:	fe10803f 	.word	0xfe10803f
 8003c94:	58025408 	.word	0x58025408
 8003c98:	5802541c 	.word	0x5802541c
 8003c9c:	58025430 	.word	0x58025430
 8003ca0:	58025444 	.word	0x58025444
 8003ca4:	58025458 	.word	0x58025458
 8003ca8:	5802546c 	.word	0x5802546c
 8003cac:	58025480 	.word	0x58025480
 8003cb0:	58025494 	.word	0x58025494
 8003cb4:	fffe000f 	.word	0xfffe000f
 8003cb8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68d2      	ldr	r2, [r2, #12]
 8003cbe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ce8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b6e      	ldr	r3, [pc, #440]	@ (8003eb8 <HAL_DMA_Init+0x648>)
 8003d00:	4413      	add	r3, r2
 8003d02:	4a6e      	ldr	r2, [pc, #440]	@ (8003ebc <HAL_DMA_Init+0x64c>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	009a      	lsls	r2, r3, #2
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f001 ff71 	bl	8005bf8 <DMA_CalcBaseAndBitshift>
 8003d16:	4603      	mov	r3, r0
 8003d18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	2201      	movs	r2, #1
 8003d24:	409a      	lsls	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	e008      	b.n	8003d3e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2240      	movs	r2, #64	@ 0x40
 8003d30:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2203      	movs	r2, #3
 8003d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0b7      	b.n	8003eae <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5f      	ldr	r2, [pc, #380]	@ (8003ec0 <HAL_DMA_Init+0x650>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d072      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ec4 <HAL_DMA_Init+0x654>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d06d      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5c      	ldr	r2, [pc, #368]	@ (8003ec8 <HAL_DMA_Init+0x658>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d068      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a5a      	ldr	r2, [pc, #360]	@ (8003ecc <HAL_DMA_Init+0x65c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d063      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a59      	ldr	r2, [pc, #356]	@ (8003ed0 <HAL_DMA_Init+0x660>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d05e      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a57      	ldr	r2, [pc, #348]	@ (8003ed4 <HAL_DMA_Init+0x664>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d059      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a56      	ldr	r2, [pc, #344]	@ (8003ed8 <HAL_DMA_Init+0x668>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d054      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a54      	ldr	r2, [pc, #336]	@ (8003edc <HAL_DMA_Init+0x66c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d04f      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a53      	ldr	r2, [pc, #332]	@ (8003ee0 <HAL_DMA_Init+0x670>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d04a      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a51      	ldr	r2, [pc, #324]	@ (8003ee4 <HAL_DMA_Init+0x674>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d045      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a50      	ldr	r2, [pc, #320]	@ (8003ee8 <HAL_DMA_Init+0x678>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d040      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a4e      	ldr	r2, [pc, #312]	@ (8003eec <HAL_DMA_Init+0x67c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d03b      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a4d      	ldr	r2, [pc, #308]	@ (8003ef0 <HAL_DMA_Init+0x680>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d036      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef4 <HAL_DMA_Init+0x684>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d031      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a4a      	ldr	r2, [pc, #296]	@ (8003ef8 <HAL_DMA_Init+0x688>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d02c      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a48      	ldr	r2, [pc, #288]	@ (8003efc <HAL_DMA_Init+0x68c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d027      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a47      	ldr	r2, [pc, #284]	@ (8003f00 <HAL_DMA_Init+0x690>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a45      	ldr	r2, [pc, #276]	@ (8003f04 <HAL_DMA_Init+0x694>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01d      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a44      	ldr	r2, [pc, #272]	@ (8003f08 <HAL_DMA_Init+0x698>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a42      	ldr	r2, [pc, #264]	@ (8003f0c <HAL_DMA_Init+0x69c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a41      	ldr	r2, [pc, #260]	@ (8003f10 <HAL_DMA_Init+0x6a0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a3f      	ldr	r2, [pc, #252]	@ (8003f14 <HAL_DMA_Init+0x6a4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f18 <HAL_DMA_Init+0x6a8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_DMA_Init+0x5be>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a3c      	ldr	r2, [pc, #240]	@ (8003f1c <HAL_DMA_Init+0x6ac>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_DMA_Init+0x5c2>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_DMA_Init+0x5c4>
 8003e32:	2300      	movs	r3, #0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d032      	beq.n	8003e9e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f002 f80b 	bl	8005e54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b80      	cmp	r3, #128	@ 0x80
 8003e44:	d102      	bne.n	8003e4c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e60:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d010      	beq.n	8003e8c <HAL_DMA_Init+0x61c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d80c      	bhi.n	8003e8c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f002 f888 	bl	8005f88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	e008      	b.n	8003e9e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	a7fdabf8 	.word	0xa7fdabf8
 8003ebc:	cccccccd 	.word	0xcccccccd
 8003ec0:	40020010 	.word	0x40020010
 8003ec4:	40020028 	.word	0x40020028
 8003ec8:	40020040 	.word	0x40020040
 8003ecc:	40020058 	.word	0x40020058
 8003ed0:	40020070 	.word	0x40020070
 8003ed4:	40020088 	.word	0x40020088
 8003ed8:	400200a0 	.word	0x400200a0
 8003edc:	400200b8 	.word	0x400200b8
 8003ee0:	40020410 	.word	0x40020410
 8003ee4:	40020428 	.word	0x40020428
 8003ee8:	40020440 	.word	0x40020440
 8003eec:	40020458 	.word	0x40020458
 8003ef0:	40020470 	.word	0x40020470
 8003ef4:	40020488 	.word	0x40020488
 8003ef8:	400204a0 	.word	0x400204a0
 8003efc:	400204b8 	.word	0x400204b8
 8003f00:	58025408 	.word	0x58025408
 8003f04:	5802541c 	.word	0x5802541c
 8003f08:	58025430 	.word	0x58025430
 8003f0c:	58025444 	.word	0x58025444
 8003f10:	58025458 	.word	0x58025458
 8003f14:	5802546c 	.word	0x5802546c
 8003f18:	58025480 	.word	0x58025480
 8003f1c:	58025494 	.word	0x58025494

08003f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e226      	b.n	800438a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_DMA_Start_IT+0x2a>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e21f      	b.n	800438a <HAL_DMA_Start_IT+0x46a>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	f040 820a 	bne.w	8004374 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a68      	ldr	r2, [pc, #416]	@ (8004114 <HAL_DMA_Start_IT+0x1f4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a66      	ldr	r2, [pc, #408]	@ (8004118 <HAL_DMA_Start_IT+0x1f8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a65      	ldr	r2, [pc, #404]	@ (800411c <HAL_DMA_Start_IT+0x1fc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a63      	ldr	r2, [pc, #396]	@ (8004120 <HAL_DMA_Start_IT+0x200>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a62      	ldr	r2, [pc, #392]	@ (8004124 <HAL_DMA_Start_IT+0x204>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a60      	ldr	r2, [pc, #384]	@ (8004128 <HAL_DMA_Start_IT+0x208>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a5f      	ldr	r2, [pc, #380]	@ (800412c <HAL_DMA_Start_IT+0x20c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8004130 <HAL_DMA_Start_IT+0x210>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5c      	ldr	r2, [pc, #368]	@ (8004134 <HAL_DMA_Start_IT+0x214>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a5a      	ldr	r2, [pc, #360]	@ (8004138 <HAL_DMA_Start_IT+0x218>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a59      	ldr	r2, [pc, #356]	@ (800413c <HAL_DMA_Start_IT+0x21c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a57      	ldr	r2, [pc, #348]	@ (8004140 <HAL_DMA_Start_IT+0x220>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a56      	ldr	r2, [pc, #344]	@ (8004144 <HAL_DMA_Start_IT+0x224>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a54      	ldr	r2, [pc, #336]	@ (8004148 <HAL_DMA_Start_IT+0x228>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a53      	ldr	r2, [pc, #332]	@ (800414c <HAL_DMA_Start_IT+0x22c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a51      	ldr	r2, [pc, #324]	@ (8004150 <HAL_DMA_Start_IT+0x230>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d108      	bne.n	8004020 <HAL_DMA_Start_IT+0x100>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e007      	b.n	8004030 <HAL_DMA_Start_IT+0x110>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f001 fc32 	bl	80058a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a34      	ldr	r2, [pc, #208]	@ (8004114 <HAL_DMA_Start_IT+0x1f4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d04a      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a33      	ldr	r2, [pc, #204]	@ (8004118 <HAL_DMA_Start_IT+0x1f8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d045      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a31      	ldr	r2, [pc, #196]	@ (800411c <HAL_DMA_Start_IT+0x1fc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d040      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a30      	ldr	r2, [pc, #192]	@ (8004120 <HAL_DMA_Start_IT+0x200>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d03b      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2e      	ldr	r2, [pc, #184]	@ (8004124 <HAL_DMA_Start_IT+0x204>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d036      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2d      	ldr	r2, [pc, #180]	@ (8004128 <HAL_DMA_Start_IT+0x208>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d031      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2b      	ldr	r2, [pc, #172]	@ (800412c <HAL_DMA_Start_IT+0x20c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02c      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2a      	ldr	r2, [pc, #168]	@ (8004130 <HAL_DMA_Start_IT+0x210>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d027      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a28      	ldr	r2, [pc, #160]	@ (8004134 <HAL_DMA_Start_IT+0x214>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a27      	ldr	r2, [pc, #156]	@ (8004138 <HAL_DMA_Start_IT+0x218>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d01d      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a25      	ldr	r2, [pc, #148]	@ (800413c <HAL_DMA_Start_IT+0x21c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a24      	ldr	r2, [pc, #144]	@ (8004140 <HAL_DMA_Start_IT+0x220>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a22      	ldr	r2, [pc, #136]	@ (8004144 <HAL_DMA_Start_IT+0x224>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a21      	ldr	r2, [pc, #132]	@ (8004148 <HAL_DMA_Start_IT+0x228>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1f      	ldr	r2, [pc, #124]	@ (800414c <HAL_DMA_Start_IT+0x22c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004150 <HAL_DMA_Start_IT+0x230>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d101      	bne.n	80040e0 <HAL_DMA_Start_IT+0x1c0>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <HAL_DMA_Start_IT+0x1c2>
 80040e0:	2300      	movs	r3, #0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d036      	beq.n	8004154 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 021e 	bic.w	r2, r3, #30
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0216 	orr.w	r2, r2, #22
 80040f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d03e      	beq.n	8004180 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0208 	orr.w	r2, r2, #8
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e035      	b.n	8004180 <HAL_DMA_Start_IT+0x260>
 8004114:	40020010 	.word	0x40020010
 8004118:	40020028 	.word	0x40020028
 800411c:	40020040 	.word	0x40020040
 8004120:	40020058 	.word	0x40020058
 8004124:	40020070 	.word	0x40020070
 8004128:	40020088 	.word	0x40020088
 800412c:	400200a0 	.word	0x400200a0
 8004130:	400200b8 	.word	0x400200b8
 8004134:	40020410 	.word	0x40020410
 8004138:	40020428 	.word	0x40020428
 800413c:	40020440 	.word	0x40020440
 8004140:	40020458 	.word	0x40020458
 8004144:	40020470 	.word	0x40020470
 8004148:	40020488 	.word	0x40020488
 800414c:	400204a0 	.word	0x400204a0
 8004150:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 020e 	bic.w	r2, r3, #14
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 020a 	orr.w	r2, r2, #10
 8004166:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0204 	orr.w	r2, r2, #4
 800417e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a83      	ldr	r2, [pc, #524]	@ (8004394 <HAL_DMA_Start_IT+0x474>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d072      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a82      	ldr	r2, [pc, #520]	@ (8004398 <HAL_DMA_Start_IT+0x478>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d06d      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a80      	ldr	r2, [pc, #512]	@ (800439c <HAL_DMA_Start_IT+0x47c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d068      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a7f      	ldr	r2, [pc, #508]	@ (80043a0 <HAL_DMA_Start_IT+0x480>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d063      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7d      	ldr	r2, [pc, #500]	@ (80043a4 <HAL_DMA_Start_IT+0x484>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d05e      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a7c      	ldr	r2, [pc, #496]	@ (80043a8 <HAL_DMA_Start_IT+0x488>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d059      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a7a      	ldr	r2, [pc, #488]	@ (80043ac <HAL_DMA_Start_IT+0x48c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d054      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a79      	ldr	r2, [pc, #484]	@ (80043b0 <HAL_DMA_Start_IT+0x490>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04f      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a77      	ldr	r2, [pc, #476]	@ (80043b4 <HAL_DMA_Start_IT+0x494>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d04a      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a76      	ldr	r2, [pc, #472]	@ (80043b8 <HAL_DMA_Start_IT+0x498>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d045      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a74      	ldr	r2, [pc, #464]	@ (80043bc <HAL_DMA_Start_IT+0x49c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d040      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a73      	ldr	r2, [pc, #460]	@ (80043c0 <HAL_DMA_Start_IT+0x4a0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d03b      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a71      	ldr	r2, [pc, #452]	@ (80043c4 <HAL_DMA_Start_IT+0x4a4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d036      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a70      	ldr	r2, [pc, #448]	@ (80043c8 <HAL_DMA_Start_IT+0x4a8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d031      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a6e      	ldr	r2, [pc, #440]	@ (80043cc <HAL_DMA_Start_IT+0x4ac>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02c      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a6d      	ldr	r2, [pc, #436]	@ (80043d0 <HAL_DMA_Start_IT+0x4b0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d027      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a6b      	ldr	r2, [pc, #428]	@ (80043d4 <HAL_DMA_Start_IT+0x4b4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d022      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a6a      	ldr	r2, [pc, #424]	@ (80043d8 <HAL_DMA_Start_IT+0x4b8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d01d      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a68      	ldr	r2, [pc, #416]	@ (80043dc <HAL_DMA_Start_IT+0x4bc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d018      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a67      	ldr	r2, [pc, #412]	@ (80043e0 <HAL_DMA_Start_IT+0x4c0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a65      	ldr	r2, [pc, #404]	@ (80043e4 <HAL_DMA_Start_IT+0x4c4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a64      	ldr	r2, [pc, #400]	@ (80043e8 <HAL_DMA_Start_IT+0x4c8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a62      	ldr	r2, [pc, #392]	@ (80043ec <HAL_DMA_Start_IT+0x4cc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a61      	ldr	r2, [pc, #388]	@ (80043f0 <HAL_DMA_Start_IT+0x4d0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <HAL_DMA_Start_IT+0x354>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <HAL_DMA_Start_IT+0x356>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01a      	beq.n	80042b0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004296:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a37      	ldr	r2, [pc, #220]	@ (8004394 <HAL_DMA_Start_IT+0x474>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d04a      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a36      	ldr	r2, [pc, #216]	@ (8004398 <HAL_DMA_Start_IT+0x478>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d045      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a34      	ldr	r2, [pc, #208]	@ (800439c <HAL_DMA_Start_IT+0x47c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d040      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a33      	ldr	r2, [pc, #204]	@ (80043a0 <HAL_DMA_Start_IT+0x480>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d03b      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a31      	ldr	r2, [pc, #196]	@ (80043a4 <HAL_DMA_Start_IT+0x484>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d036      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a30      	ldr	r2, [pc, #192]	@ (80043a8 <HAL_DMA_Start_IT+0x488>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d031      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a2e      	ldr	r2, [pc, #184]	@ (80043ac <HAL_DMA_Start_IT+0x48c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02c      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2d      	ldr	r2, [pc, #180]	@ (80043b0 <HAL_DMA_Start_IT+0x490>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d027      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <HAL_DMA_Start_IT+0x494>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d022      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2a      	ldr	r2, [pc, #168]	@ (80043b8 <HAL_DMA_Start_IT+0x498>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d01d      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a28      	ldr	r2, [pc, #160]	@ (80043bc <HAL_DMA_Start_IT+0x49c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a27      	ldr	r2, [pc, #156]	@ (80043c0 <HAL_DMA_Start_IT+0x4a0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a25      	ldr	r2, [pc, #148]	@ (80043c4 <HAL_DMA_Start_IT+0x4a4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a24      	ldr	r2, [pc, #144]	@ (80043c8 <HAL_DMA_Start_IT+0x4a8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a22      	ldr	r2, [pc, #136]	@ (80043cc <HAL_DMA_Start_IT+0x4ac>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a21      	ldr	r2, [pc, #132]	@ (80043d0 <HAL_DMA_Start_IT+0x4b0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d108      	bne.n	8004362 <HAL_DMA_Start_IT+0x442>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e012      	b.n	8004388 <HAL_DMA_Start_IT+0x468>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e009      	b.n	8004388 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800437a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004388:	7dfb      	ldrb	r3, [r7, #23]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40020010 	.word	0x40020010
 8004398:	40020028 	.word	0x40020028
 800439c:	40020040 	.word	0x40020040
 80043a0:	40020058 	.word	0x40020058
 80043a4:	40020070 	.word	0x40020070
 80043a8:	40020088 	.word	0x40020088
 80043ac:	400200a0 	.word	0x400200a0
 80043b0:	400200b8 	.word	0x400200b8
 80043b4:	40020410 	.word	0x40020410
 80043b8:	40020428 	.word	0x40020428
 80043bc:	40020440 	.word	0x40020440
 80043c0:	40020458 	.word	0x40020458
 80043c4:	40020470 	.word	0x40020470
 80043c8:	40020488 	.word	0x40020488
 80043cc:	400204a0 	.word	0x400204a0
 80043d0:	400204b8 	.word	0x400204b8
 80043d4:	58025408 	.word	0x58025408
 80043d8:	5802541c 	.word	0x5802541c
 80043dc:	58025430 	.word	0x58025430
 80043e0:	58025444 	.word	0x58025444
 80043e4:	58025458 	.word	0x58025458
 80043e8:	5802546c 	.word	0x5802546c
 80043ec:	58025480 	.word	0x58025480
 80043f0:	58025494 	.word	0x58025494

080043f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80043fc:	f7fd f858 	bl	80014b0 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e2dc      	b.n	80049c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d008      	beq.n	800442a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2280      	movs	r2, #128	@ 0x80
 800441c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e2cd      	b.n	80049c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a76      	ldr	r2, [pc, #472]	@ (8004608 <HAL_DMA_Abort+0x214>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d04a      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a74      	ldr	r2, [pc, #464]	@ (800460c <HAL_DMA_Abort+0x218>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d045      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a73      	ldr	r2, [pc, #460]	@ (8004610 <HAL_DMA_Abort+0x21c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d040      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a71      	ldr	r2, [pc, #452]	@ (8004614 <HAL_DMA_Abort+0x220>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d03b      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a70      	ldr	r2, [pc, #448]	@ (8004618 <HAL_DMA_Abort+0x224>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d036      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6e      	ldr	r2, [pc, #440]	@ (800461c <HAL_DMA_Abort+0x228>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d031      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6d      	ldr	r2, [pc, #436]	@ (8004620 <HAL_DMA_Abort+0x22c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d02c      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a6b      	ldr	r2, [pc, #428]	@ (8004624 <HAL_DMA_Abort+0x230>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d027      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a6a      	ldr	r2, [pc, #424]	@ (8004628 <HAL_DMA_Abort+0x234>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d022      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a68      	ldr	r2, [pc, #416]	@ (800462c <HAL_DMA_Abort+0x238>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01d      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a67      	ldr	r2, [pc, #412]	@ (8004630 <HAL_DMA_Abort+0x23c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d018      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a65      	ldr	r2, [pc, #404]	@ (8004634 <HAL_DMA_Abort+0x240>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a64      	ldr	r2, [pc, #400]	@ (8004638 <HAL_DMA_Abort+0x244>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00e      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a62      	ldr	r2, [pc, #392]	@ (800463c <HAL_DMA_Abort+0x248>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a61      	ldr	r2, [pc, #388]	@ (8004640 <HAL_DMA_Abort+0x24c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_DMA_Abort+0xd6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a5f      	ldr	r2, [pc, #380]	@ (8004644 <HAL_DMA_Abort+0x250>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <HAL_DMA_Abort+0xda>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <HAL_DMA_Abort+0xdc>
 80044ce:	2300      	movs	r3, #0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 021e 	bic.w	r2, r2, #30
 80044e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e00a      	b.n	8004512 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 020e 	bic.w	r2, r2, #14
 800450a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a3c      	ldr	r2, [pc, #240]	@ (8004608 <HAL_DMA_Abort+0x214>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d072      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a3a      	ldr	r2, [pc, #232]	@ (800460c <HAL_DMA_Abort+0x218>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d06d      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a39      	ldr	r2, [pc, #228]	@ (8004610 <HAL_DMA_Abort+0x21c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d068      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a37      	ldr	r2, [pc, #220]	@ (8004614 <HAL_DMA_Abort+0x220>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d063      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a36      	ldr	r2, [pc, #216]	@ (8004618 <HAL_DMA_Abort+0x224>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d05e      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a34      	ldr	r2, [pc, #208]	@ (800461c <HAL_DMA_Abort+0x228>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d059      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a33      	ldr	r2, [pc, #204]	@ (8004620 <HAL_DMA_Abort+0x22c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d054      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a31      	ldr	r2, [pc, #196]	@ (8004624 <HAL_DMA_Abort+0x230>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d04f      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a30      	ldr	r2, [pc, #192]	@ (8004628 <HAL_DMA_Abort+0x234>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d04a      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2e      	ldr	r2, [pc, #184]	@ (800462c <HAL_DMA_Abort+0x238>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d045      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2d      	ldr	r2, [pc, #180]	@ (8004630 <HAL_DMA_Abort+0x23c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d040      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2b      	ldr	r2, [pc, #172]	@ (8004634 <HAL_DMA_Abort+0x240>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d03b      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2a      	ldr	r2, [pc, #168]	@ (8004638 <HAL_DMA_Abort+0x244>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d036      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a28      	ldr	r2, [pc, #160]	@ (800463c <HAL_DMA_Abort+0x248>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d031      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a27      	ldr	r2, [pc, #156]	@ (8004640 <HAL_DMA_Abort+0x24c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d02c      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a25      	ldr	r2, [pc, #148]	@ (8004644 <HAL_DMA_Abort+0x250>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d027      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a24      	ldr	r2, [pc, #144]	@ (8004648 <HAL_DMA_Abort+0x254>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a22      	ldr	r2, [pc, #136]	@ (800464c <HAL_DMA_Abort+0x258>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01d      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a21      	ldr	r2, [pc, #132]	@ (8004650 <HAL_DMA_Abort+0x25c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004654 <HAL_DMA_Abort+0x260>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1e      	ldr	r2, [pc, #120]	@ (8004658 <HAL_DMA_Abort+0x264>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1c      	ldr	r2, [pc, #112]	@ (800465c <HAL_DMA_Abort+0x268>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004660 <HAL_DMA_Abort+0x26c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_DMA_Abort+0x20e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a19      	ldr	r2, [pc, #100]	@ (8004664 <HAL_DMA_Abort+0x270>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d132      	bne.n	8004668 <HAL_DMA_Abort+0x274>
 8004602:	2301      	movs	r3, #1
 8004604:	e031      	b.n	800466a <HAL_DMA_Abort+0x276>
 8004606:	bf00      	nop
 8004608:	40020010 	.word	0x40020010
 800460c:	40020028 	.word	0x40020028
 8004610:	40020040 	.word	0x40020040
 8004614:	40020058 	.word	0x40020058
 8004618:	40020070 	.word	0x40020070
 800461c:	40020088 	.word	0x40020088
 8004620:	400200a0 	.word	0x400200a0
 8004624:	400200b8 	.word	0x400200b8
 8004628:	40020410 	.word	0x40020410
 800462c:	40020428 	.word	0x40020428
 8004630:	40020440 	.word	0x40020440
 8004634:	40020458 	.word	0x40020458
 8004638:	40020470 	.word	0x40020470
 800463c:	40020488 	.word	0x40020488
 8004640:	400204a0 	.word	0x400204a0
 8004644:	400204b8 	.word	0x400204b8
 8004648:	58025408 	.word	0x58025408
 800464c:	5802541c 	.word	0x5802541c
 8004650:	58025430 	.word	0x58025430
 8004654:	58025444 	.word	0x58025444
 8004658:	58025458 	.word	0x58025458
 800465c:	5802546c 	.word	0x5802546c
 8004660:	58025480 	.word	0x58025480
 8004664:	58025494 	.word	0x58025494
 8004668:	2300      	movs	r3, #0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d007      	beq.n	800467e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004678:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800467c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a6d      	ldr	r2, [pc, #436]	@ (8004838 <HAL_DMA_Abort+0x444>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d04a      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6b      	ldr	r2, [pc, #428]	@ (800483c <HAL_DMA_Abort+0x448>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d045      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a6a      	ldr	r2, [pc, #424]	@ (8004840 <HAL_DMA_Abort+0x44c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d040      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a68      	ldr	r2, [pc, #416]	@ (8004844 <HAL_DMA_Abort+0x450>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d03b      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a67      	ldr	r2, [pc, #412]	@ (8004848 <HAL_DMA_Abort+0x454>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d036      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a65      	ldr	r2, [pc, #404]	@ (800484c <HAL_DMA_Abort+0x458>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d031      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a64      	ldr	r2, [pc, #400]	@ (8004850 <HAL_DMA_Abort+0x45c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d02c      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a62      	ldr	r2, [pc, #392]	@ (8004854 <HAL_DMA_Abort+0x460>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d027      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a61      	ldr	r2, [pc, #388]	@ (8004858 <HAL_DMA_Abort+0x464>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d022      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a5f      	ldr	r2, [pc, #380]	@ (800485c <HAL_DMA_Abort+0x468>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01d      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004860 <HAL_DMA_Abort+0x46c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d018      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a5c      	ldr	r2, [pc, #368]	@ (8004864 <HAL_DMA_Abort+0x470>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004868 <HAL_DMA_Abort+0x474>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a59      	ldr	r2, [pc, #356]	@ (800486c <HAL_DMA_Abort+0x478>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a58      	ldr	r2, [pc, #352]	@ (8004870 <HAL_DMA_Abort+0x47c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_DMA_Abort+0x32a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a56      	ldr	r2, [pc, #344]	@ (8004874 <HAL_DMA_Abort+0x480>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d108      	bne.n	8004730 <HAL_DMA_Abort+0x33c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e007      	b.n	8004740 <HAL_DMA_Abort+0x34c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004740:	e013      	b.n	800476a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004742:	f7fc feb5 	bl	80014b0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b05      	cmp	r3, #5
 800474e:	d90c      	bls.n	800476a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2203      	movs	r2, #3
 800475a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e12d      	b.n	80049c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e5      	bne.n	8004742 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2f      	ldr	r2, [pc, #188]	@ (8004838 <HAL_DMA_Abort+0x444>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d04a      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a2d      	ldr	r2, [pc, #180]	@ (800483c <HAL_DMA_Abort+0x448>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d045      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a2c      	ldr	r2, [pc, #176]	@ (8004840 <HAL_DMA_Abort+0x44c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d040      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a2a      	ldr	r2, [pc, #168]	@ (8004844 <HAL_DMA_Abort+0x450>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d03b      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a29      	ldr	r2, [pc, #164]	@ (8004848 <HAL_DMA_Abort+0x454>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d036      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a27      	ldr	r2, [pc, #156]	@ (800484c <HAL_DMA_Abort+0x458>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d031      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a26      	ldr	r2, [pc, #152]	@ (8004850 <HAL_DMA_Abort+0x45c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d02c      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a24      	ldr	r2, [pc, #144]	@ (8004854 <HAL_DMA_Abort+0x460>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d027      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a23      	ldr	r2, [pc, #140]	@ (8004858 <HAL_DMA_Abort+0x464>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d022      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a21      	ldr	r2, [pc, #132]	@ (800485c <HAL_DMA_Abort+0x468>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01d      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a20      	ldr	r2, [pc, #128]	@ (8004860 <HAL_DMA_Abort+0x46c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d018      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004864 <HAL_DMA_Abort+0x470>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004868 <HAL_DMA_Abort+0x474>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00e      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1b      	ldr	r2, [pc, #108]	@ (800486c <HAL_DMA_Abort+0x478>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d009      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1a      	ldr	r2, [pc, #104]	@ (8004870 <HAL_DMA_Abort+0x47c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_DMA_Abort+0x422>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a18      	ldr	r2, [pc, #96]	@ (8004874 <HAL_DMA_Abort+0x480>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d101      	bne.n	800481a <HAL_DMA_Abort+0x426>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_DMA_Abort+0x428>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d02b      	beq.n	8004878 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004824:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	223f      	movs	r2, #63	@ 0x3f
 8004830:	409a      	lsls	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	609a      	str	r2, [r3, #8]
 8004836:	e02a      	b.n	800488e <HAL_DMA_Abort+0x49a>
 8004838:	40020010 	.word	0x40020010
 800483c:	40020028 	.word	0x40020028
 8004840:	40020040 	.word	0x40020040
 8004844:	40020058 	.word	0x40020058
 8004848:	40020070 	.word	0x40020070
 800484c:	40020088 	.word	0x40020088
 8004850:	400200a0 	.word	0x400200a0
 8004854:	400200b8 	.word	0x400200b8
 8004858:	40020410 	.word	0x40020410
 800485c:	40020428 	.word	0x40020428
 8004860:	40020440 	.word	0x40020440
 8004864:	40020458 	.word	0x40020458
 8004868:	40020470 	.word	0x40020470
 800486c:	40020488 	.word	0x40020488
 8004870:	400204a0 	.word	0x400204a0
 8004874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2201      	movs	r2, #1
 8004888:	409a      	lsls	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a4f      	ldr	r2, [pc, #316]	@ (80049d0 <HAL_DMA_Abort+0x5dc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d072      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a4d      	ldr	r2, [pc, #308]	@ (80049d4 <HAL_DMA_Abort+0x5e0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d06d      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a4c      	ldr	r2, [pc, #304]	@ (80049d8 <HAL_DMA_Abort+0x5e4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d068      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a4a      	ldr	r2, [pc, #296]	@ (80049dc <HAL_DMA_Abort+0x5e8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d063      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a49      	ldr	r2, [pc, #292]	@ (80049e0 <HAL_DMA_Abort+0x5ec>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d05e      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a47      	ldr	r2, [pc, #284]	@ (80049e4 <HAL_DMA_Abort+0x5f0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d059      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a46      	ldr	r2, [pc, #280]	@ (80049e8 <HAL_DMA_Abort+0x5f4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d054      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a44      	ldr	r2, [pc, #272]	@ (80049ec <HAL_DMA_Abort+0x5f8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d04f      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a43      	ldr	r2, [pc, #268]	@ (80049f0 <HAL_DMA_Abort+0x5fc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d04a      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a41      	ldr	r2, [pc, #260]	@ (80049f4 <HAL_DMA_Abort+0x600>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d045      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a40      	ldr	r2, [pc, #256]	@ (80049f8 <HAL_DMA_Abort+0x604>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d040      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3e      	ldr	r2, [pc, #248]	@ (80049fc <HAL_DMA_Abort+0x608>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d03b      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a3d      	ldr	r2, [pc, #244]	@ (8004a00 <HAL_DMA_Abort+0x60c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d036      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a3b      	ldr	r2, [pc, #236]	@ (8004a04 <HAL_DMA_Abort+0x610>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d031      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a3a      	ldr	r2, [pc, #232]	@ (8004a08 <HAL_DMA_Abort+0x614>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d02c      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a38      	ldr	r2, [pc, #224]	@ (8004a0c <HAL_DMA_Abort+0x618>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d027      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a37      	ldr	r2, [pc, #220]	@ (8004a10 <HAL_DMA_Abort+0x61c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a35      	ldr	r2, [pc, #212]	@ (8004a14 <HAL_DMA_Abort+0x620>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01d      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a34      	ldr	r2, [pc, #208]	@ (8004a18 <HAL_DMA_Abort+0x624>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d018      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a32      	ldr	r2, [pc, #200]	@ (8004a1c <HAL_DMA_Abort+0x628>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a31      	ldr	r2, [pc, #196]	@ (8004a20 <HAL_DMA_Abort+0x62c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2f      	ldr	r2, [pc, #188]	@ (8004a24 <HAL_DMA_Abort+0x630>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2e      	ldr	r2, [pc, #184]	@ (8004a28 <HAL_DMA_Abort+0x634>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_DMA_Abort+0x58a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2c      	ldr	r2, [pc, #176]	@ (8004a2c <HAL_DMA_Abort+0x638>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d101      	bne.n	8004982 <HAL_DMA_Abort+0x58e>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <HAL_DMA_Abort+0x590>
 8004982:	2300      	movs	r3, #0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004990:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00c      	beq.n	80049b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40020010 	.word	0x40020010
 80049d4:	40020028 	.word	0x40020028
 80049d8:	40020040 	.word	0x40020040
 80049dc:	40020058 	.word	0x40020058
 80049e0:	40020070 	.word	0x40020070
 80049e4:	40020088 	.word	0x40020088
 80049e8:	400200a0 	.word	0x400200a0
 80049ec:	400200b8 	.word	0x400200b8
 80049f0:	40020410 	.word	0x40020410
 80049f4:	40020428 	.word	0x40020428
 80049f8:	40020440 	.word	0x40020440
 80049fc:	40020458 	.word	0x40020458
 8004a00:	40020470 	.word	0x40020470
 8004a04:	40020488 	.word	0x40020488
 8004a08:	400204a0 	.word	0x400204a0
 8004a0c:	400204b8 	.word	0x400204b8
 8004a10:	58025408 	.word	0x58025408
 8004a14:	5802541c 	.word	0x5802541c
 8004a18:	58025430 	.word	0x58025430
 8004a1c:	58025444 	.word	0x58025444
 8004a20:	58025458 	.word	0x58025458
 8004a24:	5802546c 	.word	0x5802546c
 8004a28:	58025480 	.word	0x58025480
 8004a2c:	58025494 	.word	0x58025494

08004a30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	@ 0x28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a3c:	4b67      	ldr	r3, [pc, #412]	@ (8004bdc <HAL_DMA_IRQHandler+0x1ac>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a67      	ldr	r2, [pc, #412]	@ (8004be0 <HAL_DMA_IRQHandler+0x1b0>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	0a9b      	lsrs	r3, r3, #10
 8004a48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a5f      	ldr	r2, [pc, #380]	@ (8004be4 <HAL_DMA_IRQHandler+0x1b4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d04a      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a5d      	ldr	r2, [pc, #372]	@ (8004be8 <HAL_DMA_IRQHandler+0x1b8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d045      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a5c      	ldr	r2, [pc, #368]	@ (8004bec <HAL_DMA_IRQHandler+0x1bc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d040      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a5a      	ldr	r2, [pc, #360]	@ (8004bf0 <HAL_DMA_IRQHandler+0x1c0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d03b      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a59      	ldr	r2, [pc, #356]	@ (8004bf4 <HAL_DMA_IRQHandler+0x1c4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d036      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a57      	ldr	r2, [pc, #348]	@ (8004bf8 <HAL_DMA_IRQHandler+0x1c8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d031      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a56      	ldr	r2, [pc, #344]	@ (8004bfc <HAL_DMA_IRQHandler+0x1cc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d02c      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a54      	ldr	r2, [pc, #336]	@ (8004c00 <HAL_DMA_IRQHandler+0x1d0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d027      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a53      	ldr	r2, [pc, #332]	@ (8004c04 <HAL_DMA_IRQHandler+0x1d4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d022      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a51      	ldr	r2, [pc, #324]	@ (8004c08 <HAL_DMA_IRQHandler+0x1d8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01d      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a50      	ldr	r2, [pc, #320]	@ (8004c0c <HAL_DMA_IRQHandler+0x1dc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d018      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8004c10 <HAL_DMA_IRQHandler+0x1e0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a4d      	ldr	r2, [pc, #308]	@ (8004c14 <HAL_DMA_IRQHandler+0x1e4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a4b      	ldr	r2, [pc, #300]	@ (8004c18 <HAL_DMA_IRQHandler+0x1e8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a4a      	ldr	r2, [pc, #296]	@ (8004c1c <HAL_DMA_IRQHandler+0x1ec>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xd2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a48      	ldr	r2, [pc, #288]	@ (8004c20 <HAL_DMA_IRQHandler+0x1f0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d101      	bne.n	8004b06 <HAL_DMA_IRQHandler+0xd6>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <HAL_DMA_IRQHandler+0xd8>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 842b 	beq.w	8005364 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2208      	movs	r2, #8
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80a2 	beq.w	8004c68 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a2e      	ldr	r2, [pc, #184]	@ (8004be4 <HAL_DMA_IRQHandler+0x1b4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d04a      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2d      	ldr	r2, [pc, #180]	@ (8004be8 <HAL_DMA_IRQHandler+0x1b8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d045      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004bec <HAL_DMA_IRQHandler+0x1bc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d040      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf0 <HAL_DMA_IRQHandler+0x1c0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d03b      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a28      	ldr	r2, [pc, #160]	@ (8004bf4 <HAL_DMA_IRQHandler+0x1c4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d036      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a27      	ldr	r2, [pc, #156]	@ (8004bf8 <HAL_DMA_IRQHandler+0x1c8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d031      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a25      	ldr	r2, [pc, #148]	@ (8004bfc <HAL_DMA_IRQHandler+0x1cc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d02c      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a24      	ldr	r2, [pc, #144]	@ (8004c00 <HAL_DMA_IRQHandler+0x1d0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d027      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a22      	ldr	r2, [pc, #136]	@ (8004c04 <HAL_DMA_IRQHandler+0x1d4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d022      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a21      	ldr	r2, [pc, #132]	@ (8004c08 <HAL_DMA_IRQHandler+0x1d8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d01d      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004c0c <HAL_DMA_IRQHandler+0x1dc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d018      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1e      	ldr	r2, [pc, #120]	@ (8004c10 <HAL_DMA_IRQHandler+0x1e0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d013      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c14 <HAL_DMA_IRQHandler+0x1e4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1b      	ldr	r2, [pc, #108]	@ (8004c18 <HAL_DMA_IRQHandler+0x1e8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d009      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	@ (8004c1c <HAL_DMA_IRQHandler+0x1ec>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x194>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a18      	ldr	r2, [pc, #96]	@ (8004c20 <HAL_DMA_IRQHandler+0x1f0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d12f      	bne.n	8004c24 <HAL_DMA_IRQHandler+0x1f4>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf14      	ite	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	2300      	moveq	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e02e      	b.n	8004c38 <HAL_DMA_IRQHandler+0x208>
 8004bda:	bf00      	nop
 8004bdc:	24000000 	.word	0x24000000
 8004be0:	1b4e81b5 	.word	0x1b4e81b5
 8004be4:	40020010 	.word	0x40020010
 8004be8:	40020028 	.word	0x40020028
 8004bec:	40020040 	.word	0x40020040
 8004bf0:	40020058 	.word	0x40020058
 8004bf4:	40020070 	.word	0x40020070
 8004bf8:	40020088 	.word	0x40020088
 8004bfc:	400200a0 	.word	0x400200a0
 8004c00:	400200b8 	.word	0x400200b8
 8004c04:	40020410 	.word	0x40020410
 8004c08:	40020428 	.word	0x40020428
 8004c0c:	40020440 	.word	0x40020440
 8004c10:	40020458 	.word	0x40020458
 8004c14:	40020470 	.word	0x40020470
 8004c18:	40020488 	.word	0x40020488
 8004c1c:	400204a0 	.word	0x400204a0
 8004c20:	400204b8 	.word	0x400204b8
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0204 	bic.w	r2, r2, #4
 8004c4a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	2208      	movs	r2, #8
 8004c56:	409a      	lsls	r2, r3
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c60:	f043 0201 	orr.w	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	fa22 f303 	lsr.w	r3, r2, r3
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d06e      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a69      	ldr	r2, [pc, #420]	@ (8004e28 <HAL_DMA_IRQHandler+0x3f8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d04a      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a67      	ldr	r2, [pc, #412]	@ (8004e2c <HAL_DMA_IRQHandler+0x3fc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d045      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a66      	ldr	r2, [pc, #408]	@ (8004e30 <HAL_DMA_IRQHandler+0x400>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d040      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a64      	ldr	r2, [pc, #400]	@ (8004e34 <HAL_DMA_IRQHandler+0x404>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d03b      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a63      	ldr	r2, [pc, #396]	@ (8004e38 <HAL_DMA_IRQHandler+0x408>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d036      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a61      	ldr	r2, [pc, #388]	@ (8004e3c <HAL_DMA_IRQHandler+0x40c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d031      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a60      	ldr	r2, [pc, #384]	@ (8004e40 <HAL_DMA_IRQHandler+0x410>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d02c      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8004e44 <HAL_DMA_IRQHandler+0x414>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d027      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8004e48 <HAL_DMA_IRQHandler+0x418>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a5b      	ldr	r2, [pc, #364]	@ (8004e4c <HAL_DMA_IRQHandler+0x41c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01d      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a5a      	ldr	r2, [pc, #360]	@ (8004e50 <HAL_DMA_IRQHandler+0x420>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a58      	ldr	r2, [pc, #352]	@ (8004e54 <HAL_DMA_IRQHandler+0x424>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a57      	ldr	r2, [pc, #348]	@ (8004e58 <HAL_DMA_IRQHandler+0x428>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a55      	ldr	r2, [pc, #340]	@ (8004e5c <HAL_DMA_IRQHandler+0x42c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a54      	ldr	r2, [pc, #336]	@ (8004e60 <HAL_DMA_IRQHandler+0x430>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x2ee>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a52      	ldr	r2, [pc, #328]	@ (8004e64 <HAL_DMA_IRQHandler+0x434>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d10a      	bne.n	8004d34 <HAL_DMA_IRQHandler+0x304>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e003      	b.n	8004d3c <HAL_DMA_IRQHandler+0x30c>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	2201      	movs	r2, #1
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	f043 0202 	orr.w	r2, r3, #2
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2204      	movs	r2, #4
 8004d66:	409a      	lsls	r2, r3
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 808f 	beq.w	8004e90 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2c      	ldr	r2, [pc, #176]	@ (8004e28 <HAL_DMA_IRQHandler+0x3f8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04a      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a2a      	ldr	r2, [pc, #168]	@ (8004e2c <HAL_DMA_IRQHandler+0x3fc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d045      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a29      	ldr	r2, [pc, #164]	@ (8004e30 <HAL_DMA_IRQHandler+0x400>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d040      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a27      	ldr	r2, [pc, #156]	@ (8004e34 <HAL_DMA_IRQHandler+0x404>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d03b      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a26      	ldr	r2, [pc, #152]	@ (8004e38 <HAL_DMA_IRQHandler+0x408>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d036      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a24      	ldr	r2, [pc, #144]	@ (8004e3c <HAL_DMA_IRQHandler+0x40c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d031      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a23      	ldr	r2, [pc, #140]	@ (8004e40 <HAL_DMA_IRQHandler+0x410>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d02c      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a21      	ldr	r2, [pc, #132]	@ (8004e44 <HAL_DMA_IRQHandler+0x414>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d027      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a20      	ldr	r2, [pc, #128]	@ (8004e48 <HAL_DMA_IRQHandler+0x418>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e4c <HAL_DMA_IRQHandler+0x41c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1d      	ldr	r2, [pc, #116]	@ (8004e50 <HAL_DMA_IRQHandler+0x420>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e54 <HAL_DMA_IRQHandler+0x424>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1a      	ldr	r2, [pc, #104]	@ (8004e58 <HAL_DMA_IRQHandler+0x428>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <HAL_DMA_IRQHandler+0x42c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a17      	ldr	r2, [pc, #92]	@ (8004e60 <HAL_DMA_IRQHandler+0x430>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3e2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a15      	ldr	r2, [pc, #84]	@ (8004e64 <HAL_DMA_IRQHandler+0x434>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d12a      	bne.n	8004e68 <HAL_DMA_IRQHandler+0x438>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e023      	b.n	8004e70 <HAL_DMA_IRQHandler+0x440>
 8004e28:	40020010 	.word	0x40020010
 8004e2c:	40020028 	.word	0x40020028
 8004e30:	40020040 	.word	0x40020040
 8004e34:	40020058 	.word	0x40020058
 8004e38:	40020070 	.word	0x40020070
 8004e3c:	40020088 	.word	0x40020088
 8004e40:	400200a0 	.word	0x400200a0
 8004e44:	400200b8 	.word	0x400200b8
 8004e48:	40020410 	.word	0x40020410
 8004e4c:	40020428 	.word	0x40020428
 8004e50:	40020440 	.word	0x40020440
 8004e54:	40020458 	.word	0x40020458
 8004e58:	40020470 	.word	0x40020470
 8004e5c:	40020488 	.word	0x40020488
 8004e60:	400204a0 	.word	0x400204a0
 8004e64:	400204b8 	.word	0x400204b8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2204      	movs	r2, #4
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e88:	f043 0204 	orr.w	r2, r3, #4
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2210      	movs	r2, #16
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80a6 	beq.w	8004ff2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a85      	ldr	r2, [pc, #532]	@ (80050c0 <HAL_DMA_IRQHandler+0x690>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d04a      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a83      	ldr	r2, [pc, #524]	@ (80050c4 <HAL_DMA_IRQHandler+0x694>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d045      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a82      	ldr	r2, [pc, #520]	@ (80050c8 <HAL_DMA_IRQHandler+0x698>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d040      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a80      	ldr	r2, [pc, #512]	@ (80050cc <HAL_DMA_IRQHandler+0x69c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d03b      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a7f      	ldr	r2, [pc, #508]	@ (80050d0 <HAL_DMA_IRQHandler+0x6a0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d036      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a7d      	ldr	r2, [pc, #500]	@ (80050d4 <HAL_DMA_IRQHandler+0x6a4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d031      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7c      	ldr	r2, [pc, #496]	@ (80050d8 <HAL_DMA_IRQHandler+0x6a8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d02c      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a7a      	ldr	r2, [pc, #488]	@ (80050dc <HAL_DMA_IRQHandler+0x6ac>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d027      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a79      	ldr	r2, [pc, #484]	@ (80050e0 <HAL_DMA_IRQHandler+0x6b0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a77      	ldr	r2, [pc, #476]	@ (80050e4 <HAL_DMA_IRQHandler+0x6b4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01d      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a76      	ldr	r2, [pc, #472]	@ (80050e8 <HAL_DMA_IRQHandler+0x6b8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a74      	ldr	r2, [pc, #464]	@ (80050ec <HAL_DMA_IRQHandler+0x6bc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a73      	ldr	r2, [pc, #460]	@ (80050f0 <HAL_DMA_IRQHandler+0x6c0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a71      	ldr	r2, [pc, #452]	@ (80050f4 <HAL_DMA_IRQHandler+0x6c4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a70      	ldr	r2, [pc, #448]	@ (80050f8 <HAL_DMA_IRQHandler+0x6c8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x516>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a6e      	ldr	r2, [pc, #440]	@ (80050fc <HAL_DMA_IRQHandler+0x6cc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10a      	bne.n	8004f5c <HAL_DMA_IRQHandler+0x52c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2300      	moveq	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	e009      	b.n	8004f70 <HAL_DMA_IRQHandler+0x540>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bf14      	ite	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	2300      	moveq	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d03e      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d018      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d108      	bne.n	8004fb2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d024      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
 8004fb0:	e01f      	b.n	8004ff2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01b      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	4798      	blx	r3
 8004fc2:	e016      	b.n	8004ff2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d107      	bne.n	8004fe2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0208 	bic.w	r2, r2, #8
 8004fe0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	4013      	ands	r3, r2
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8110 	beq.w	8005228 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2c      	ldr	r2, [pc, #176]	@ (80050c0 <HAL_DMA_IRQHandler+0x690>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d04a      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2b      	ldr	r2, [pc, #172]	@ (80050c4 <HAL_DMA_IRQHandler+0x694>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d045      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a29      	ldr	r2, [pc, #164]	@ (80050c8 <HAL_DMA_IRQHandler+0x698>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d040      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a28      	ldr	r2, [pc, #160]	@ (80050cc <HAL_DMA_IRQHandler+0x69c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d03b      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a26      	ldr	r2, [pc, #152]	@ (80050d0 <HAL_DMA_IRQHandler+0x6a0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d036      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a25      	ldr	r2, [pc, #148]	@ (80050d4 <HAL_DMA_IRQHandler+0x6a4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d031      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a23      	ldr	r2, [pc, #140]	@ (80050d8 <HAL_DMA_IRQHandler+0x6a8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d02c      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a22      	ldr	r2, [pc, #136]	@ (80050dc <HAL_DMA_IRQHandler+0x6ac>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d027      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a20      	ldr	r2, [pc, #128]	@ (80050e0 <HAL_DMA_IRQHandler+0x6b0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d022      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1f      	ldr	r2, [pc, #124]	@ (80050e4 <HAL_DMA_IRQHandler+0x6b4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d01d      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1d      	ldr	r2, [pc, #116]	@ (80050e8 <HAL_DMA_IRQHandler+0x6b8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d018      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <HAL_DMA_IRQHandler+0x6bc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d013      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1a      	ldr	r2, [pc, #104]	@ (80050f0 <HAL_DMA_IRQHandler+0x6c0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00e      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <HAL_DMA_IRQHandler+0x6c4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d009      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a17      	ldr	r2, [pc, #92]	@ (80050f8 <HAL_DMA_IRQHandler+0x6c8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x678>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a16      	ldr	r2, [pc, #88]	@ (80050fc <HAL_DMA_IRQHandler+0x6cc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d12b      	bne.n	8005100 <HAL_DMA_IRQHandler+0x6d0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bf14      	ite	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	2300      	moveq	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	e02a      	b.n	8005114 <HAL_DMA_IRQHandler+0x6e4>
 80050be:	bf00      	nop
 80050c0:	40020010 	.word	0x40020010
 80050c4:	40020028 	.word	0x40020028
 80050c8:	40020040 	.word	0x40020040
 80050cc:	40020058 	.word	0x40020058
 80050d0:	40020070 	.word	0x40020070
 80050d4:	40020088 	.word	0x40020088
 80050d8:	400200a0 	.word	0x400200a0
 80050dc:	400200b8 	.word	0x400200b8
 80050e0:	40020410 	.word	0x40020410
 80050e4:	40020428 	.word	0x40020428
 80050e8:	40020440 	.word	0x40020440
 80050ec:	40020458 	.word	0x40020458
 80050f0:	40020470 	.word	0x40020470
 80050f4:	40020488 	.word	0x40020488
 80050f8:	400204a0 	.word	0x400204a0
 80050fc:	400204b8 	.word	0x400204b8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	bf14      	ite	ne
 800510e:	2301      	movne	r3, #1
 8005110:	2300      	moveq	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8087 	beq.w	8005228 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511e:	f003 031f 	and.w	r3, r3, #31
 8005122:	2220      	movs	r2, #32
 8005124:	409a      	lsls	r2, r3
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b04      	cmp	r3, #4
 8005134:	d139      	bne.n	80051aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0216 	bic.w	r2, r2, #22
 8005144:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695a      	ldr	r2, [r3, #20]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005154:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d103      	bne.n	8005166 <HAL_DMA_IRQHandler+0x736>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0208 	bic.w	r2, r2, #8
 8005174:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	223f      	movs	r2, #63	@ 0x3f
 8005180:	409a      	lsls	r2, r3
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 834a 	beq.w	8005834 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
          }
          return;
 80051a8:	e344      	b.n	8005834 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d018      	beq.n	80051ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d108      	bne.n	80051d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d02c      	beq.n	8005228 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
 80051d6:	e027      	b.n	8005228 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d023      	beq.n	8005228 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	4798      	blx	r3
 80051e8:	e01e      	b.n	8005228 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10f      	bne.n	8005218 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0210 	bic.w	r2, r2, #16
 8005206:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8306 	beq.w	800583e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8088 	beq.w	8005350 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2204      	movs	r2, #4
 8005244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a7a      	ldr	r2, [pc, #488]	@ (8005438 <HAL_DMA_IRQHandler+0xa08>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d04a      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a79      	ldr	r2, [pc, #484]	@ (800543c <HAL_DMA_IRQHandler+0xa0c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d045      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a77      	ldr	r2, [pc, #476]	@ (8005440 <HAL_DMA_IRQHandler+0xa10>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d040      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a76      	ldr	r2, [pc, #472]	@ (8005444 <HAL_DMA_IRQHandler+0xa14>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d03b      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a74      	ldr	r2, [pc, #464]	@ (8005448 <HAL_DMA_IRQHandler+0xa18>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d036      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a73      	ldr	r2, [pc, #460]	@ (800544c <HAL_DMA_IRQHandler+0xa1c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d031      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a71      	ldr	r2, [pc, #452]	@ (8005450 <HAL_DMA_IRQHandler+0xa20>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d02c      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a70      	ldr	r2, [pc, #448]	@ (8005454 <HAL_DMA_IRQHandler+0xa24>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d027      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a6e      	ldr	r2, [pc, #440]	@ (8005458 <HAL_DMA_IRQHandler+0xa28>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d022      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6d      	ldr	r2, [pc, #436]	@ (800545c <HAL_DMA_IRQHandler+0xa2c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d01d      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005460 <HAL_DMA_IRQHandler+0xa30>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d018      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a6a      	ldr	r2, [pc, #424]	@ (8005464 <HAL_DMA_IRQHandler+0xa34>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a68      	ldr	r2, [pc, #416]	@ (8005468 <HAL_DMA_IRQHandler+0xa38>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00e      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a67      	ldr	r2, [pc, #412]	@ (800546c <HAL_DMA_IRQHandler+0xa3c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d009      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a65      	ldr	r2, [pc, #404]	@ (8005470 <HAL_DMA_IRQHandler+0xa40>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x8b8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a64      	ldr	r2, [pc, #400]	@ (8005474 <HAL_DMA_IRQHandler+0xa44>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d108      	bne.n	80052fa <HAL_DMA_IRQHandler+0x8ca>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0201 	bic.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e007      	b.n	800530a <HAL_DMA_IRQHandler+0x8da>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3301      	adds	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005312:	429a      	cmp	r2, r3
 8005314:	d307      	bcc.n	8005326 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1f2      	bne.n	800530a <HAL_DMA_IRQHandler+0x8da>
 8005324:	e000      	b.n	8005328 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005326:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2203      	movs	r2, #3
 800533a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800533e:	e003      	b.n	8005348 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8272 	beq.w	800583e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
 8005362:	e26c      	b.n	800583e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a43      	ldr	r2, [pc, #268]	@ (8005478 <HAL_DMA_IRQHandler+0xa48>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d022      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x984>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a42      	ldr	r2, [pc, #264]	@ (800547c <HAL_DMA_IRQHandler+0xa4c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d01d      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x984>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a40      	ldr	r2, [pc, #256]	@ (8005480 <HAL_DMA_IRQHandler+0xa50>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d018      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x984>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a3f      	ldr	r2, [pc, #252]	@ (8005484 <HAL_DMA_IRQHandler+0xa54>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d013      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x984>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a3d      	ldr	r2, [pc, #244]	@ (8005488 <HAL_DMA_IRQHandler+0xa58>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00e      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x984>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a3c      	ldr	r2, [pc, #240]	@ (800548c <HAL_DMA_IRQHandler+0xa5c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d009      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x984>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a3a      	ldr	r2, [pc, #232]	@ (8005490 <HAL_DMA_IRQHandler+0xa60>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d004      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x984>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a39      	ldr	r2, [pc, #228]	@ (8005494 <HAL_DMA_IRQHandler+0xa64>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d101      	bne.n	80053b8 <HAL_DMA_IRQHandler+0x988>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <HAL_DMA_IRQHandler+0x98a>
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 823f 	beq.w	800583e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2204      	movs	r2, #4
 80053d2:	409a      	lsls	r2, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80cd 	beq.w	8005578 <HAL_DMA_IRQHandler+0xb48>
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80c7 	beq.w	8005578 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	2204      	movs	r2, #4
 80053f4:	409a      	lsls	r2, r3
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d049      	beq.n	8005498 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 8210 	beq.w	8005838 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005420:	e20a      	b.n	8005838 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8206 	beq.w	8005838 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005434:	e200      	b.n	8005838 <HAL_DMA_IRQHandler+0xe08>
 8005436:	bf00      	nop
 8005438:	40020010 	.word	0x40020010
 800543c:	40020028 	.word	0x40020028
 8005440:	40020040 	.word	0x40020040
 8005444:	40020058 	.word	0x40020058
 8005448:	40020070 	.word	0x40020070
 800544c:	40020088 	.word	0x40020088
 8005450:	400200a0 	.word	0x400200a0
 8005454:	400200b8 	.word	0x400200b8
 8005458:	40020410 	.word	0x40020410
 800545c:	40020428 	.word	0x40020428
 8005460:	40020440 	.word	0x40020440
 8005464:	40020458 	.word	0x40020458
 8005468:	40020470 	.word	0x40020470
 800546c:	40020488 	.word	0x40020488
 8005470:	400204a0 	.word	0x400204a0
 8005474:	400204b8 	.word	0x400204b8
 8005478:	58025408 	.word	0x58025408
 800547c:	5802541c 	.word	0x5802541c
 8005480:	58025430 	.word	0x58025430
 8005484:	58025444 	.word	0x58025444
 8005488:	58025458 	.word	0x58025458
 800548c:	5802546c 	.word	0x5802546c
 8005490:	58025480 	.word	0x58025480
 8005494:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d160      	bne.n	8005564 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a7f      	ldr	r2, [pc, #508]	@ (80056a4 <HAL_DMA_IRQHandler+0xc74>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d04a      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a7d      	ldr	r2, [pc, #500]	@ (80056a8 <HAL_DMA_IRQHandler+0xc78>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d045      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a7c      	ldr	r2, [pc, #496]	@ (80056ac <HAL_DMA_IRQHandler+0xc7c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d040      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a7a      	ldr	r2, [pc, #488]	@ (80056b0 <HAL_DMA_IRQHandler+0xc80>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d03b      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a79      	ldr	r2, [pc, #484]	@ (80056b4 <HAL_DMA_IRQHandler+0xc84>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d036      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a77      	ldr	r2, [pc, #476]	@ (80056b8 <HAL_DMA_IRQHandler+0xc88>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d031      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a76      	ldr	r2, [pc, #472]	@ (80056bc <HAL_DMA_IRQHandler+0xc8c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d02c      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a74      	ldr	r2, [pc, #464]	@ (80056c0 <HAL_DMA_IRQHandler+0xc90>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d027      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a73      	ldr	r2, [pc, #460]	@ (80056c4 <HAL_DMA_IRQHandler+0xc94>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d022      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a71      	ldr	r2, [pc, #452]	@ (80056c8 <HAL_DMA_IRQHandler+0xc98>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d01d      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a70      	ldr	r2, [pc, #448]	@ (80056cc <HAL_DMA_IRQHandler+0xc9c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a6e      	ldr	r2, [pc, #440]	@ (80056d0 <HAL_DMA_IRQHandler+0xca0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6d      	ldr	r2, [pc, #436]	@ (80056d4 <HAL_DMA_IRQHandler+0xca4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a6b      	ldr	r2, [pc, #428]	@ (80056d8 <HAL_DMA_IRQHandler+0xca8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a6a      	ldr	r2, [pc, #424]	@ (80056dc <HAL_DMA_IRQHandler+0xcac>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_DMA_IRQHandler+0xb12>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a68      	ldr	r2, [pc, #416]	@ (80056e0 <HAL_DMA_IRQHandler+0xcb0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d108      	bne.n	8005554 <HAL_DMA_IRQHandler+0xb24>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0208 	bic.w	r2, r2, #8
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e007      	b.n	8005564 <HAL_DMA_IRQHandler+0xb34>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0204 	bic.w	r2, r2, #4
 8005562:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8165 	beq.w	8005838 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005576:	e15f      	b.n	8005838 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	2202      	movs	r2, #2
 8005582:	409a      	lsls	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80c5 	beq.w	8005718 <HAL_DMA_IRQHandler+0xce8>
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80bf 	beq.w	8005718 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	2202      	movs	r2, #2
 80055a4:	409a      	lsls	r2, r3
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d018      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 813a 	beq.w	800583c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055d0:	e134      	b.n	800583c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8130 	beq.w	800583c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055e4:	e12a      	b.n	800583c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 8089 	bne.w	8005704 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a2b      	ldr	r2, [pc, #172]	@ (80056a4 <HAL_DMA_IRQHandler+0xc74>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d04a      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a29      	ldr	r2, [pc, #164]	@ (80056a8 <HAL_DMA_IRQHandler+0xc78>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d045      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a28      	ldr	r2, [pc, #160]	@ (80056ac <HAL_DMA_IRQHandler+0xc7c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d040      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a26      	ldr	r2, [pc, #152]	@ (80056b0 <HAL_DMA_IRQHandler+0xc80>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d03b      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a25      	ldr	r2, [pc, #148]	@ (80056b4 <HAL_DMA_IRQHandler+0xc84>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d036      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a23      	ldr	r2, [pc, #140]	@ (80056b8 <HAL_DMA_IRQHandler+0xc88>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d031      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a22      	ldr	r2, [pc, #136]	@ (80056bc <HAL_DMA_IRQHandler+0xc8c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d02c      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a20      	ldr	r2, [pc, #128]	@ (80056c0 <HAL_DMA_IRQHandler+0xc90>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d027      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1f      	ldr	r2, [pc, #124]	@ (80056c4 <HAL_DMA_IRQHandler+0xc94>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d022      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1d      	ldr	r2, [pc, #116]	@ (80056c8 <HAL_DMA_IRQHandler+0xc98>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d01d      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1c      	ldr	r2, [pc, #112]	@ (80056cc <HAL_DMA_IRQHandler+0xc9c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d018      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1a      	ldr	r2, [pc, #104]	@ (80056d0 <HAL_DMA_IRQHandler+0xca0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a19      	ldr	r2, [pc, #100]	@ (80056d4 <HAL_DMA_IRQHandler+0xca4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00e      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a17      	ldr	r2, [pc, #92]	@ (80056d8 <HAL_DMA_IRQHandler+0xca8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a16      	ldr	r2, [pc, #88]	@ (80056dc <HAL_DMA_IRQHandler+0xcac>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_DMA_IRQHandler+0xc62>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a14      	ldr	r2, [pc, #80]	@ (80056e0 <HAL_DMA_IRQHandler+0xcb0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d128      	bne.n	80056e4 <HAL_DMA_IRQHandler+0xcb4>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0214 	bic.w	r2, r2, #20
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e027      	b.n	80056f4 <HAL_DMA_IRQHandler+0xcc4>
 80056a4:	40020010 	.word	0x40020010
 80056a8:	40020028 	.word	0x40020028
 80056ac:	40020040 	.word	0x40020040
 80056b0:	40020058 	.word	0x40020058
 80056b4:	40020070 	.word	0x40020070
 80056b8:	40020088 	.word	0x40020088
 80056bc:	400200a0 	.word	0x400200a0
 80056c0:	400200b8 	.word	0x400200b8
 80056c4:	40020410 	.word	0x40020410
 80056c8:	40020428 	.word	0x40020428
 80056cc:	40020440 	.word	0x40020440
 80056d0:	40020458 	.word	0x40020458
 80056d4:	40020470 	.word	0x40020470
 80056d8:	40020488 	.word	0x40020488
 80056dc:	400204a0 	.word	0x400204a0
 80056e0:	400204b8 	.word	0x400204b8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 020a 	bic.w	r2, r2, #10
 80056f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 8097 	beq.w	800583c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005716:	e091      	b.n	800583c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	2208      	movs	r2, #8
 8005722:	409a      	lsls	r2, r3
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4013      	ands	r3, r2
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8088 	beq.w	800583e <HAL_DMA_IRQHandler+0xe0e>
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8082 	beq.w	800583e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a41      	ldr	r2, [pc, #260]	@ (8005844 <HAL_DMA_IRQHandler+0xe14>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d04a      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a3f      	ldr	r2, [pc, #252]	@ (8005848 <HAL_DMA_IRQHandler+0xe18>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d045      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a3e      	ldr	r2, [pc, #248]	@ (800584c <HAL_DMA_IRQHandler+0xe1c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d040      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a3c      	ldr	r2, [pc, #240]	@ (8005850 <HAL_DMA_IRQHandler+0xe20>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d03b      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a3b      	ldr	r2, [pc, #236]	@ (8005854 <HAL_DMA_IRQHandler+0xe24>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d036      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a39      	ldr	r2, [pc, #228]	@ (8005858 <HAL_DMA_IRQHandler+0xe28>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d031      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a38      	ldr	r2, [pc, #224]	@ (800585c <HAL_DMA_IRQHandler+0xe2c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d02c      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a36      	ldr	r2, [pc, #216]	@ (8005860 <HAL_DMA_IRQHandler+0xe30>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d027      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a35      	ldr	r2, [pc, #212]	@ (8005864 <HAL_DMA_IRQHandler+0xe34>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a33      	ldr	r2, [pc, #204]	@ (8005868 <HAL_DMA_IRQHandler+0xe38>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a32      	ldr	r2, [pc, #200]	@ (800586c <HAL_DMA_IRQHandler+0xe3c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a30      	ldr	r2, [pc, #192]	@ (8005870 <HAL_DMA_IRQHandler+0xe40>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005874 <HAL_DMA_IRQHandler+0xe44>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005878 <HAL_DMA_IRQHandler+0xe48>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2c      	ldr	r2, [pc, #176]	@ (800587c <HAL_DMA_IRQHandler+0xe4c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_DMA_IRQHandler+0xdaa>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005880 <HAL_DMA_IRQHandler+0xe50>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d108      	bne.n	80057ec <HAL_DMA_IRQHandler+0xdbc>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 021c 	bic.w	r2, r2, #28
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e007      	b.n	80057fc <HAL_DMA_IRQHandler+0xdcc>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 020e 	bic.w	r2, r2, #14
 80057fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005800:	f003 031f 	and.w	r3, r3, #31
 8005804:	2201      	movs	r2, #1
 8005806:	409a      	lsls	r2, r3
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	4798      	blx	r3
 8005832:	e004      	b.n	800583e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005834:	bf00      	nop
 8005836:	e002      	b.n	800583e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005838:	bf00      	nop
 800583a:	e000      	b.n	800583e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800583c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800583e:	3728      	adds	r7, #40	@ 0x28
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40020010 	.word	0x40020010
 8005848:	40020028 	.word	0x40020028
 800584c:	40020040 	.word	0x40020040
 8005850:	40020058 	.word	0x40020058
 8005854:	40020070 	.word	0x40020070
 8005858:	40020088 	.word	0x40020088
 800585c:	400200a0 	.word	0x400200a0
 8005860:	400200b8 	.word	0x400200b8
 8005864:	40020410 	.word	0x40020410
 8005868:	40020428 	.word	0x40020428
 800586c:	40020440 	.word	0x40020440
 8005870:	40020458 	.word	0x40020458
 8005874:	40020470 	.word	0x40020470
 8005878:	40020488 	.word	0x40020488
 800587c:	400204a0 	.word	0x400204a0
 8005880:	400204b8 	.word	0x400204b8

08005884 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005892:	b2db      	uxtb	r3, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a7f      	ldr	r2, [pc, #508]	@ (8005abc <DMA_SetConfig+0x21c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d072      	beq.n	80059aa <DMA_SetConfig+0x10a>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ac0 <DMA_SetConfig+0x220>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d06d      	beq.n	80059aa <DMA_SetConfig+0x10a>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ac4 <DMA_SetConfig+0x224>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d068      	beq.n	80059aa <DMA_SetConfig+0x10a>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a7a      	ldr	r2, [pc, #488]	@ (8005ac8 <DMA_SetConfig+0x228>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d063      	beq.n	80059aa <DMA_SetConfig+0x10a>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a79      	ldr	r2, [pc, #484]	@ (8005acc <DMA_SetConfig+0x22c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d05e      	beq.n	80059aa <DMA_SetConfig+0x10a>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a77      	ldr	r2, [pc, #476]	@ (8005ad0 <DMA_SetConfig+0x230>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d059      	beq.n	80059aa <DMA_SetConfig+0x10a>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a76      	ldr	r2, [pc, #472]	@ (8005ad4 <DMA_SetConfig+0x234>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d054      	beq.n	80059aa <DMA_SetConfig+0x10a>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a74      	ldr	r2, [pc, #464]	@ (8005ad8 <DMA_SetConfig+0x238>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d04f      	beq.n	80059aa <DMA_SetConfig+0x10a>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a73      	ldr	r2, [pc, #460]	@ (8005adc <DMA_SetConfig+0x23c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d04a      	beq.n	80059aa <DMA_SetConfig+0x10a>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a71      	ldr	r2, [pc, #452]	@ (8005ae0 <DMA_SetConfig+0x240>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d045      	beq.n	80059aa <DMA_SetConfig+0x10a>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a70      	ldr	r2, [pc, #448]	@ (8005ae4 <DMA_SetConfig+0x244>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d040      	beq.n	80059aa <DMA_SetConfig+0x10a>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a6e      	ldr	r2, [pc, #440]	@ (8005ae8 <DMA_SetConfig+0x248>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d03b      	beq.n	80059aa <DMA_SetConfig+0x10a>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a6d      	ldr	r2, [pc, #436]	@ (8005aec <DMA_SetConfig+0x24c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d036      	beq.n	80059aa <DMA_SetConfig+0x10a>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a6b      	ldr	r2, [pc, #428]	@ (8005af0 <DMA_SetConfig+0x250>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d031      	beq.n	80059aa <DMA_SetConfig+0x10a>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6a      	ldr	r2, [pc, #424]	@ (8005af4 <DMA_SetConfig+0x254>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d02c      	beq.n	80059aa <DMA_SetConfig+0x10a>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a68      	ldr	r2, [pc, #416]	@ (8005af8 <DMA_SetConfig+0x258>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d027      	beq.n	80059aa <DMA_SetConfig+0x10a>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a67      	ldr	r2, [pc, #412]	@ (8005afc <DMA_SetConfig+0x25c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d022      	beq.n	80059aa <DMA_SetConfig+0x10a>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a65      	ldr	r2, [pc, #404]	@ (8005b00 <DMA_SetConfig+0x260>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01d      	beq.n	80059aa <DMA_SetConfig+0x10a>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a64      	ldr	r2, [pc, #400]	@ (8005b04 <DMA_SetConfig+0x264>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d018      	beq.n	80059aa <DMA_SetConfig+0x10a>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a62      	ldr	r2, [pc, #392]	@ (8005b08 <DMA_SetConfig+0x268>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d013      	beq.n	80059aa <DMA_SetConfig+0x10a>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a61      	ldr	r2, [pc, #388]	@ (8005b0c <DMA_SetConfig+0x26c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00e      	beq.n	80059aa <DMA_SetConfig+0x10a>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a5f      	ldr	r2, [pc, #380]	@ (8005b10 <DMA_SetConfig+0x270>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d009      	beq.n	80059aa <DMA_SetConfig+0x10a>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a5e      	ldr	r2, [pc, #376]	@ (8005b14 <DMA_SetConfig+0x274>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <DMA_SetConfig+0x10a>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005b18 <DMA_SetConfig+0x278>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d101      	bne.n	80059ae <DMA_SetConfig+0x10e>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <DMA_SetConfig+0x110>
 80059ae:	2300      	movs	r3, #0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00d      	beq.n	80059d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80059bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80059ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a39      	ldr	r2, [pc, #228]	@ (8005abc <DMA_SetConfig+0x21c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d04a      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a38      	ldr	r2, [pc, #224]	@ (8005ac0 <DMA_SetConfig+0x220>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d045      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a36      	ldr	r2, [pc, #216]	@ (8005ac4 <DMA_SetConfig+0x224>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d040      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a35      	ldr	r2, [pc, #212]	@ (8005ac8 <DMA_SetConfig+0x228>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d03b      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a33      	ldr	r2, [pc, #204]	@ (8005acc <DMA_SetConfig+0x22c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d036      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a32      	ldr	r2, [pc, #200]	@ (8005ad0 <DMA_SetConfig+0x230>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d031      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a30      	ldr	r2, [pc, #192]	@ (8005ad4 <DMA_SetConfig+0x234>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d02c      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ad8 <DMA_SetConfig+0x238>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d027      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2d      	ldr	r2, [pc, #180]	@ (8005adc <DMA_SetConfig+0x23c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d022      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae0 <DMA_SetConfig+0x240>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d01d      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae4 <DMA_SetConfig+0x244>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d018      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a29      	ldr	r2, [pc, #164]	@ (8005ae8 <DMA_SetConfig+0x248>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d013      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a27      	ldr	r2, [pc, #156]	@ (8005aec <DMA_SetConfig+0x24c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00e      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a26      	ldr	r2, [pc, #152]	@ (8005af0 <DMA_SetConfig+0x250>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d009      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a24      	ldr	r2, [pc, #144]	@ (8005af4 <DMA_SetConfig+0x254>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d004      	beq.n	8005a70 <DMA_SetConfig+0x1d0>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a23      	ldr	r2, [pc, #140]	@ (8005af8 <DMA_SetConfig+0x258>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d101      	bne.n	8005a74 <DMA_SetConfig+0x1d4>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <DMA_SetConfig+0x1d6>
 8005a74:	2300      	movs	r3, #0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d059      	beq.n	8005b2e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	223f      	movs	r2, #63	@ 0x3f
 8005a84:	409a      	lsls	r2, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a98:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b40      	cmp	r3, #64	@ 0x40
 8005aa8:	d138      	bne.n	8005b1c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005aba:	e086      	b.n	8005bca <DMA_SetConfig+0x32a>
 8005abc:	40020010 	.word	0x40020010
 8005ac0:	40020028 	.word	0x40020028
 8005ac4:	40020040 	.word	0x40020040
 8005ac8:	40020058 	.word	0x40020058
 8005acc:	40020070 	.word	0x40020070
 8005ad0:	40020088 	.word	0x40020088
 8005ad4:	400200a0 	.word	0x400200a0
 8005ad8:	400200b8 	.word	0x400200b8
 8005adc:	40020410 	.word	0x40020410
 8005ae0:	40020428 	.word	0x40020428
 8005ae4:	40020440 	.word	0x40020440
 8005ae8:	40020458 	.word	0x40020458
 8005aec:	40020470 	.word	0x40020470
 8005af0:	40020488 	.word	0x40020488
 8005af4:	400204a0 	.word	0x400204a0
 8005af8:	400204b8 	.word	0x400204b8
 8005afc:	58025408 	.word	0x58025408
 8005b00:	5802541c 	.word	0x5802541c
 8005b04:	58025430 	.word	0x58025430
 8005b08:	58025444 	.word	0x58025444
 8005b0c:	58025458 	.word	0x58025458
 8005b10:	5802546c 	.word	0x5802546c
 8005b14:	58025480 	.word	0x58025480
 8005b18:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	60da      	str	r2, [r3, #12]
}
 8005b2c:	e04d      	b.n	8005bca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a29      	ldr	r2, [pc, #164]	@ (8005bd8 <DMA_SetConfig+0x338>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d022      	beq.n	8005b7e <DMA_SetConfig+0x2de>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a27      	ldr	r2, [pc, #156]	@ (8005bdc <DMA_SetConfig+0x33c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01d      	beq.n	8005b7e <DMA_SetConfig+0x2de>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a26      	ldr	r2, [pc, #152]	@ (8005be0 <DMA_SetConfig+0x340>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d018      	beq.n	8005b7e <DMA_SetConfig+0x2de>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a24      	ldr	r2, [pc, #144]	@ (8005be4 <DMA_SetConfig+0x344>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <DMA_SetConfig+0x2de>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a23      	ldr	r2, [pc, #140]	@ (8005be8 <DMA_SetConfig+0x348>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00e      	beq.n	8005b7e <DMA_SetConfig+0x2de>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a21      	ldr	r2, [pc, #132]	@ (8005bec <DMA_SetConfig+0x34c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <DMA_SetConfig+0x2de>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a20      	ldr	r2, [pc, #128]	@ (8005bf0 <DMA_SetConfig+0x350>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <DMA_SetConfig+0x2de>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf4 <DMA_SetConfig+0x354>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d101      	bne.n	8005b82 <DMA_SetConfig+0x2e2>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <DMA_SetConfig+0x2e4>
 8005b82:	2300      	movs	r3, #0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d020      	beq.n	8005bca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	2201      	movs	r2, #1
 8005b92:	409a      	lsls	r2, r3
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b40      	cmp	r3, #64	@ 0x40
 8005ba6:	d108      	bne.n	8005bba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	60da      	str	r2, [r3, #12]
}
 8005bb8:	e007      	b.n	8005bca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	60da      	str	r2, [r3, #12]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	58025408 	.word	0x58025408
 8005bdc:	5802541c 	.word	0x5802541c
 8005be0:	58025430 	.word	0x58025430
 8005be4:	58025444 	.word	0x58025444
 8005be8:	58025458 	.word	0x58025458
 8005bec:	5802546c 	.word	0x5802546c
 8005bf0:	58025480 	.word	0x58025480
 8005bf4:	58025494 	.word	0x58025494

08005bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a42      	ldr	r2, [pc, #264]	@ (8005d10 <DMA_CalcBaseAndBitshift+0x118>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d04a      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a41      	ldr	r2, [pc, #260]	@ (8005d14 <DMA_CalcBaseAndBitshift+0x11c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d045      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a3f      	ldr	r2, [pc, #252]	@ (8005d18 <DMA_CalcBaseAndBitshift+0x120>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d040      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a3e      	ldr	r2, [pc, #248]	@ (8005d1c <DMA_CalcBaseAndBitshift+0x124>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d03b      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005d20 <DMA_CalcBaseAndBitshift+0x128>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d036      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a3b      	ldr	r2, [pc, #236]	@ (8005d24 <DMA_CalcBaseAndBitshift+0x12c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d031      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a39      	ldr	r2, [pc, #228]	@ (8005d28 <DMA_CalcBaseAndBitshift+0x130>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d02c      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a38      	ldr	r2, [pc, #224]	@ (8005d2c <DMA_CalcBaseAndBitshift+0x134>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d027      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a36      	ldr	r2, [pc, #216]	@ (8005d30 <DMA_CalcBaseAndBitshift+0x138>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d022      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a35      	ldr	r2, [pc, #212]	@ (8005d34 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d01d      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a33      	ldr	r2, [pc, #204]	@ (8005d38 <DMA_CalcBaseAndBitshift+0x140>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d018      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a32      	ldr	r2, [pc, #200]	@ (8005d3c <DMA_CalcBaseAndBitshift+0x144>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a30      	ldr	r2, [pc, #192]	@ (8005d40 <DMA_CalcBaseAndBitshift+0x148>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00e      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2f      	ldr	r2, [pc, #188]	@ (8005d44 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d009      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2d      	ldr	r2, [pc, #180]	@ (8005d48 <DMA_CalcBaseAndBitshift+0x150>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d004      	beq.n	8005ca0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d4c <DMA_CalcBaseAndBitshift+0x154>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d101      	bne.n	8005ca4 <DMA_CalcBaseAndBitshift+0xac>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <DMA_CalcBaseAndBitshift+0xae>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d024      	beq.n	8005cf4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	3b10      	subs	r3, #16
 8005cb2:	4a27      	ldr	r2, [pc, #156]	@ (8005d50 <DMA_CalcBaseAndBitshift+0x158>)
 8005cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb8:	091b      	lsrs	r3, r3, #4
 8005cba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	4a24      	ldr	r2, [pc, #144]	@ (8005d54 <DMA_CalcBaseAndBitshift+0x15c>)
 8005cc4:	5cd3      	ldrb	r3, [r2, r3]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d908      	bls.n	8005ce4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8005d58 <DMA_CalcBaseAndBitshift+0x160>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	1d1a      	adds	r2, r3, #4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ce2:	e00d      	b.n	8005d00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4b1b      	ldr	r3, [pc, #108]	@ (8005d58 <DMA_CalcBaseAndBitshift+0x160>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cf2:	e005      	b.n	8005d00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	40020010 	.word	0x40020010
 8005d14:	40020028 	.word	0x40020028
 8005d18:	40020040 	.word	0x40020040
 8005d1c:	40020058 	.word	0x40020058
 8005d20:	40020070 	.word	0x40020070
 8005d24:	40020088 	.word	0x40020088
 8005d28:	400200a0 	.word	0x400200a0
 8005d2c:	400200b8 	.word	0x400200b8
 8005d30:	40020410 	.word	0x40020410
 8005d34:	40020428 	.word	0x40020428
 8005d38:	40020440 	.word	0x40020440
 8005d3c:	40020458 	.word	0x40020458
 8005d40:	40020470 	.word	0x40020470
 8005d44:	40020488 	.word	0x40020488
 8005d48:	400204a0 	.word	0x400204a0
 8005d4c:	400204b8 	.word	0x400204b8
 8005d50:	aaaaaaab 	.word	0xaaaaaaab
 8005d54:	0800c4d0 	.word	0x0800c4d0
 8005d58:	fffffc00 	.word	0xfffffc00

08005d5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d120      	bne.n	8005db2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d858      	bhi.n	8005e2a <DMA_CheckFifoParam+0xce>
 8005d78:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <DMA_CheckFifoParam+0x24>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005d91 	.word	0x08005d91
 8005d84:	08005da3 	.word	0x08005da3
 8005d88:	08005d91 	.word	0x08005d91
 8005d8c:	08005e2b 	.word	0x08005e2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d048      	beq.n	8005e2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005da0:	e045      	b.n	8005e2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005daa:	d142      	bne.n	8005e32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005db0:	e03f      	b.n	8005e32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dba:	d123      	bne.n	8005e04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d838      	bhi.n	8005e36 <DMA_CheckFifoParam+0xda>
 8005dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <DMA_CheckFifoParam+0x70>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005ddd 	.word	0x08005ddd
 8005dd0:	08005de3 	.word	0x08005de3
 8005dd4:	08005ddd 	.word	0x08005ddd
 8005dd8:	08005df5 	.word	0x08005df5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
        break;
 8005de0:	e030      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d025      	beq.n	8005e3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005df2:	e022      	b.n	8005e3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005dfc:	d11f      	bne.n	8005e3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e02:	e01c      	b.n	8005e3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d902      	bls.n	8005e12 <DMA_CheckFifoParam+0xb6>
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d003      	beq.n	8005e18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005e10:	e018      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	73fb      	strb	r3, [r7, #15]
        break;
 8005e16:	e015      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00e      	beq.n	8005e42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
    break;
 8005e28:	e00b      	b.n	8005e42 <DMA_CheckFifoParam+0xe6>
        break;
 8005e2a:	bf00      	nop
 8005e2c:	e00a      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e008      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
        break;
 8005e32:	bf00      	nop
 8005e34:	e006      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
        break;
 8005e36:	bf00      	nop
 8005e38:	e004      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
        break;
 8005e3a:	bf00      	nop
 8005e3c:	e002      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
        break;
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
    break;
 8005e42:	bf00      	nop
    }
  }

  return status;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop

08005e54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a38      	ldr	r2, [pc, #224]	@ (8005f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d022      	beq.n	8005eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a36      	ldr	r2, [pc, #216]	@ (8005f4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d01d      	beq.n	8005eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a35      	ldr	r2, [pc, #212]	@ (8005f50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d018      	beq.n	8005eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a33      	ldr	r2, [pc, #204]	@ (8005f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a32      	ldr	r2, [pc, #200]	@ (8005f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a30      	ldr	r2, [pc, #192]	@ (8005f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8005f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a2d      	ldr	r2, [pc, #180]	@ (8005f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d101      	bne.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01a      	beq.n	8005ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	3b08      	subs	r3, #8
 8005ec4:	4a28      	ldr	r2, [pc, #160]	@ (8005f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	091b      	lsrs	r3, r3, #4
 8005ecc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4b26      	ldr	r3, [pc, #152]	@ (8005f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a24      	ldr	r2, [pc, #144]	@ (8005f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ee0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	2201      	movs	r2, #1
 8005eea:	409a      	lsls	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ef0:	e024      	b.n	8005f3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	3b10      	subs	r3, #16
 8005efa:	4a1e      	ldr	r2, [pc, #120]	@ (8005f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	091b      	lsrs	r3, r3, #4
 8005f02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4a1c      	ldr	r2, [pc, #112]	@ (8005f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d806      	bhi.n	8005f1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d902      	bls.n	8005f1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3308      	adds	r3, #8
 8005f18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4b18      	ldr	r3, [pc, #96]	@ (8005f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	461a      	mov	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a16      	ldr	r2, [pc, #88]	@ (8005f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005f2c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2201      	movs	r2, #1
 8005f36:	409a      	lsls	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f3c:	bf00      	nop
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	58025408 	.word	0x58025408
 8005f4c:	5802541c 	.word	0x5802541c
 8005f50:	58025430 	.word	0x58025430
 8005f54:	58025444 	.word	0x58025444
 8005f58:	58025458 	.word	0x58025458
 8005f5c:	5802546c 	.word	0x5802546c
 8005f60:	58025480 	.word	0x58025480
 8005f64:	58025494 	.word	0x58025494
 8005f68:	cccccccd 	.word	0xcccccccd
 8005f6c:	16009600 	.word	0x16009600
 8005f70:	58025880 	.word	0x58025880
 8005f74:	aaaaaaab 	.word	0xaaaaaaab
 8005f78:	400204b8 	.word	0x400204b8
 8005f7c:	4002040f 	.word	0x4002040f
 8005f80:	10008200 	.word	0x10008200
 8005f84:	40020880 	.word	0x40020880

08005f88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d04a      	beq.n	8006034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d847      	bhi.n	8006034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a25      	ldr	r2, [pc, #148]	@ (8006040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d022      	beq.n	8005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a24      	ldr	r2, [pc, #144]	@ (8006044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d01d      	beq.n	8005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a22      	ldr	r2, [pc, #136]	@ (8006048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d018      	beq.n	8005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a21      	ldr	r2, [pc, #132]	@ (800604c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8006050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00e      	beq.n	8005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1e      	ldr	r2, [pc, #120]	@ (8006054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d009      	beq.n	8005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8006058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1b      	ldr	r2, [pc, #108]	@ (800605c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d101      	bne.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4b17      	ldr	r3, [pc, #92]	@ (8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a15      	ldr	r2, [pc, #84]	@ (8006064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006010:	671a      	str	r2, [r3, #112]	@ 0x70
 8006012:	e009      	b.n	8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4b14      	ldr	r3, [pc, #80]	@ (8006068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	461a      	mov	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a11      	ldr	r2, [pc, #68]	@ (800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006026:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3b01      	subs	r3, #1
 800602c:	2201      	movs	r2, #1
 800602e:	409a      	lsls	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	58025408 	.word	0x58025408
 8006044:	5802541c 	.word	0x5802541c
 8006048:	58025430 	.word	0x58025430
 800604c:	58025444 	.word	0x58025444
 8006050:	58025458 	.word	0x58025458
 8006054:	5802546c 	.word	0x5802546c
 8006058:	58025480 	.word	0x58025480
 800605c:	58025494 	.word	0x58025494
 8006060:	1600963f 	.word	0x1600963f
 8006064:	58025940 	.word	0x58025940
 8006068:	1000823f 	.word	0x1000823f
 800606c:	40020940 	.word	0x40020940

08006070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006070:	b480      	push	{r7}
 8006072:	b089      	sub	sp, #36	@ 0x24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800607e:	4b86      	ldr	r3, [pc, #536]	@ (8006298 <HAL_GPIO_Init+0x228>)
 8006080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006082:	e18c      	b.n	800639e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	2101      	movs	r1, #1
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	fa01 f303 	lsl.w	r3, r1, r3
 8006090:	4013      	ands	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 817e 	beq.w	8006398 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f003 0303 	and.w	r3, r3, #3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d005      	beq.n	80060b4 <HAL_GPIO_Init+0x44>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d130      	bne.n	8006116 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	2203      	movs	r2, #3
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	43db      	mvns	r3, r3
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4013      	ands	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4313      	orrs	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ea:	2201      	movs	r2, #1
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43db      	mvns	r3, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4013      	ands	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	091b      	lsrs	r3, r3, #4
 8006100:	f003 0201 	and.w	r2, r3, #1
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4313      	orrs	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b03      	cmp	r3, #3
 8006120:	d017      	beq.n	8006152 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	2203      	movs	r2, #3
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	43db      	mvns	r3, r3
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	4013      	ands	r3, r2
 8006138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	4313      	orrs	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d123      	bne.n	80061a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	08da      	lsrs	r2, r3, #3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3208      	adds	r2, #8
 8006166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	220f      	movs	r2, #15
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	43db      	mvns	r3, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4013      	ands	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4313      	orrs	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	08da      	lsrs	r2, r3, #3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3208      	adds	r2, #8
 80061a0:	69b9      	ldr	r1, [r7, #24]
 80061a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	2203      	movs	r2, #3
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f003 0203 	and.w	r2, r3, #3
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 80d8 	beq.w	8006398 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061e8:	4b2c      	ldr	r3, [pc, #176]	@ (800629c <HAL_GPIO_Init+0x22c>)
 80061ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061ee:	4a2b      	ldr	r2, [pc, #172]	@ (800629c <HAL_GPIO_Init+0x22c>)
 80061f0:	f043 0302 	orr.w	r3, r3, #2
 80061f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80061f8:	4b28      	ldr	r3, [pc, #160]	@ (800629c <HAL_GPIO_Init+0x22c>)
 80061fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006206:	4a26      	ldr	r2, [pc, #152]	@ (80062a0 <HAL_GPIO_Init+0x230>)
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	089b      	lsrs	r3, r3, #2
 800620c:	3302      	adds	r3, #2
 800620e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	220f      	movs	r2, #15
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	43db      	mvns	r3, r3
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4013      	ands	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a1d      	ldr	r2, [pc, #116]	@ (80062a4 <HAL_GPIO_Init+0x234>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d04a      	beq.n	80062c8 <HAL_GPIO_Init+0x258>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a1c      	ldr	r2, [pc, #112]	@ (80062a8 <HAL_GPIO_Init+0x238>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d02b      	beq.n	8006292 <HAL_GPIO_Init+0x222>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a1b      	ldr	r2, [pc, #108]	@ (80062ac <HAL_GPIO_Init+0x23c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d025      	beq.n	800628e <HAL_GPIO_Init+0x21e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1a      	ldr	r2, [pc, #104]	@ (80062b0 <HAL_GPIO_Init+0x240>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01f      	beq.n	800628a <HAL_GPIO_Init+0x21a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a19      	ldr	r2, [pc, #100]	@ (80062b4 <HAL_GPIO_Init+0x244>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d019      	beq.n	8006286 <HAL_GPIO_Init+0x216>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a18      	ldr	r2, [pc, #96]	@ (80062b8 <HAL_GPIO_Init+0x248>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_GPIO_Init+0x212>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a17      	ldr	r2, [pc, #92]	@ (80062bc <HAL_GPIO_Init+0x24c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00d      	beq.n	800627e <HAL_GPIO_Init+0x20e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a16      	ldr	r2, [pc, #88]	@ (80062c0 <HAL_GPIO_Init+0x250>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <HAL_GPIO_Init+0x20a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a15      	ldr	r2, [pc, #84]	@ (80062c4 <HAL_GPIO_Init+0x254>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d101      	bne.n	8006276 <HAL_GPIO_Init+0x206>
 8006272:	2309      	movs	r3, #9
 8006274:	e029      	b.n	80062ca <HAL_GPIO_Init+0x25a>
 8006276:	230a      	movs	r3, #10
 8006278:	e027      	b.n	80062ca <HAL_GPIO_Init+0x25a>
 800627a:	2307      	movs	r3, #7
 800627c:	e025      	b.n	80062ca <HAL_GPIO_Init+0x25a>
 800627e:	2306      	movs	r3, #6
 8006280:	e023      	b.n	80062ca <HAL_GPIO_Init+0x25a>
 8006282:	2305      	movs	r3, #5
 8006284:	e021      	b.n	80062ca <HAL_GPIO_Init+0x25a>
 8006286:	2304      	movs	r3, #4
 8006288:	e01f      	b.n	80062ca <HAL_GPIO_Init+0x25a>
 800628a:	2303      	movs	r3, #3
 800628c:	e01d      	b.n	80062ca <HAL_GPIO_Init+0x25a>
 800628e:	2302      	movs	r3, #2
 8006290:	e01b      	b.n	80062ca <HAL_GPIO_Init+0x25a>
 8006292:	2301      	movs	r3, #1
 8006294:	e019      	b.n	80062ca <HAL_GPIO_Init+0x25a>
 8006296:	bf00      	nop
 8006298:	58000080 	.word	0x58000080
 800629c:	58024400 	.word	0x58024400
 80062a0:	58000400 	.word	0x58000400
 80062a4:	58020000 	.word	0x58020000
 80062a8:	58020400 	.word	0x58020400
 80062ac:	58020800 	.word	0x58020800
 80062b0:	58020c00 	.word	0x58020c00
 80062b4:	58021000 	.word	0x58021000
 80062b8:	58021400 	.word	0x58021400
 80062bc:	58021800 	.word	0x58021800
 80062c0:	58021c00 	.word	0x58021c00
 80062c4:	58022400 	.word	0x58022400
 80062c8:	2300      	movs	r3, #0
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	f002 0203 	and.w	r2, r2, #3
 80062d0:	0092      	lsls	r2, r2, #2
 80062d2:	4093      	lsls	r3, r2
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062da:	4938      	ldr	r1, [pc, #224]	@ (80063bc <HAL_GPIO_Init+0x34c>)
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	089b      	lsrs	r3, r3, #2
 80062e0:	3302      	adds	r3, #2
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	43db      	mvns	r3, r3
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4013      	ands	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800630e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	43db      	mvns	r3, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800633c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	43db      	mvns	r3, r3
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	4013      	ands	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	43db      	mvns	r3, r3
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	4013      	ands	r3, r2
 800637c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	3301      	adds	r3, #1
 800639c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	fa22 f303 	lsr.w	r3, r2, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f47f ae6b 	bne.w	8006084 <HAL_GPIO_Init+0x14>
  }
}
 80063ae:	bf00      	nop
 80063b0:	bf00      	nop
 80063b2:	3724      	adds	r7, #36	@ 0x24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	58000400 	.word	0x58000400

080063c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	807b      	strh	r3, [r7, #2]
 80063cc:	4613      	mov	r3, r2
 80063ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063d0:	787b      	ldrb	r3, [r7, #1]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063d6:	887a      	ldrh	r2, [r7, #2]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063dc:	e003      	b.n	80063e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063de:	887b      	ldrh	r3, [r7, #2]
 80063e0:	041a      	lsls	r2, r3, #16
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	619a      	str	r2, [r3, #24]
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	460b      	mov	r3, r1
 80063fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006404:	887a      	ldrh	r2, [r7, #2]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4013      	ands	r3, r2
 800640a:	041a      	lsls	r2, r3, #16
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	43d9      	mvns	r1, r3
 8006410:	887b      	ldrh	r3, [r7, #2]
 8006412:	400b      	ands	r3, r1
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	619a      	str	r2, [r3, #24]
}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006430:	4b19      	ldr	r3, [pc, #100]	@ (8006498 <HAL_PWREx_ConfigSupply+0x70>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b04      	cmp	r3, #4
 800643a:	d00a      	beq.n	8006452 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800643c:	4b16      	ldr	r3, [pc, #88]	@ (8006498 <HAL_PWREx_ConfigSupply+0x70>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d001      	beq.n	800644e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e01f      	b.n	800648e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e01d      	b.n	800648e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006452:	4b11      	ldr	r3, [pc, #68]	@ (8006498 <HAL_PWREx_ConfigSupply+0x70>)
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f023 0207 	bic.w	r2, r3, #7
 800645a:	490f      	ldr	r1, [pc, #60]	@ (8006498 <HAL_PWREx_ConfigSupply+0x70>)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4313      	orrs	r3, r2
 8006460:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006462:	f7fb f825 	bl	80014b0 <HAL_GetTick>
 8006466:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006468:	e009      	b.n	800647e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800646a:	f7fb f821 	bl	80014b0 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006478:	d901      	bls.n	800647e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e007      	b.n	800648e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800647e:	4b06      	ldr	r3, [pc, #24]	@ (8006498 <HAL_PWREx_ConfigSupply+0x70>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800648a:	d1ee      	bne.n	800646a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	58024800 	.word	0x58024800

0800649c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08c      	sub	sp, #48	@ 0x30
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e3c8      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8087 	beq.w	80065ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064bc:	4b88      	ldr	r3, [pc, #544]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064c6:	4b86      	ldr	r3, [pc, #536]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 80064c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ce:	2b10      	cmp	r3, #16
 80064d0:	d007      	beq.n	80064e2 <HAL_RCC_OscConfig+0x46>
 80064d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d4:	2b18      	cmp	r3, #24
 80064d6:	d110      	bne.n	80064fa <HAL_RCC_OscConfig+0x5e>
 80064d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d10b      	bne.n	80064fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e2:	4b7f      	ldr	r3, [pc, #508]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d06c      	beq.n	80065c8 <HAL_RCC_OscConfig+0x12c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d168      	bne.n	80065c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e3a2      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006502:	d106      	bne.n	8006512 <HAL_RCC_OscConfig+0x76>
 8006504:	4b76      	ldr	r3, [pc, #472]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a75      	ldr	r2, [pc, #468]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800650a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	e02e      	b.n	8006570 <HAL_RCC_OscConfig+0xd4>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10c      	bne.n	8006534 <HAL_RCC_OscConfig+0x98>
 800651a:	4b71      	ldr	r3, [pc, #452]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a70      	ldr	r2, [pc, #448]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	4b6e      	ldr	r3, [pc, #440]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a6d      	ldr	r2, [pc, #436]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800652c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e01d      	b.n	8006570 <HAL_RCC_OscConfig+0xd4>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800653c:	d10c      	bne.n	8006558 <HAL_RCC_OscConfig+0xbc>
 800653e:	4b68      	ldr	r3, [pc, #416]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a67      	ldr	r2, [pc, #412]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	4b65      	ldr	r3, [pc, #404]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a64      	ldr	r2, [pc, #400]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	e00b      	b.n	8006570 <HAL_RCC_OscConfig+0xd4>
 8006558:	4b61      	ldr	r3, [pc, #388]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a60      	ldr	r2, [pc, #384]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800655e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	4b5e      	ldr	r3, [pc, #376]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a5d      	ldr	r2, [pc, #372]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800656a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800656e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d013      	beq.n	80065a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fa ff9a 	bl	80014b0 <HAL_GetTick>
 800657c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006580:	f7fa ff96 	bl	80014b0 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b64      	cmp	r3, #100	@ 0x64
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e356      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006592:	4b53      	ldr	r3, [pc, #332]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f0      	beq.n	8006580 <HAL_RCC_OscConfig+0xe4>
 800659e:	e014      	b.n	80065ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a0:	f7fa ff86 	bl	80014b0 <HAL_GetTick>
 80065a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a8:	f7fa ff82 	bl	80014b0 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b64      	cmp	r3, #100	@ 0x64
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e342      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065ba:	4b49      	ldr	r3, [pc, #292]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f0      	bne.n	80065a8 <HAL_RCC_OscConfig+0x10c>
 80065c6:	e000      	b.n	80065ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 808c 	beq.w	80066f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d8:	4b41      	ldr	r3, [pc, #260]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065e2:	4b3f      	ldr	r3, [pc, #252]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 80065e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_RCC_OscConfig+0x162>
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	2b18      	cmp	r3, #24
 80065f2:	d137      	bne.n	8006664 <HAL_RCC_OscConfig+0x1c8>
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d132      	bne.n	8006664 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065fe:	4b38      	ldr	r3, [pc, #224]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_RCC_OscConfig+0x17a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e314      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006616:	4b32      	ldr	r3, [pc, #200]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 0219 	bic.w	r2, r3, #25
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	492f      	ldr	r1, [pc, #188]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006624:	4313      	orrs	r3, r2
 8006626:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fa ff42 	bl	80014b0 <HAL_GetTick>
 800662c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006630:	f7fa ff3e 	bl	80014b0 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e2fe      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006642:	4b27      	ldr	r3, [pc, #156]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0f0      	beq.n	8006630 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664e:	4b24      	ldr	r3, [pc, #144]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	061b      	lsls	r3, r3, #24
 800665c:	4920      	ldr	r1, [pc, #128]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800665e:	4313      	orrs	r3, r2
 8006660:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006662:	e045      	b.n	80066f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d026      	beq.n	80066ba <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800666c:	4b1c      	ldr	r3, [pc, #112]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f023 0219 	bic.w	r2, r3, #25
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	4919      	ldr	r1, [pc, #100]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800667a:	4313      	orrs	r3, r2
 800667c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667e:	f7fa ff17 	bl	80014b0 <HAL_GetTick>
 8006682:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006686:	f7fa ff13 	bl	80014b0 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e2d3      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006698:	4b11      	ldr	r3, [pc, #68]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a4:	4b0e      	ldr	r3, [pc, #56]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	061b      	lsls	r3, r3, #24
 80066b2:	490b      	ldr	r1, [pc, #44]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	604b      	str	r3, [r1, #4]
 80066b8:	e01a      	b.n	80066f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ba:	4b09      	ldr	r3, [pc, #36]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a08      	ldr	r2, [pc, #32]	@ (80066e0 <HAL_RCC_OscConfig+0x244>)
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c6:	f7fa fef3 	bl	80014b0 <HAL_GetTick>
 80066ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066cc:	e00a      	b.n	80066e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ce:	f7fa feef 	bl	80014b0 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d903      	bls.n	80066e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e2af      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
 80066e0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066e4:	4b96      	ldr	r3, [pc, #600]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1ee      	bne.n	80066ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d06a      	beq.n	80067d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066fc:	4b90      	ldr	r3, [pc, #576]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006704:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006706:	4b8e      	ldr	r3, [pc, #568]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b08      	cmp	r3, #8
 8006710:	d007      	beq.n	8006722 <HAL_RCC_OscConfig+0x286>
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b18      	cmp	r3, #24
 8006716:	d11b      	bne.n	8006750 <HAL_RCC_OscConfig+0x2b4>
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b01      	cmp	r3, #1
 8006720:	d116      	bne.n	8006750 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006722:	4b87      	ldr	r3, [pc, #540]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672a:	2b00      	cmp	r3, #0
 800672c:	d005      	beq.n	800673a <HAL_RCC_OscConfig+0x29e>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	2b80      	cmp	r3, #128	@ 0x80
 8006734:	d001      	beq.n	800673a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e282      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800673a:	4b81      	ldr	r3, [pc, #516]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	061b      	lsls	r3, r3, #24
 8006748:	497d      	ldr	r1, [pc, #500]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 800674a:	4313      	orrs	r3, r2
 800674c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800674e:	e040      	b.n	80067d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d023      	beq.n	80067a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006758:	4b79      	ldr	r3, [pc, #484]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a78      	ldr	r2, [pc, #480]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 800675e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fa fea4 	bl	80014b0 <HAL_GetTick>
 8006768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800676c:	f7fa fea0 	bl	80014b0 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e260      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800677e:	4b70      	ldr	r3, [pc, #448]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0f0      	beq.n	800676c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800678a:	4b6d      	ldr	r3, [pc, #436]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	061b      	lsls	r3, r3, #24
 8006798:	4969      	ldr	r1, [pc, #420]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 800679a:	4313      	orrs	r3, r2
 800679c:	60cb      	str	r3, [r1, #12]
 800679e:	e018      	b.n	80067d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067a0:	4b67      	ldr	r3, [pc, #412]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a66      	ldr	r2, [pc, #408]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 80067a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fa fe80 	bl	80014b0 <HAL_GetTick>
 80067b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067b4:	f7fa fe7c 	bl	80014b0 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e23c      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067c6:	4b5e      	ldr	r3, [pc, #376]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d036      	beq.n	800684c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d019      	beq.n	800681a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067e6:	4b56      	ldr	r3, [pc, #344]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 80067e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ea:	4a55      	ldr	r2, [pc, #340]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f2:	f7fa fe5d 	bl	80014b0 <HAL_GetTick>
 80067f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067f8:	e008      	b.n	800680c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067fa:	f7fa fe59 	bl	80014b0 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e219      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800680c:	4b4c      	ldr	r3, [pc, #304]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 800680e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0f0      	beq.n	80067fa <HAL_RCC_OscConfig+0x35e>
 8006818:	e018      	b.n	800684c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800681a:	4b49      	ldr	r3, [pc, #292]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 800681c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800681e:	4a48      	ldr	r2, [pc, #288]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006820:	f023 0301 	bic.w	r3, r3, #1
 8006824:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006826:	f7fa fe43 	bl	80014b0 <HAL_GetTick>
 800682a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800682c:	e008      	b.n	8006840 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800682e:	f7fa fe3f 	bl	80014b0 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e1ff      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006840:	4b3f      	ldr	r3, [pc, #252]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f0      	bne.n	800682e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d036      	beq.n	80068c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d019      	beq.n	8006894 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006860:	4b37      	ldr	r3, [pc, #220]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a36      	ldr	r2, [pc, #216]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006866:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800686a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800686c:	f7fa fe20 	bl	80014b0 <HAL_GetTick>
 8006870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006874:	f7fa fe1c 	bl	80014b0 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e1dc      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006886:	4b2e      	ldr	r3, [pc, #184]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f0      	beq.n	8006874 <HAL_RCC_OscConfig+0x3d8>
 8006892:	e018      	b.n	80068c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006894:	4b2a      	ldr	r3, [pc, #168]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a29      	ldr	r2, [pc, #164]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 800689a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800689e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068a0:	f7fa fe06 	bl	80014b0 <HAL_GetTick>
 80068a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068a8:	f7fa fe02 	bl	80014b0 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e1c2      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068ba:	4b21      	ldr	r3, [pc, #132]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8086 	beq.w	80069e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006944 <HAL_RCC_OscConfig+0x4a8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006944 <HAL_RCC_OscConfig+0x4a8>)
 80068da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068e0:	f7fa fde6 	bl	80014b0 <HAL_GetTick>
 80068e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e8:	f7fa fde2 	bl	80014b0 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b64      	cmp	r3, #100	@ 0x64
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e1a2      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068fa:	4b12      	ldr	r3, [pc, #72]	@ (8006944 <HAL_RCC_OscConfig+0x4a8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0f0      	beq.n	80068e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d106      	bne.n	800691c <HAL_RCC_OscConfig+0x480>
 800690e:	4b0c      	ldr	r3, [pc, #48]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006912:	4a0b      	ldr	r2, [pc, #44]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	6713      	str	r3, [r2, #112]	@ 0x70
 800691a:	e032      	b.n	8006982 <HAL_RCC_OscConfig+0x4e6>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d111      	bne.n	8006948 <HAL_RCC_OscConfig+0x4ac>
 8006924:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006928:	4a05      	ldr	r2, [pc, #20]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006930:	4b03      	ldr	r3, [pc, #12]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006934:	4a02      	ldr	r2, [pc, #8]	@ (8006940 <HAL_RCC_OscConfig+0x4a4>)
 8006936:	f023 0304 	bic.w	r3, r3, #4
 800693a:	6713      	str	r3, [r2, #112]	@ 0x70
 800693c:	e021      	b.n	8006982 <HAL_RCC_OscConfig+0x4e6>
 800693e:	bf00      	nop
 8006940:	58024400 	.word	0x58024400
 8006944:	58024800 	.word	0x58024800
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	2b05      	cmp	r3, #5
 800694e:	d10c      	bne.n	800696a <HAL_RCC_OscConfig+0x4ce>
 8006950:	4b83      	ldr	r3, [pc, #524]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006954:	4a82      	ldr	r2, [pc, #520]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006956:	f043 0304 	orr.w	r3, r3, #4
 800695a:	6713      	str	r3, [r2, #112]	@ 0x70
 800695c:	4b80      	ldr	r3, [pc, #512]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 800695e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006960:	4a7f      	ldr	r2, [pc, #508]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	6713      	str	r3, [r2, #112]	@ 0x70
 8006968:	e00b      	b.n	8006982 <HAL_RCC_OscConfig+0x4e6>
 800696a:	4b7d      	ldr	r3, [pc, #500]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	4a7c      	ldr	r2, [pc, #496]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006970:	f023 0301 	bic.w	r3, r3, #1
 8006974:	6713      	str	r3, [r2, #112]	@ 0x70
 8006976:	4b7a      	ldr	r3, [pc, #488]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697a:	4a79      	ldr	r2, [pc, #484]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 800697c:	f023 0304 	bic.w	r3, r3, #4
 8006980:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d015      	beq.n	80069b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800698a:	f7fa fd91 	bl	80014b0 <HAL_GetTick>
 800698e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006990:	e00a      	b.n	80069a8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006992:	f7fa fd8d 	bl	80014b0 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e14b      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069a8:	4b6d      	ldr	r3, [pc, #436]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0ee      	beq.n	8006992 <HAL_RCC_OscConfig+0x4f6>
 80069b4:	e014      	b.n	80069e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b6:	f7fa fd7b 	bl	80014b0 <HAL_GetTick>
 80069ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069bc:	e00a      	b.n	80069d4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069be:	f7fa fd77 	bl	80014b0 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e135      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069d4:	4b62      	ldr	r3, [pc, #392]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1ee      	bne.n	80069be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 812a 	beq.w	8006c3e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069f2:	2b18      	cmp	r3, #24
 80069f4:	f000 80ba 	beq.w	8006b6c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	f040 8095 	bne.w	8006b2c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a02:	4b57      	ldr	r3, [pc, #348]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a56      	ldr	r2, [pc, #344]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006a08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0e:	f7fa fd4f 	bl	80014b0 <HAL_GetTick>
 8006a12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a14:	e008      	b.n	8006a28 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a16:	f7fa fd4b 	bl	80014b0 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e10b      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a28:	4b4d      	ldr	r3, [pc, #308]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1f0      	bne.n	8006a16 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a34:	4b4a      	ldr	r3, [pc, #296]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006a36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a38:	4b4a      	ldr	r3, [pc, #296]	@ (8006b64 <HAL_RCC_OscConfig+0x6c8>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a44:	0112      	lsls	r2, r2, #4
 8006a46:	430a      	orrs	r2, r1
 8006a48:	4945      	ldr	r1, [pc, #276]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a52:	3b01      	subs	r3, #1
 8006a54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	025b      	lsls	r3, r3, #9
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a76:	3b01      	subs	r3, #1
 8006a78:	061b      	lsls	r3, r3, #24
 8006a7a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a7e:	4938      	ldr	r1, [pc, #224]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a84:	4b36      	ldr	r3, [pc, #216]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a88:	4a35      	ldr	r2, [pc, #212]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a90:	4b33      	ldr	r3, [pc, #204]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006a92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a94:	4b34      	ldr	r3, [pc, #208]	@ (8006b68 <HAL_RCC_OscConfig+0x6cc>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a9c:	00d2      	lsls	r2, r2, #3
 8006a9e:	4930      	ldr	r1, [pc, #192]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa8:	f023 020c 	bic.w	r2, r3, #12
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab0:	492b      	ldr	r1, [pc, #172]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aba:	f023 0202 	bic.w	r2, r3, #2
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac2:	4927      	ldr	r1, [pc, #156]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ac8:	4b25      	ldr	r3, [pc, #148]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006acc:	4a24      	ldr	r2, [pc, #144]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad4:	4b22      	ldr	r3, [pc, #136]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	4a21      	ldr	r2, [pc, #132]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006ae6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006aec:	4b1c      	ldr	r3, [pc, #112]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006af8:	4b19      	ldr	r3, [pc, #100]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a18      	ldr	r2, [pc, #96]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b04:	f7fa fcd4 	bl	80014b0 <HAL_GetTick>
 8006b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b0c:	f7fa fcd0 	bl	80014b0 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e090      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b1e:	4b10      	ldr	r3, [pc, #64]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f0      	beq.n	8006b0c <HAL_RCC_OscConfig+0x670>
 8006b2a:	e088      	b.n	8006c3e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a0b      	ldr	r2, [pc, #44]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006b32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b38:	f7fa fcba 	bl	80014b0 <HAL_GetTick>
 8006b3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b40:	f7fa fcb6 	bl	80014b0 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e076      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b52:	4b03      	ldr	r3, [pc, #12]	@ (8006b60 <HAL_RCC_OscConfig+0x6c4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f0      	bne.n	8006b40 <HAL_RCC_OscConfig+0x6a4>
 8006b5e:	e06e      	b.n	8006c3e <HAL_RCC_OscConfig+0x7a2>
 8006b60:	58024400 	.word	0x58024400
 8006b64:	fffffc0c 	.word	0xfffffc0c
 8006b68:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b6c:	4b36      	ldr	r3, [pc, #216]	@ (8006c48 <HAL_RCC_OscConfig+0x7ac>)
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b72:	4b35      	ldr	r3, [pc, #212]	@ (8006c48 <HAL_RCC_OscConfig+0x7ac>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d031      	beq.n	8006be4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f003 0203 	and.w	r2, r3, #3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d12a      	bne.n	8006be4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	091b      	lsrs	r3, r3, #4
 8006b92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d122      	bne.n	8006be4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d11a      	bne.n	8006be4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	0a5b      	lsrs	r3, r3, #9
 8006bb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d111      	bne.n	8006be4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	0c1b      	lsrs	r3, r3, #16
 8006bc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d108      	bne.n	8006be4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	0e1b      	lsrs	r3, r3, #24
 8006bd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d001      	beq.n	8006be8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e02b      	b.n	8006c40 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006be8:	4b17      	ldr	r3, [pc, #92]	@ (8006c48 <HAL_RCC_OscConfig+0x7ac>)
 8006bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bec:	08db      	lsrs	r3, r3, #3
 8006bee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bf2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d01f      	beq.n	8006c3e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bfe:	4b12      	ldr	r3, [pc, #72]	@ (8006c48 <HAL_RCC_OscConfig+0x7ac>)
 8006c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c02:	4a11      	ldr	r2, [pc, #68]	@ (8006c48 <HAL_RCC_OscConfig+0x7ac>)
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c0a:	f7fa fc51 	bl	80014b0 <HAL_GetTick>
 8006c0e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c10:	bf00      	nop
 8006c12:	f7fa fc4d 	bl	80014b0 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d0f9      	beq.n	8006c12 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c48 <HAL_RCC_OscConfig+0x7ac>)
 8006c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c22:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <HAL_RCC_OscConfig+0x7b0>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c2a:	00d2      	lsls	r2, r2, #3
 8006c2c:	4906      	ldr	r1, [pc, #24]	@ (8006c48 <HAL_RCC_OscConfig+0x7ac>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c32:	4b05      	ldr	r3, [pc, #20]	@ (8006c48 <HAL_RCC_OscConfig+0x7ac>)
 8006c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c36:	4a04      	ldr	r2, [pc, #16]	@ (8006c48 <HAL_RCC_OscConfig+0x7ac>)
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3730      	adds	r7, #48	@ 0x30
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	58024400 	.word	0x58024400
 8006c4c:	ffff0007 	.word	0xffff0007

08006c50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e19c      	b.n	8006f9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c64:	4b8a      	ldr	r3, [pc, #552]	@ (8006e90 <HAL_RCC_ClockConfig+0x240>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d910      	bls.n	8006c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c72:	4b87      	ldr	r3, [pc, #540]	@ (8006e90 <HAL_RCC_ClockConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f023 020f 	bic.w	r2, r3, #15
 8006c7a:	4985      	ldr	r1, [pc, #532]	@ (8006e90 <HAL_RCC_ClockConfig+0x240>)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	4b83      	ldr	r3, [pc, #524]	@ (8006e90 <HAL_RCC_ClockConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e184      	b.n	8006f9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d010      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691a      	ldr	r2, [r3, #16]
 8006ca4:	4b7b      	ldr	r3, [pc, #492]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d908      	bls.n	8006cc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cb0:	4b78      	ldr	r3, [pc, #480]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	4975      	ldr	r1, [pc, #468]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d010      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695a      	ldr	r2, [r3, #20]
 8006cd2:	4b70      	ldr	r3, [pc, #448]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d908      	bls.n	8006cf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cde:	4b6d      	ldr	r3, [pc, #436]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	496a      	ldr	r1, [pc, #424]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d010      	beq.n	8006d1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	4b64      	ldr	r3, [pc, #400]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d908      	bls.n	8006d1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d0c:	4b61      	ldr	r3, [pc, #388]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	495e      	ldr	r1, [pc, #376]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d010      	beq.n	8006d4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	4b59      	ldr	r3, [pc, #356]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d908      	bls.n	8006d4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d3a:	4b56      	ldr	r3, [pc, #344]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	4953      	ldr	r1, [pc, #332]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d010      	beq.n	8006d7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d908      	bls.n	8006d7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d68:	4b4a      	ldr	r3, [pc, #296]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	f023 020f 	bic.w	r2, r3, #15
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	4947      	ldr	r1, [pc, #284]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d055      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d86:	4b43      	ldr	r3, [pc, #268]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	4940      	ldr	r1, [pc, #256]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d107      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006da0:	4b3c      	ldr	r3, [pc, #240]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d121      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0f6      	b.n	8006f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d107      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006db8:	4b36      	ldr	r3, [pc, #216]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d115      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0ea      	b.n	8006f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d107      	bne.n	8006de0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006dd0:	4b30      	ldr	r3, [pc, #192]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d109      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e0de      	b.n	8006f9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006de0:	4b2c      	ldr	r3, [pc, #176]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0d6      	b.n	8006f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006df0:	4b28      	ldr	r3, [pc, #160]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f023 0207 	bic.w	r2, r3, #7
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	4925      	ldr	r1, [pc, #148]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e02:	f7fa fb55 	bl	80014b0 <HAL_GetTick>
 8006e06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e08:	e00a      	b.n	8006e20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e0a:	f7fa fb51 	bl	80014b0 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e0be      	b.n	8006f9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e20:	4b1c      	ldr	r3, [pc, #112]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d1eb      	bne.n	8006e0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d010      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	4b14      	ldr	r3, [pc, #80]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d208      	bcs.n	8006e60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e4e:	4b11      	ldr	r3, [pc, #68]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	f023 020f 	bic.w	r2, r3, #15
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	490e      	ldr	r1, [pc, #56]	@ (8006e94 <HAL_RCC_ClockConfig+0x244>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e60:	4b0b      	ldr	r3, [pc, #44]	@ (8006e90 <HAL_RCC_ClockConfig+0x240>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d214      	bcs.n	8006e98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6e:	4b08      	ldr	r3, [pc, #32]	@ (8006e90 <HAL_RCC_ClockConfig+0x240>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f023 020f 	bic.w	r2, r3, #15
 8006e76:	4906      	ldr	r1, [pc, #24]	@ (8006e90 <HAL_RCC_ClockConfig+0x240>)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7e:	4b04      	ldr	r3, [pc, #16]	@ (8006e90 <HAL_RCC_ClockConfig+0x240>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d005      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e086      	b.n	8006f9e <HAL_RCC_ClockConfig+0x34e>
 8006e90:	52002000 	.word	0x52002000
 8006e94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d010      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d208      	bcs.n	8006ec6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	4939      	ldr	r1, [pc, #228]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d010      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	4b34      	ldr	r3, [pc, #208]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d208      	bcs.n	8006ef4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ee2:	4b31      	ldr	r3, [pc, #196]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	492e      	ldr	r1, [pc, #184]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d010      	beq.n	8006f22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	4b28      	ldr	r3, [pc, #160]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d208      	bcs.n	8006f22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f10:	4b25      	ldr	r3, [pc, #148]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	4922      	ldr	r1, [pc, #136]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d010      	beq.n	8006f50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69da      	ldr	r2, [r3, #28]
 8006f32:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d208      	bcs.n	8006f50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	4917      	ldr	r1, [pc, #92]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f50:	f000 f844 	bl	8006fdc <HAL_RCC_GetSysClockFreq>
 8006f54:	4602      	mov	r2, r0
 8006f56:	4b14      	ldr	r3, [pc, #80]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	4912      	ldr	r1, [pc, #72]	@ (8006fac <HAL_RCC_ClockConfig+0x35c>)
 8006f62:	5ccb      	ldrb	r3, [r1, r3]
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa8 <HAL_RCC_ClockConfig+0x358>)
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	4a0d      	ldr	r2, [pc, #52]	@ (8006fac <HAL_RCC_ClockConfig+0x35c>)
 8006f78:	5cd3      	ldrb	r3, [r2, r3]
 8006f7a:	f003 031f 	and.w	r3, r3, #31
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
 8006f84:	4a0a      	ldr	r2, [pc, #40]	@ (8006fb0 <HAL_RCC_ClockConfig+0x360>)
 8006f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f88:	4a0a      	ldr	r2, [pc, #40]	@ (8006fb4 <HAL_RCC_ClockConfig+0x364>)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb8 <HAL_RCC_ClockConfig+0x368>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fa fa42 	bl	800141c <HAL_InitTick>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	0800c4c0 	.word	0x0800c4c0
 8006fb0:	24000004 	.word	0x24000004
 8006fb4:	24000000 	.word	0x24000000
 8006fb8:	24000008 	.word	0x24000008

08006fbc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8006fc0:	4b05      	ldr	r3, [pc, #20]	@ (8006fd8 <HAL_RCC_EnableCSS+0x1c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a04      	ldr	r2, [pc, #16]	@ (8006fd8 <HAL_RCC_EnableCSS+0x1c>)
 8006fc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fca:	6013      	str	r3, [r2, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	58024400 	.word	0x58024400

08006fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b089      	sub	sp, #36	@ 0x24
 8006fe0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fe2:	4bb3      	ldr	r3, [pc, #716]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fea:	2b18      	cmp	r3, #24
 8006fec:	f200 8155 	bhi.w	800729a <HAL_RCC_GetSysClockFreq+0x2be>
 8006ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	0800705d 	.word	0x0800705d
 8006ffc:	0800729b 	.word	0x0800729b
 8007000:	0800729b 	.word	0x0800729b
 8007004:	0800729b 	.word	0x0800729b
 8007008:	0800729b 	.word	0x0800729b
 800700c:	0800729b 	.word	0x0800729b
 8007010:	0800729b 	.word	0x0800729b
 8007014:	0800729b 	.word	0x0800729b
 8007018:	08007083 	.word	0x08007083
 800701c:	0800729b 	.word	0x0800729b
 8007020:	0800729b 	.word	0x0800729b
 8007024:	0800729b 	.word	0x0800729b
 8007028:	0800729b 	.word	0x0800729b
 800702c:	0800729b 	.word	0x0800729b
 8007030:	0800729b 	.word	0x0800729b
 8007034:	0800729b 	.word	0x0800729b
 8007038:	08007089 	.word	0x08007089
 800703c:	0800729b 	.word	0x0800729b
 8007040:	0800729b 	.word	0x0800729b
 8007044:	0800729b 	.word	0x0800729b
 8007048:	0800729b 	.word	0x0800729b
 800704c:	0800729b 	.word	0x0800729b
 8007050:	0800729b 	.word	0x0800729b
 8007054:	0800729b 	.word	0x0800729b
 8007058:	0800708f 	.word	0x0800708f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800705c:	4b94      	ldr	r3, [pc, #592]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b00      	cmp	r3, #0
 8007066:	d009      	beq.n	800707c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007068:	4b91      	ldr	r3, [pc, #580]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	08db      	lsrs	r3, r3, #3
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	4a90      	ldr	r2, [pc, #576]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
 8007078:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800707a:	e111      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800707c:	4b8d      	ldr	r3, [pc, #564]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800707e:	61bb      	str	r3, [r7, #24]
      break;
 8007080:	e10e      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007082:	4b8d      	ldr	r3, [pc, #564]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007084:	61bb      	str	r3, [r7, #24]
      break;
 8007086:	e10b      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007088:	4b8c      	ldr	r3, [pc, #560]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800708a:	61bb      	str	r3, [r7, #24]
      break;
 800708c:	e108      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800708e:	4b88      	ldr	r3, [pc, #544]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007092:	f003 0303 	and.w	r3, r3, #3
 8007096:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007098:	4b85      	ldr	r3, [pc, #532]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	091b      	lsrs	r3, r3, #4
 800709e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070a4:	4b82      	ldr	r3, [pc, #520]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070ae:	4b80      	ldr	r3, [pc, #512]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b2:	08db      	lsrs	r3, r3, #3
 80070b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80e1 	beq.w	8007294 <HAL_RCC_GetSysClockFreq+0x2b8>
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	f000 8083 	beq.w	80071e0 <HAL_RCC_GetSysClockFreq+0x204>
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	f200 80a1 	bhi.w	8007224 <HAL_RCC_GetSysClockFreq+0x248>
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <HAL_RCC_GetSysClockFreq+0x114>
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d056      	beq.n	800719c <HAL_RCC_GetSysClockFreq+0x1c0>
 80070ee:	e099      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070f0:	4b6f      	ldr	r3, [pc, #444]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0320 	and.w	r3, r3, #32
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d02d      	beq.n	8007158 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070fc:	4b6c      	ldr	r3, [pc, #432]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	08db      	lsrs	r3, r3, #3
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	4a6b      	ldr	r2, [pc, #428]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007108:	fa22 f303 	lsr.w	r3, r2, r3
 800710c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	ee07 3a90 	vmov	s15, r3
 8007114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007126:	4b62      	ldr	r3, [pc, #392]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007136:	ed97 6a02 	vldr	s12, [r7, #8]
 800713a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80072c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800713e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007152:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007156:	e087      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007162:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80072c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716a:	4b51      	ldr	r3, [pc, #324]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800716c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717a:	ed97 6a02 	vldr	s12, [r7, #8]
 800717e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80072c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800719a:	e065      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80072c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ae:	4b40      	ldr	r3, [pc, #256]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071be:	ed97 6a02 	vldr	s12, [r7, #8]
 80071c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80072c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071de:	e043      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80072cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f2:	4b2f      	ldr	r3, [pc, #188]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007202:	ed97 6a02 	vldr	s12, [r7, #8]
 8007206:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80072c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800720a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007222:	e021      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80072c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007236:	4b1e      	ldr	r3, [pc, #120]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007246:	ed97 6a02 	vldr	s12, [r7, #8]
 800724a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80072c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800724e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800725a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800725e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007266:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007268:	4b11      	ldr	r3, [pc, #68]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800726a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726c:	0a5b      	lsrs	r3, r3, #9
 800726e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007272:	3301      	adds	r3, #1
 8007274:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007280:	edd7 6a07 	vldr	s13, [r7, #28]
 8007284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728c:	ee17 3a90 	vmov	r3, s15
 8007290:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007292:	e005      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	61bb      	str	r3, [r7, #24]
      break;
 8007298:	e002      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800729a:	4b07      	ldr	r3, [pc, #28]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800729c:	61bb      	str	r3, [r7, #24]
      break;
 800729e:	bf00      	nop
  }

  return sysclockfreq;
 80072a0:	69bb      	ldr	r3, [r7, #24]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3724      	adds	r7, #36	@ 0x24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	58024400 	.word	0x58024400
 80072b4:	03d09000 	.word	0x03d09000
 80072b8:	003d0900 	.word	0x003d0900
 80072bc:	017d7840 	.word	0x017d7840
 80072c0:	46000000 	.word	0x46000000
 80072c4:	4c742400 	.word	0x4c742400
 80072c8:	4a742400 	.word	0x4a742400
 80072cc:	4bbebc20 	.word	0x4bbebc20

080072d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072d6:	f7ff fe81 	bl	8006fdc <HAL_RCC_GetSysClockFreq>
 80072da:	4602      	mov	r2, r0
 80072dc:	4b10      	ldr	r3, [pc, #64]	@ (8007320 <HAL_RCC_GetHCLKFreq+0x50>)
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	0a1b      	lsrs	r3, r3, #8
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	490f      	ldr	r1, [pc, #60]	@ (8007324 <HAL_RCC_GetHCLKFreq+0x54>)
 80072e8:	5ccb      	ldrb	r3, [r1, r3]
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	fa22 f303 	lsr.w	r3, r2, r3
 80072f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007320 <HAL_RCC_GetHCLKFreq+0x50>)
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	f003 030f 	and.w	r3, r3, #15
 80072fc:	4a09      	ldr	r2, [pc, #36]	@ (8007324 <HAL_RCC_GetHCLKFreq+0x54>)
 80072fe:	5cd3      	ldrb	r3, [r2, r3]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	fa22 f303 	lsr.w	r3, r2, r3
 800730a:	4a07      	ldr	r2, [pc, #28]	@ (8007328 <HAL_RCC_GetHCLKFreq+0x58>)
 800730c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800730e:	4a07      	ldr	r2, [pc, #28]	@ (800732c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007314:	4b04      	ldr	r3, [pc, #16]	@ (8007328 <HAL_RCC_GetHCLKFreq+0x58>)
 8007316:	681b      	ldr	r3, [r3, #0]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	58024400 	.word	0x58024400
 8007324:	0800c4c0 	.word	0x0800c4c0
 8007328:	24000004 	.word	0x24000004
 800732c:	24000000 	.word	0x24000000

08007330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007334:	f7ff ffcc 	bl	80072d0 <HAL_RCC_GetHCLKFreq>
 8007338:	4602      	mov	r2, r0
 800733a:	4b06      	ldr	r3, [pc, #24]	@ (8007354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	091b      	lsrs	r3, r3, #4
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	4904      	ldr	r1, [pc, #16]	@ (8007358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007346:	5ccb      	ldrb	r3, [r1, r3]
 8007348:	f003 031f 	and.w	r3, r3, #31
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	58024400 	.word	0x58024400
 8007358:	0800c4c0 	.word	0x0800c4c0

0800735c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007360:	f7ff ffb6 	bl	80072d0 <HAL_RCC_GetHCLKFreq>
 8007364:	4602      	mov	r2, r0
 8007366:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	0a1b      	lsrs	r3, r3, #8
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	4904      	ldr	r1, [pc, #16]	@ (8007384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007372:	5ccb      	ldrb	r3, [r1, r3]
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800737c:	4618      	mov	r0, r3
 800737e:	bd80      	pop	{r7, pc}
 8007380:	58024400 	.word	0x58024400
 8007384:	0800c4c0 	.word	0x0800c4c0

08007388 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800738c:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <HAL_RCC_NMI_IRQHandler+0x24>)
 800738e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007398:	d105      	bne.n	80073a6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800739a:	f000 f809 	bl	80073b0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800739e:	4b03      	ldr	r3, [pc, #12]	@ (80073ac <HAL_RCC_NMI_IRQHandler+0x24>)
 80073a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80073a4:	669a      	str	r2, [r3, #104]	@ 0x68
  }
}
 80073a6:	bf00      	nop
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	58024400 	.word	0x58024400

080073b0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073c4:	b0c6      	sub	sp, #280	@ 0x118
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073d2:	2300      	movs	r3, #0
 80073d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80073e4:	2500      	movs	r5, #0
 80073e6:	ea54 0305 	orrs.w	r3, r4, r5
 80073ea:	d049      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073f6:	d02f      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80073f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073fc:	d828      	bhi.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80073fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007402:	d01a      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007404:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007408:	d822      	bhi.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800740e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007412:	d007      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007414:	e01c      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007416:	4bab      	ldr	r3, [pc, #684]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741a:	4aaa      	ldr	r2, [pc, #680]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800741c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007420:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007422:	e01a      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007428:	3308      	adds	r3, #8
 800742a:	2102      	movs	r1, #2
 800742c:	4618      	mov	r0, r3
 800742e:	f002 fa49 	bl	80098c4 <RCCEx_PLL2_Config>
 8007432:	4603      	mov	r3, r0
 8007434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007438:	e00f      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800743a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743e:	3328      	adds	r3, #40	@ 0x28
 8007440:	2102      	movs	r1, #2
 8007442:	4618      	mov	r0, r3
 8007444:	f002 faf0 	bl	8009a28 <RCCEx_PLL3_Config>
 8007448:	4603      	mov	r3, r0
 800744a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800744e:	e004      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007456:	e000      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800745a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007462:	4b98      	ldr	r3, [pc, #608]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007466:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800746a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007470:	4a94      	ldr	r2, [pc, #592]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007472:	430b      	orrs	r3, r1
 8007474:	6513      	str	r3, [r2, #80]	@ 0x50
 8007476:	e003      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800747c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800748c:	f04f 0900 	mov.w	r9, #0
 8007490:	ea58 0309 	orrs.w	r3, r8, r9
 8007494:	d047      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800749c:	2b04      	cmp	r3, #4
 800749e:	d82a      	bhi.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80074a0:	a201      	add	r2, pc, #4	@ (adr r2, 80074a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074bd 	.word	0x080074bd
 80074ac:	080074cb 	.word	0x080074cb
 80074b0:	080074e1 	.word	0x080074e1
 80074b4:	080074ff 	.word	0x080074ff
 80074b8:	080074ff 	.word	0x080074ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074bc:	4b81      	ldr	r3, [pc, #516]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c0:	4a80      	ldr	r2, [pc, #512]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074c8:	e01a      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	3308      	adds	r3, #8
 80074d0:	2100      	movs	r1, #0
 80074d2:	4618      	mov	r0, r3
 80074d4:	f002 f9f6 	bl	80098c4 <RCCEx_PLL2_Config>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074de:	e00f      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	3328      	adds	r3, #40	@ 0x28
 80074e6:	2100      	movs	r1, #0
 80074e8:	4618      	mov	r0, r3
 80074ea:	f002 fa9d 	bl	8009a28 <RCCEx_PLL3_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074f4:	e004      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074fc:	e000      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80074fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007508:	4b6e      	ldr	r3, [pc, #440]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800750a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800750c:	f023 0107 	bic.w	r1, r3, #7
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007516:	4a6b      	ldr	r2, [pc, #428]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007518:	430b      	orrs	r3, r1
 800751a:	6513      	str	r3, [r2, #80]	@ 0x50
 800751c:	e003      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007522:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007532:	f04f 0b00 	mov.w	fp, #0
 8007536:	ea5a 030b 	orrs.w	r3, sl, fp
 800753a:	d05b      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800753c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007540:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007544:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007548:	d03b      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800754a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800754e:	d834      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007550:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007554:	d037      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007556:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800755a:	d82e      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800755c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007560:	d033      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007562:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007566:	d828      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007568:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800756c:	d01a      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800756e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007572:	d822      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800757c:	d007      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800757e:	e01c      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007580:	4b50      	ldr	r3, [pc, #320]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007584:	4a4f      	ldr	r2, [pc, #316]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800758a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800758c:	e01e      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007592:	3308      	adds	r3, #8
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f002 f994 	bl	80098c4 <RCCEx_PLL2_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075a2:	e013      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a8:	3328      	adds	r3, #40	@ 0x28
 80075aa:	2100      	movs	r1, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f002 fa3b 	bl	8009a28 <RCCEx_PLL3_Config>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075b8:	e008      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075c0:	e004      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80075c2:	bf00      	nop
 80075c4:	e002      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80075c6:	bf00      	nop
 80075c8:	e000      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80075ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10b      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075d4:	4b3b      	ldr	r3, [pc, #236]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80075e4:	4a37      	ldr	r2, [pc, #220]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075e6:	430b      	orrs	r3, r1
 80075e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80075ea:	e003      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007600:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800760a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800760e:	460b      	mov	r3, r1
 8007610:	4313      	orrs	r3, r2
 8007612:	d05d      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007618:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800761c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007620:	d03b      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007622:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007626:	d834      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007628:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800762c:	d037      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800762e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007632:	d82e      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007634:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007638:	d033      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800763a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800763e:	d828      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007640:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007644:	d01a      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800764a:	d822      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007654:	d007      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007656:	e01c      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007658:	4b1a      	ldr	r3, [pc, #104]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	4a19      	ldr	r2, [pc, #100]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800765e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007664:	e01e      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766a:	3308      	adds	r3, #8
 800766c:	2100      	movs	r1, #0
 800766e:	4618      	mov	r0, r3
 8007670:	f002 f928 	bl	80098c4 <RCCEx_PLL2_Config>
 8007674:	4603      	mov	r3, r0
 8007676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800767a:	e013      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007680:	3328      	adds	r3, #40	@ 0x28
 8007682:	2100      	movs	r1, #0
 8007684:	4618      	mov	r0, r3
 8007686:	f002 f9cf 	bl	8009a28 <RCCEx_PLL3_Config>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007690:	e008      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007698:	e004      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800769a:	bf00      	nop
 800769c:	e002      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80076a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10d      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80076bc:	4a01      	ldr	r2, [pc, #4]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076be:	430b      	orrs	r3, r1
 80076c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80076c2:	e005      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80076c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80076d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80076dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80076e0:	2300      	movs	r3, #0
 80076e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80076e6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4313      	orrs	r3, r2
 80076ee:	d03a      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f6:	2b30      	cmp	r3, #48	@ 0x30
 80076f8:	d01f      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80076fa:	2b30      	cmp	r3, #48	@ 0x30
 80076fc:	d819      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d00c      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007702:	2b20      	cmp	r3, #32
 8007704:	d815      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d019      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800770a:	2b10      	cmp	r3, #16
 800770c:	d111      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800770e:	4baa      	ldr	r3, [pc, #680]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007712:	4aa9      	ldr	r2, [pc, #676]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007718:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800771a:	e011      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800771c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007720:	3308      	adds	r3, #8
 8007722:	2102      	movs	r1, #2
 8007724:	4618      	mov	r0, r3
 8007726:	f002 f8cd 	bl	80098c4 <RCCEx_PLL2_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007730:	e006      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007738:	e002      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800773a:	bf00      	nop
 800773c:	e000      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800773e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007740:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007748:	4b9b      	ldr	r3, [pc, #620]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800774a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800774c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007756:	4a98      	ldr	r2, [pc, #608]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007758:	430b      	orrs	r3, r1
 800775a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800775c:	e003      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007762:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007772:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007776:	2300      	movs	r3, #0
 8007778:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800777c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007780:	460b      	mov	r3, r1
 8007782:	4313      	orrs	r3, r2
 8007784:	d051      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800778c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007790:	d035      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007796:	d82e      	bhi.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007798:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800779c:	d031      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800779e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077a2:	d828      	bhi.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80077a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077a8:	d01a      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80077aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ae:	d822      	bhi.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80077b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077b8:	d007      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80077ba:	e01c      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077bc:	4b7e      	ldr	r3, [pc, #504]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	4a7d      	ldr	r2, [pc, #500]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077c8:	e01c      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ce:	3308      	adds	r3, #8
 80077d0:	2100      	movs	r1, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f002 f876 	bl	80098c4 <RCCEx_PLL2_Config>
 80077d8:	4603      	mov	r3, r0
 80077da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077de:	e011      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e4:	3328      	adds	r3, #40	@ 0x28
 80077e6:	2100      	movs	r1, #0
 80077e8:	4618      	mov	r0, r3
 80077ea:	f002 f91d 	bl	8009a28 <RCCEx_PLL3_Config>
 80077ee:	4603      	mov	r3, r0
 80077f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077f4:	e006      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077fc:	e002      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80077fe:	bf00      	nop
 8007800:	e000      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800780c:	4b6a      	ldr	r3, [pc, #424]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800780e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007810:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800781a:	4a67      	ldr	r2, [pc, #412]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800781c:	430b      	orrs	r3, r1
 800781e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007820:	e003      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007822:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007826:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007836:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800783a:	2300      	movs	r3, #0
 800783c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007840:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007844:	460b      	mov	r3, r1
 8007846:	4313      	orrs	r3, r2
 8007848:	d053      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800784a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007854:	d033      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007856:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800785a:	d82c      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800785c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007860:	d02f      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007862:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007866:	d826      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007868:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800786c:	d02b      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800786e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007872:	d820      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007878:	d012      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800787a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800787e:	d81a      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007880:	2b00      	cmp	r3, #0
 8007882:	d022      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007888:	d115      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800788a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788e:	3308      	adds	r3, #8
 8007890:	2101      	movs	r1, #1
 8007892:	4618      	mov	r0, r3
 8007894:	f002 f816 	bl	80098c4 <RCCEx_PLL2_Config>
 8007898:	4603      	mov	r3, r0
 800789a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800789e:	e015      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a4:	3328      	adds	r3, #40	@ 0x28
 80078a6:	2101      	movs	r1, #1
 80078a8:	4618      	mov	r0, r3
 80078aa:	f002 f8bd 	bl	8009a28 <RCCEx_PLL3_Config>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078b4:	e00a      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078bc:	e006      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80078be:	bf00      	nop
 80078c0:	e004      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80078c2:	bf00      	nop
 80078c4:	e002      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80078c6:	bf00      	nop
 80078c8:	e000      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80078ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078d4:	4b38      	ldr	r3, [pc, #224]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078e2:	4a35      	ldr	r2, [pc, #212]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078e4:	430b      	orrs	r3, r1
 80078e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80078e8:	e003      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80078fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007902:	2300      	movs	r3, #0
 8007904:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007908:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800790c:	460b      	mov	r3, r1
 800790e:	4313      	orrs	r3, r2
 8007910:	d058      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800791a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800791e:	d033      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007920:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007924:	d82c      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800792a:	d02f      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800792c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007930:	d826      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007932:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007936:	d02b      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007938:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800793c:	d820      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800793e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007942:	d012      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007948:	d81a      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d022      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800794e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007952:	d115      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007958:	3308      	adds	r3, #8
 800795a:	2101      	movs	r1, #1
 800795c:	4618      	mov	r0, r3
 800795e:	f001 ffb1 	bl	80098c4 <RCCEx_PLL2_Config>
 8007962:	4603      	mov	r3, r0
 8007964:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007968:	e015      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796e:	3328      	adds	r3, #40	@ 0x28
 8007970:	2101      	movs	r1, #1
 8007972:	4618      	mov	r0, r3
 8007974:	f002 f858 	bl	8009a28 <RCCEx_PLL3_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800797e:	e00a      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007986:	e006      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007988:	bf00      	nop
 800798a:	e004      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800798c:	bf00      	nop
 800798e:	e002      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10e      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800799e:	4b06      	ldr	r3, [pc, #24]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80079a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80079ae:	4a02      	ldr	r2, [pc, #8]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079b0:	430b      	orrs	r3, r1
 80079b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80079b4:	e006      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80079b6:	bf00      	nop
 80079b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80079d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079d4:	2300      	movs	r3, #0
 80079d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80079da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80079de:	460b      	mov	r3, r1
 80079e0:	4313      	orrs	r3, r2
 80079e2:	d037      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ee:	d00e      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80079f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f4:	d816      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d018      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80079fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fe:	d111      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a00:	4bc4      	ldr	r3, [pc, #784]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a04:	4ac3      	ldr	r2, [pc, #780]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a0c:	e00f      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a12:	3308      	adds	r3, #8
 8007a14:	2101      	movs	r1, #1
 8007a16:	4618      	mov	r0, r3
 8007a18:	f001 ff54 	bl	80098c4 <RCCEx_PLL2_Config>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a22:	e004      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a2a:	e000      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a36:	4bb7      	ldr	r3, [pc, #732]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a44:	4ab3      	ldr	r2, [pc, #716]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a46:	430b      	orrs	r3, r1
 8007a48:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a4a:	e003      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a64:	2300      	movs	r3, #0
 8007a66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4313      	orrs	r3, r2
 8007a72:	d039      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d81c      	bhi.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007ac1 	.word	0x08007ac1
 8007a88:	08007a95 	.word	0x08007a95
 8007a8c:	08007aa3 	.word	0x08007aa3
 8007a90:	08007ac1 	.word	0x08007ac1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a94:	4b9f      	ldr	r3, [pc, #636]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a98:	4a9e      	ldr	r2, [pc, #632]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007aa0:	e00f      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	2102      	movs	r1, #2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f001 ff0a 	bl	80098c4 <RCCEx_PLL2_Config>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ab6:	e004      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007abe:	e000      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007aca:	4b92      	ldr	r3, [pc, #584]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ace:	f023 0103 	bic.w	r1, r3, #3
 8007ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ad8:	4a8e      	ldr	r2, [pc, #568]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ada:	430b      	orrs	r3, r1
 8007adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ade:	e003      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ae4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007af4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007af8:	2300      	movs	r3, #0
 8007afa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007afe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f000 8099 	beq.w	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b0a:	4b83      	ldr	r3, [pc, #524]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a82      	ldr	r2, [pc, #520]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b16:	f7f9 fccb 	bl	80014b0 <HAL_GetTick>
 8007b1a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b1e:	e00b      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b20:	f7f9 fcc6 	bl	80014b0 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b64      	cmp	r3, #100	@ 0x64
 8007b2e:	d903      	bls.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b36:	e005      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b38:	4b77      	ldr	r3, [pc, #476]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0ed      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d173      	bne.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b4c:	4b71      	ldr	r3, [pc, #452]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b58:	4053      	eors	r3, r2
 8007b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d015      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b62:	4b6c      	ldr	r3, [pc, #432]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b6a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b6e:	4b69      	ldr	r3, [pc, #420]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b72:	4a68      	ldr	r2, [pc, #416]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b78:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b7a:	4b66      	ldr	r3, [pc, #408]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7e:	4a65      	ldr	r2, [pc, #404]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b84:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b86:	4a63      	ldr	r2, [pc, #396]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b8c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b9a:	d118      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7f9 fc88 	bl	80014b0 <HAL_GetTick>
 8007ba0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ba4:	e00d      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba6:	f7f9 fc83 	bl	80014b0 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007bb0:	1ad2      	subs	r2, r2, r3
 8007bb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d903      	bls.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007bc0:	e005      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bc2:	4b54      	ldr	r3, [pc, #336]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0eb      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007bce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d129      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007be2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007be6:	d10e      	bne.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007be8:	4b4a      	ldr	r3, [pc, #296]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bf8:	091a      	lsrs	r2, r3, #4
 8007bfa:	4b48      	ldr	r3, [pc, #288]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	4a45      	ldr	r2, [pc, #276]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c00:	430b      	orrs	r3, r1
 8007c02:	6113      	str	r3, [r2, #16]
 8007c04:	e005      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007c06:	4b43      	ldr	r3, [pc, #268]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	4a42      	ldr	r2, [pc, #264]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c10:	6113      	str	r3, [r2, #16]
 8007c12:	4b40      	ldr	r3, [pc, #256]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c14:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c22:	4a3c      	ldr	r2, [pc, #240]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c24:	430b      	orrs	r3, r1
 8007c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c28:	e008      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007c32:	e003      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	f002 0301 	and.w	r3, r2, #1
 8007c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007c56:	460b      	mov	r3, r1
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f000 808f 	beq.w	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c64:	2b28      	cmp	r3, #40	@ 0x28
 8007c66:	d871      	bhi.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007c68:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007d55 	.word	0x08007d55
 8007c74:	08007d4d 	.word	0x08007d4d
 8007c78:	08007d4d 	.word	0x08007d4d
 8007c7c:	08007d4d 	.word	0x08007d4d
 8007c80:	08007d4d 	.word	0x08007d4d
 8007c84:	08007d4d 	.word	0x08007d4d
 8007c88:	08007d4d 	.word	0x08007d4d
 8007c8c:	08007d4d 	.word	0x08007d4d
 8007c90:	08007d21 	.word	0x08007d21
 8007c94:	08007d4d 	.word	0x08007d4d
 8007c98:	08007d4d 	.word	0x08007d4d
 8007c9c:	08007d4d 	.word	0x08007d4d
 8007ca0:	08007d4d 	.word	0x08007d4d
 8007ca4:	08007d4d 	.word	0x08007d4d
 8007ca8:	08007d4d 	.word	0x08007d4d
 8007cac:	08007d4d 	.word	0x08007d4d
 8007cb0:	08007d37 	.word	0x08007d37
 8007cb4:	08007d4d 	.word	0x08007d4d
 8007cb8:	08007d4d 	.word	0x08007d4d
 8007cbc:	08007d4d 	.word	0x08007d4d
 8007cc0:	08007d4d 	.word	0x08007d4d
 8007cc4:	08007d4d 	.word	0x08007d4d
 8007cc8:	08007d4d 	.word	0x08007d4d
 8007ccc:	08007d4d 	.word	0x08007d4d
 8007cd0:	08007d55 	.word	0x08007d55
 8007cd4:	08007d4d 	.word	0x08007d4d
 8007cd8:	08007d4d 	.word	0x08007d4d
 8007cdc:	08007d4d 	.word	0x08007d4d
 8007ce0:	08007d4d 	.word	0x08007d4d
 8007ce4:	08007d4d 	.word	0x08007d4d
 8007ce8:	08007d4d 	.word	0x08007d4d
 8007cec:	08007d4d 	.word	0x08007d4d
 8007cf0:	08007d55 	.word	0x08007d55
 8007cf4:	08007d4d 	.word	0x08007d4d
 8007cf8:	08007d4d 	.word	0x08007d4d
 8007cfc:	08007d4d 	.word	0x08007d4d
 8007d00:	08007d4d 	.word	0x08007d4d
 8007d04:	08007d4d 	.word	0x08007d4d
 8007d08:	08007d4d 	.word	0x08007d4d
 8007d0c:	08007d4d 	.word	0x08007d4d
 8007d10:	08007d55 	.word	0x08007d55
 8007d14:	58024400 	.word	0x58024400
 8007d18:	58024800 	.word	0x58024800
 8007d1c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d24:	3308      	adds	r3, #8
 8007d26:	2101      	movs	r1, #1
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 fdcb 	bl	80098c4 <RCCEx_PLL2_Config>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d34:	e00f      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3a:	3328      	adds	r3, #40	@ 0x28
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 fe72 	bl	8009a28 <RCCEx_PLL3_Config>
 8007d44:	4603      	mov	r3, r0
 8007d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d4a:	e004      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d52:	e000      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d5e:	4bbf      	ldr	r3, [pc, #764]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d62:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d6c:	4abb      	ldr	r2, [pc, #748]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d6e:	430b      	orrs	r3, r1
 8007d70:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d72:	e003      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f002 0302 	and.w	r3, r2, #2
 8007d88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	d041      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d824      	bhi.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007da6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007df9 	.word	0x08007df9
 8007db0:	08007dc5 	.word	0x08007dc5
 8007db4:	08007ddb 	.word	0x08007ddb
 8007db8:	08007df9 	.word	0x08007df9
 8007dbc:	08007df9 	.word	0x08007df9
 8007dc0:	08007df9 	.word	0x08007df9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc8:	3308      	adds	r3, #8
 8007dca:	2101      	movs	r1, #1
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 fd79 	bl	80098c4 <RCCEx_PLL2_Config>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dd8:	e00f      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dde:	3328      	adds	r3, #40	@ 0x28
 8007de0:	2101      	movs	r1, #1
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 fe20 	bl	8009a28 <RCCEx_PLL3_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dee:	e004      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007df6:	e000      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e02:	4b96      	ldr	r3, [pc, #600]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e06:	f023 0107 	bic.w	r1, r3, #7
 8007e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e10:	4a92      	ldr	r2, [pc, #584]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e12:	430b      	orrs	r3, r1
 8007e14:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e16:	e003      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f002 0304 	and.w	r3, r2, #4
 8007e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	d044      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e48:	2b05      	cmp	r3, #5
 8007e4a:	d825      	bhi.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e52:	bf00      	nop
 8007e54:	08007ea1 	.word	0x08007ea1
 8007e58:	08007e6d 	.word	0x08007e6d
 8007e5c:	08007e83 	.word	0x08007e83
 8007e60:	08007ea1 	.word	0x08007ea1
 8007e64:	08007ea1 	.word	0x08007ea1
 8007e68:	08007ea1 	.word	0x08007ea1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e70:	3308      	adds	r3, #8
 8007e72:	2101      	movs	r1, #1
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 fd25 	bl	80098c4 <RCCEx_PLL2_Config>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e80:	e00f      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e86:	3328      	adds	r3, #40	@ 0x28
 8007e88:	2101      	movs	r1, #1
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 fdcc 	bl	8009a28 <RCCEx_PLL3_Config>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e96:	e004      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e9e:	e000      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10b      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eae:	f023 0107 	bic.w	r1, r3, #7
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eba:	4a68      	ldr	r2, [pc, #416]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ec0:	e003      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ec6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	f002 0320 	and.w	r3, r2, #32
 8007ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007eda:	2300      	movs	r3, #0
 8007edc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ee0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	d055      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ef6:	d033      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007efc:	d82c      	bhi.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f02:	d02f      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f08:	d826      	bhi.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f0e:	d02b      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007f10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f14:	d820      	bhi.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f1a:	d012      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f20:	d81a      	bhi.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d022      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f2a:	d115      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f30:	3308      	adds	r3, #8
 8007f32:	2100      	movs	r1, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 fcc5 	bl	80098c4 <RCCEx_PLL2_Config>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f40:	e015      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f46:	3328      	adds	r3, #40	@ 0x28
 8007f48:	2102      	movs	r1, #2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fd6c 	bl	8009a28 <RCCEx_PLL3_Config>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f56:	e00a      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f5e:	e006      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f60:	bf00      	nop
 8007f62:	e004      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f64:	bf00      	nop
 8007f66:	e002      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f68:	bf00      	nop
 8007f6a:	e000      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10b      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f76:	4b39      	ldr	r3, [pc, #228]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f86:	4a35      	ldr	r2, [pc, #212]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f8c:	e003      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007fa2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007fac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	d058      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fbe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fc2:	d033      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007fc4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fc8:	d82c      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fce:	d02f      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fd4:	d826      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007fd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fda:	d02b      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007fdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fe0:	d820      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fe6:	d012      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fec:	d81a      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d022      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ff6:	d115      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	2100      	movs	r1, #0
 8008000:	4618      	mov	r0, r3
 8008002:	f001 fc5f 	bl	80098c4 <RCCEx_PLL2_Config>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800800c:	e015      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800800e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008012:	3328      	adds	r3, #40	@ 0x28
 8008014:	2102      	movs	r1, #2
 8008016:	4618      	mov	r0, r3
 8008018:	f001 fd06 	bl	8009a28 <RCCEx_PLL3_Config>
 800801c:	4603      	mov	r3, r0
 800801e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008022:	e00a      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800802a:	e006      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800802c:	bf00      	nop
 800802e:	e004      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008030:	bf00      	nop
 8008032:	e002      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008034:	bf00      	nop
 8008036:	e000      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800803a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10e      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008042:	4b06      	ldr	r3, [pc, #24]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008046:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800804a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008052:	4a02      	ldr	r2, [pc, #8]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008054:	430b      	orrs	r3, r1
 8008056:	6593      	str	r3, [r2, #88]	@ 0x58
 8008058:	e006      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800805a:	bf00      	nop
 800805c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008064:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008074:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008078:	2300      	movs	r3, #0
 800807a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800807e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008082:	460b      	mov	r3, r1
 8008084:	4313      	orrs	r3, r2
 8008086:	d055      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008090:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008094:	d033      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008096:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800809a:	d82c      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080a0:	d02f      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80080a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080a6:	d826      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80080a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080ac:	d02b      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80080ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080b2:	d820      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80080b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080b8:	d012      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80080ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080be:	d81a      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d022      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80080c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080c8:	d115      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ce:	3308      	adds	r3, #8
 80080d0:	2100      	movs	r1, #0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 fbf6 	bl	80098c4 <RCCEx_PLL2_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080de:	e015      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e4:	3328      	adds	r3, #40	@ 0x28
 80080e6:	2102      	movs	r1, #2
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 fc9d 	bl	8009a28 <RCCEx_PLL3_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080f4:	e00a      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080fc:	e006      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80080fe:	bf00      	nop
 8008100:	e004      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008102:	bf00      	nop
 8008104:	e002      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008106:	bf00      	nop
 8008108:	e000      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800810a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800810c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10b      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008114:	4ba0      	ldr	r3, [pc, #640]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008118:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008120:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008124:	4a9c      	ldr	r2, [pc, #624]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008126:	430b      	orrs	r3, r1
 8008128:	6593      	str	r3, [r2, #88]	@ 0x58
 800812a:	e003      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008130:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f002 0308 	and.w	r3, r2, #8
 8008140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008144:	2300      	movs	r3, #0
 8008146:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800814a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800814e:	460b      	mov	r3, r1
 8008150:	4313      	orrs	r3, r2
 8008152:	d01e      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800815c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008160:	d10c      	bne.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008166:	3328      	adds	r3, #40	@ 0x28
 8008168:	2102      	movs	r1, #2
 800816a:	4618      	mov	r0, r3
 800816c:	f001 fc5c 	bl	8009a28 <RCCEx_PLL3_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800817c:	4b86      	ldr	r3, [pc, #536]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800817e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008180:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800818c:	4a82      	ldr	r2, [pc, #520]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800818e:	430b      	orrs	r3, r1
 8008190:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	f002 0310 	and.w	r3, r2, #16
 800819e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081a2:	2300      	movs	r3, #0
 80081a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80081ac:	460b      	mov	r3, r1
 80081ae:	4313      	orrs	r3, r2
 80081b0:	d01e      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80081b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081be:	d10c      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c4:	3328      	adds	r3, #40	@ 0x28
 80081c6:	2102      	movs	r1, #2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f001 fc2d 	bl	8009a28 <RCCEx_PLL3_Config>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081da:	4b6f      	ldr	r3, [pc, #444]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081ea:	4a6b      	ldr	r2, [pc, #428]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081ec:	430b      	orrs	r3, r1
 80081ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80081fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081fe:	2300      	movs	r3, #0
 8008200:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008202:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008206:	460b      	mov	r3, r1
 8008208:	4313      	orrs	r3, r2
 800820a:	d03e      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800820c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008210:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008218:	d022      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800821a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800821e:	d81b      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008228:	d00b      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800822a:	e015      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800822c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008230:	3308      	adds	r3, #8
 8008232:	2100      	movs	r1, #0
 8008234:	4618      	mov	r0, r3
 8008236:	f001 fb45 	bl	80098c4 <RCCEx_PLL2_Config>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008240:	e00f      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	3328      	adds	r3, #40	@ 0x28
 8008248:	2102      	movs	r1, #2
 800824a:	4618      	mov	r0, r3
 800824c:	f001 fbec 	bl	8009a28 <RCCEx_PLL3_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008256:	e004      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800825e:	e000      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008262:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10b      	bne.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800826a:	4b4b      	ldr	r3, [pc, #300]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800826c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800826e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800827a:	4a47      	ldr	r2, [pc, #284]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800827c:	430b      	orrs	r3, r1
 800827e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008280:	e003      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008282:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008286:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800828a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008296:	673b      	str	r3, [r7, #112]	@ 0x70
 8008298:	2300      	movs	r3, #0
 800829a:	677b      	str	r3, [r7, #116]	@ 0x74
 800829c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80082a0:	460b      	mov	r3, r1
 80082a2:	4313      	orrs	r3, r2
 80082a4:	d03b      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80082a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082b2:	d01f      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80082b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082b8:	d818      	bhi.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80082ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082be:	d003      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80082c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082c4:	d007      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80082c6:	e011      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082c8:	4b33      	ldr	r3, [pc, #204]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082cc:	4a32      	ldr	r2, [pc, #200]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082d4:	e00f      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082da:	3328      	adds	r3, #40	@ 0x28
 80082dc:	2101      	movs	r1, #1
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 fba2 	bl	8009a28 <RCCEx_PLL3_Config>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80082ea:	e004      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082f2:	e000      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80082f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10b      	bne.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082fe:	4b26      	ldr	r3, [pc, #152]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008302:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800830e:	4a22      	ldr	r2, [pc, #136]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008310:	430b      	orrs	r3, r1
 8008312:	6553      	str	r3, [r2, #84]	@ 0x54
 8008314:	e003      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008316:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800831a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800832a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800832c:	2300      	movs	r3, #0
 800832e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008330:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008334:	460b      	mov	r3, r1
 8008336:	4313      	orrs	r3, r2
 8008338:	d034      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800833a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008348:	d007      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800834a:	e011      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800834c:	4b12      	ldr	r3, [pc, #72]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800834e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008350:	4a11      	ldr	r2, [pc, #68]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008358:	e00e      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800835a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835e:	3308      	adds	r3, #8
 8008360:	2102      	movs	r1, #2
 8008362:	4618      	mov	r0, r3
 8008364:	f001 faae 	bl	80098c4 <RCCEx_PLL2_Config>
 8008368:	4603      	mov	r3, r0
 800836a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800836e:	e003      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10d      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008380:	4b05      	ldr	r3, [pc, #20]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008384:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800838c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800838e:	4a02      	ldr	r2, [pc, #8]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008390:	430b      	orrs	r3, r1
 8008392:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008394:	e006      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008396:	bf00      	nop
 8008398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80083b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80083b2:	2300      	movs	r3, #0
 80083b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80083b6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80083ba:	460b      	mov	r3, r1
 80083bc:	4313      	orrs	r3, r2
 80083be:	d00c      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c4:	3328      	adds	r3, #40	@ 0x28
 80083c6:	2102      	movs	r1, #2
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fb2d 	bl	8009a28 <RCCEx_PLL3_Config>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80083e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083e8:	2300      	movs	r3, #0
 80083ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083ec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80083f0:	460b      	mov	r3, r1
 80083f2:	4313      	orrs	r3, r2
 80083f4:	d036      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80083f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008400:	d018      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008406:	d811      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800840c:	d014      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800840e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008412:	d80b      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d011      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800841c:	d106      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800841e:	4bb7      	ldr	r3, [pc, #732]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	4ab6      	ldr	r2, [pc, #728]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800842a:	e008      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008432:	e004      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008434:	bf00      	nop
 8008436:	e002      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008438:	bf00      	nop
 800843a:	e000      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800843c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800843e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008446:	4bad      	ldr	r3, [pc, #692]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800844e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008454:	4aa9      	ldr	r2, [pc, #676]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008456:	430b      	orrs	r3, r1
 8008458:	6553      	str	r3, [r2, #84]	@ 0x54
 800845a:	e003      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008460:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008470:	653b      	str	r3, [r7, #80]	@ 0x50
 8008472:	2300      	movs	r3, #0
 8008474:	657b      	str	r3, [r7, #84]	@ 0x54
 8008476:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800847a:	460b      	mov	r3, r1
 800847c:	4313      	orrs	r3, r2
 800847e:	d009      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008480:	4b9e      	ldr	r3, [pc, #632]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008484:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848e:	4a9b      	ldr	r2, [pc, #620]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008490:	430b      	orrs	r3, r1
 8008492:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80084a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084a2:	2300      	movs	r3, #0
 80084a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80084aa:	460b      	mov	r3, r1
 80084ac:	4313      	orrs	r3, r2
 80084ae:	d009      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084b0:	4b92      	ldr	r3, [pc, #584]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80084b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084be:	4a8f      	ldr	r2, [pc, #572]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084c0:	430b      	orrs	r3, r1
 80084c2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80084d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80084d2:	2300      	movs	r3, #0
 80084d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80084da:	460b      	mov	r3, r1
 80084dc:	4313      	orrs	r3, r2
 80084de:	d00e      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084e0:	4b86      	ldr	r3, [pc, #536]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	4a85      	ldr	r2, [pc, #532]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084ea:	6113      	str	r3, [r2, #16]
 80084ec:	4b83      	ldr	r3, [pc, #524]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084ee:	6919      	ldr	r1, [r3, #16]
 80084f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084f8:	4a80      	ldr	r2, [pc, #512]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084fa:	430b      	orrs	r3, r1
 80084fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800850a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800850c:	2300      	movs	r3, #0
 800850e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008510:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008514:	460b      	mov	r3, r1
 8008516:	4313      	orrs	r3, r2
 8008518:	d009      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800851a:	4b78      	ldr	r3, [pc, #480]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800851c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800851e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008528:	4a74      	ldr	r2, [pc, #464]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800852a:	430b      	orrs	r3, r1
 800852c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800852e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800853a:	633b      	str	r3, [r7, #48]	@ 0x30
 800853c:	2300      	movs	r3, #0
 800853e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008540:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008544:	460b      	mov	r3, r1
 8008546:	4313      	orrs	r3, r2
 8008548:	d00a      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800854a:	4b6c      	ldr	r3, [pc, #432]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800854c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800854e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800855a:	4a68      	ldr	r2, [pc, #416]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800855c:	430b      	orrs	r3, r1
 800855e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	2100      	movs	r1, #0
 800856a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008572:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008576:	460b      	mov	r3, r1
 8008578:	4313      	orrs	r3, r2
 800857a:	d011      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800857c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008580:	3308      	adds	r3, #8
 8008582:	2100      	movs	r1, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f001 f99d 	bl	80098c4 <RCCEx_PLL2_Config>
 800858a:	4603      	mov	r3, r0
 800858c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800859c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	2100      	movs	r1, #0
 80085aa:	6239      	str	r1, [r7, #32]
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80085b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085b6:	460b      	mov	r3, r1
 80085b8:	4313      	orrs	r3, r2
 80085ba:	d011      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c0:	3308      	adds	r3, #8
 80085c2:	2101      	movs	r1, #1
 80085c4:	4618      	mov	r0, r3
 80085c6:	f001 f97d 	bl	80098c4 <RCCEx_PLL2_Config>
 80085ca:	4603      	mov	r3, r0
 80085cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80085e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	2100      	movs	r1, #0
 80085ea:	61b9      	str	r1, [r7, #24]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	61fb      	str	r3, [r7, #28]
 80085f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80085f6:	460b      	mov	r3, r1
 80085f8:	4313      	orrs	r3, r2
 80085fa:	d011      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008600:	3308      	adds	r3, #8
 8008602:	2102      	movs	r1, #2
 8008604:	4618      	mov	r0, r3
 8008606:	f001 f95d 	bl	80098c4 <RCCEx_PLL2_Config>
 800860a:	4603      	mov	r3, r0
 800860c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800861c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008628:	2100      	movs	r1, #0
 800862a:	6139      	str	r1, [r7, #16]
 800862c:	f003 0308 	and.w	r3, r3, #8
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008636:	460b      	mov	r3, r1
 8008638:	4313      	orrs	r3, r2
 800863a:	d011      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800863c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008640:	3328      	adds	r3, #40	@ 0x28
 8008642:	2100      	movs	r1, #0
 8008644:	4618      	mov	r0, r3
 8008646:	f001 f9ef 	bl	8009a28 <RCCEx_PLL3_Config>
 800864a:	4603      	mov	r3, r0
 800864c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800865c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	2100      	movs	r1, #0
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	f003 0310 	and.w	r3, r3, #16
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008676:	460b      	mov	r3, r1
 8008678:	4313      	orrs	r3, r2
 800867a:	d011      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800867c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008680:	3328      	adds	r3, #40	@ 0x28
 8008682:	2101      	movs	r1, #1
 8008684:	4618      	mov	r0, r3
 8008686:	f001 f9cf 	bl	8009a28 <RCCEx_PLL3_Config>
 800868a:	4603      	mov	r3, r0
 800868c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008690:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800869c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	2100      	movs	r1, #0
 80086aa:	6039      	str	r1, [r7, #0]
 80086ac:	f003 0320 	and.w	r3, r3, #32
 80086b0:	607b      	str	r3, [r7, #4]
 80086b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086b6:	460b      	mov	r3, r1
 80086b8:	4313      	orrs	r3, r2
 80086ba:	d011      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c0:	3328      	adds	r3, #40	@ 0x28
 80086c2:	2102      	movs	r1, #2
 80086c4:	4618      	mov	r0, r3
 80086c6:	f001 f9af 	bl	8009a28 <RCCEx_PLL3_Config>
 80086ca:	4603      	mov	r3, r0
 80086cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80086d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80086e0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	e000      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80086f4:	46bd      	mov	sp, r7
 80086f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400

08008700 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b090      	sub	sp, #64	@ 0x40
 8008704:	af00      	add	r7, sp, #0
 8008706:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800870a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800870e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008712:	430b      	orrs	r3, r1
 8008714:	f040 8094 	bne.w	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008718:	4b9b      	ldr	r3, [pc, #620]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800871a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	2b04      	cmp	r3, #4
 8008726:	f200 8087 	bhi.w	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800872a:	a201      	add	r2, pc, #4	@ (adr r2, 8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800872c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008730:	08008745 	.word	0x08008745
 8008734:	0800876d 	.word	0x0800876d
 8008738:	08008795 	.word	0x08008795
 800873c:	08008831 	.word	0x08008831
 8008740:	080087bd 	.word	0x080087bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008744:	4b90      	ldr	r3, [pc, #576]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800874c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008750:	d108      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008756:	4618      	mov	r0, r3
 8008758:	f000 ff62 	bl	8009620 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008760:	f000 bc93 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008768:	f000 bc8f 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800876c:	4b86      	ldr	r3, [pc, #536]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008778:	d108      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800877a:	f107 0318 	add.w	r3, r7, #24
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fca6 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008788:	f000 bc7f 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008790:	f000 bc7b 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008794:	4b7c      	ldr	r3, [pc, #496]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800879c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087a0:	d108      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087a2:	f107 030c 	add.w	r3, r7, #12
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fde6 	bl	8009378 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087b0:	f000 bc6b 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087b8:	f000 bc67 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087bc:	4b72      	ldr	r3, [pc, #456]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087c6:	4b70      	ldr	r3, [pc, #448]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0304 	and.w	r3, r3, #4
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d10c      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80087d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087d8:	4b6b      	ldr	r3, [pc, #428]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	08db      	lsrs	r3, r3, #3
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	4a6a      	ldr	r2, [pc, #424]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80087e4:	fa22 f303 	lsr.w	r3, r2, r3
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ea:	e01f      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087ec:	4b66      	ldr	r3, [pc, #408]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087f8:	d106      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80087fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008800:	d102      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008802:	4b63      	ldr	r3, [pc, #396]	@ (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008806:	e011      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008808:	4b5f      	ldr	r3, [pc, #380]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008814:	d106      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800881c:	d102      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800881e:	4b5d      	ldr	r3, [pc, #372]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008822:	e003      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008828:	f000 bc2f 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800882c:	f000 bc2d 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008830:	4b59      	ldr	r3, [pc, #356]	@ (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008834:	f000 bc29 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800883c:	f000 bc25 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008844:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008848:	430b      	orrs	r3, r1
 800884a:	f040 80a7 	bne.w	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800884e:	4b4e      	ldr	r3, [pc, #312]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008852:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008856:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800885e:	d054      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008866:	f200 808b 	bhi.w	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008870:	f000 8083 	beq.w	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800887a:	f200 8081 	bhi.w	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008884:	d02f      	beq.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800888c:	d878      	bhi.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	2b00      	cmp	r3, #0
 8008892:	d004      	beq.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800889a:	d012      	beq.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800889c:	e070      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800889e:	4b3a      	ldr	r3, [pc, #232]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088aa:	d107      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 feb5 	bl	8009620 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ba:	e3e6      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c0:	e3e3      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088c2:	4b31      	ldr	r3, [pc, #196]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088ce:	d107      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d0:	f107 0318 	add.w	r3, r7, #24
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fbfb 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088de:	e3d4      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e4:	e3d1      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088e6:	4b28      	ldr	r3, [pc, #160]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088f2:	d107      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088f4:	f107 030c 	add.w	r3, r7, #12
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fd3d 	bl	8009378 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008902:	e3c2      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008908:	e3bf      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800890a:	4b1f      	ldr	r3, [pc, #124]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800890c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800890e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008912:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008914:	4b1c      	ldr	r3, [pc, #112]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b04      	cmp	r3, #4
 800891e:	d10c      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008922:	2b00      	cmp	r3, #0
 8008924:	d109      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008926:	4b18      	ldr	r3, [pc, #96]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	08db      	lsrs	r3, r3, #3
 800892c:	f003 0303 	and.w	r3, r3, #3
 8008930:	4a16      	ldr	r2, [pc, #88]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008932:	fa22 f303 	lsr.w	r3, r2, r3
 8008936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008938:	e01e      	b.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800893a:	4b13      	ldr	r3, [pc, #76]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008946:	d106      	bne.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800894e:	d102      	bne.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008950:	4b0f      	ldr	r3, [pc, #60]	@ (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008954:	e010      	b.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008956:	4b0c      	ldr	r3, [pc, #48]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800895e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008962:	d106      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800896a:	d102      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800896c:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800896e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008970:	e002      	b.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008976:	e388      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008978:	e387      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800897a:	4b07      	ldr	r3, [pc, #28]	@ (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800897e:	e384      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008984:	e381      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008986:	bf00      	nop
 8008988:	58024400 	.word	0x58024400
 800898c:	03d09000 	.word	0x03d09000
 8008990:	003d0900 	.word	0x003d0900
 8008994:	017d7840 	.word	0x017d7840
 8008998:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800899c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80089a4:	430b      	orrs	r3, r1
 80089a6:	f040 809c 	bne.w	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80089aa:	4b9e      	ldr	r3, [pc, #632]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ae:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80089b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80089b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089ba:	d054      	beq.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80089bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089c2:	f200 808b 	bhi.w	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089cc:	f000 8083 	beq.w	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089d6:	f200 8081 	bhi.w	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80089da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089e0:	d02f      	beq.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089e8:	d878      	bhi.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80089ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80089f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089f6:	d012      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80089f8:	e070      	b.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089fa:	4b8a      	ldr	r3, [pc, #552]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a06:	d107      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 fe07 	bl	8009620 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a16:	e338      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1c:	e335      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a1e:	4b81      	ldr	r3, [pc, #516]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a2a:	d107      	bne.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a2c:	f107 0318 	add.w	r3, r7, #24
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 fb4d 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a3a:	e326      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a40:	e323      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a42:	4b78      	ldr	r3, [pc, #480]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a4e:	d107      	bne.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a50:	f107 030c 	add.w	r3, r7, #12
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fc8f 	bl	8009378 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a5e:	e314      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a64:	e311      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a66:	4b6f      	ldr	r3, [pc, #444]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a6e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a70:	4b6c      	ldr	r3, [pc, #432]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d10c      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d109      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a82:	4b68      	ldr	r3, [pc, #416]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	08db      	lsrs	r3, r3, #3
 8008a88:	f003 0303 	and.w	r3, r3, #3
 8008a8c:	4a66      	ldr	r2, [pc, #408]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a94:	e01e      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a96:	4b63      	ldr	r3, [pc, #396]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aa2:	d106      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aaa:	d102      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008aac:	4b5f      	ldr	r3, [pc, #380]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ab0:	e010      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ab2:	4b5c      	ldr	r3, [pc, #368]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008abe:	d106      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac6:	d102      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ac8:	4b59      	ldr	r3, [pc, #356]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008acc:	e002      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ad2:	e2da      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ad4:	e2d9      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ad6:	4b57      	ldr	r3, [pc, #348]	@ (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ada:	e2d6      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ae0:	e2d3      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008aea:	430b      	orrs	r3, r1
 8008aec:	f040 80a7 	bne.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008af0:	4b4c      	ldr	r3, [pc, #304]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008af8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b00:	d055      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b08:	f200 8096 	bhi.w	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b12:	f000 8084 	beq.w	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b1c:	f200 808c 	bhi.w	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b26:	d030      	beq.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b2e:	f200 8083 	bhi.w	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d004      	beq.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b3e:	d012      	beq.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008b40:	e07a      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b42:	4b38      	ldr	r3, [pc, #224]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b4e:	d107      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fd63 	bl	8009620 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b5e:	e294      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b60:	2300      	movs	r3, #0
 8008b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b64:	e291      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b66:	4b2f      	ldr	r3, [pc, #188]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b72:	d107      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b74:	f107 0318 	add.w	r3, r7, #24
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 faa9 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b82:	e282      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b88:	e27f      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b8a:	4b26      	ldr	r3, [pc, #152]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b96:	d107      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b98:	f107 030c 	add.w	r3, r7, #12
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fbeb 	bl	8009378 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba6:	e270      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bac:	e26d      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bae:	4b1d      	ldr	r3, [pc, #116]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 0304 	and.w	r3, r3, #4
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d10c      	bne.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d109      	bne.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bca:	4b16      	ldr	r3, [pc, #88]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	08db      	lsrs	r3, r3, #3
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	4a14      	ldr	r2, [pc, #80]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bdc:	e01e      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bde:	4b11      	ldr	r3, [pc, #68]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bea:	d106      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bf2:	d102      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bf8:	e010      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c06:	d106      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c0e:	d102      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c10:	4b07      	ldr	r3, [pc, #28]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c14:	e002      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c1a:	e236      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c1c:	e235      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c1e:	4b05      	ldr	r3, [pc, #20]	@ (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c22:	e232      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c24:	58024400 	.word	0x58024400
 8008c28:	03d09000 	.word	0x03d09000
 8008c2c:	003d0900 	.word	0x003d0900
 8008c30:	017d7840 	.word	0x017d7840
 8008c34:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c3c:	e225      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c42:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008c46:	430b      	orrs	r3, r1
 8008c48:	f040 8085 	bne.w	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008c4c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c50:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c54:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c5c:	d06b      	beq.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c64:	d874      	bhi.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c6c:	d056      	beq.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c74:	d86c      	bhi.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c7c:	d03b      	beq.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c84:	d864      	bhi.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c8c:	d021      	beq.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c94:	d85c      	bhi.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d004      	beq.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ca2:	d004      	beq.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008ca4:	e054      	b.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008ca6:	f7fe fb43 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 8008caa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cac:	e1ed      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cae:	4b84      	ldr	r3, [pc, #528]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cba:	d107      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cbc:	f107 0318 	add.w	r3, r7, #24
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fa05 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cca:	e1de      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd0:	e1db      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cde:	d107      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ce0:	f107 030c 	add.w	r3, r7, #12
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 fb47 	bl	8009378 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cee:	e1cc      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf4:	e1c9      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cf6:	4b72      	ldr	r3, [pc, #456]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d109      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d02:	4b6f      	ldr	r3, [pc, #444]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	08db      	lsrs	r3, r3, #3
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	4a6d      	ldr	r2, [pc, #436]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d14:	e1b9      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d1a:	e1b6      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d1c:	4b68      	ldr	r3, [pc, #416]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d28:	d102      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008d2a:	4b67      	ldr	r3, [pc, #412]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d2e:	e1ac      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d34:	e1a9      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d36:	4b62      	ldr	r3, [pc, #392]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d42:	d102      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008d44:	4b61      	ldr	r3, [pc, #388]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d48:	e19f      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d4e:	e19c      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d54:	e199      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d5a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008d5e:	430b      	orrs	r3, r1
 8008d60:	d173      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008d62:	4b57      	ldr	r3, [pc, #348]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d6a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d72:	d02f      	beq.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d7a:	d863      	bhi.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d004      	beq.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d88:	d012      	beq.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008d8a:	e05b      	b.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d8c:	4b4c      	ldr	r3, [pc, #304]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d98:	d107      	bne.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d9a:	f107 0318 	add.w	r3, r7, #24
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f996 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da8:	e16f      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dae:	e16c      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008db0:	4b43      	ldr	r3, [pc, #268]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dbc:	d107      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dbe:	f107 030c 	add.w	r3, r7, #12
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fad8 	bl	8009378 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dcc:	e15d      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd2:	e15a      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dde:	4b38      	ldr	r3, [pc, #224]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0304 	and.w	r3, r3, #4
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	d10c      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d109      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008df0:	4b33      	ldr	r3, [pc, #204]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	08db      	lsrs	r3, r3, #3
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	4a32      	ldr	r2, [pc, #200]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8008e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e02:	e01e      	b.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e04:	4b2e      	ldr	r3, [pc, #184]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e10:	d106      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e18:	d102      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e1e:	e010      	b.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e20:	4b27      	ldr	r3, [pc, #156]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e2c:	d106      	bne.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e34:	d102      	bne.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e36:	4b25      	ldr	r3, [pc, #148]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e3a:	e002      	b.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e40:	e123      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e42:	e122      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e48:	e11f      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e4e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008e52:	430b      	orrs	r3, r1
 8008e54:	d13c      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008e56:	4b1a      	ldr	r3, [pc, #104]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e5e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d004      	beq.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e6c:	d012      	beq.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008e6e:	e023      	b.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e70:	4b13      	ldr	r3, [pc, #76]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e7c:	d107      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fbcc 	bl	8009620 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e8c:	e0fd      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e92:	e0fa      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e94:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ea0:	d107      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ea2:	f107 0318 	add.w	r3, r7, #24
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f912 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb0:	e0eb      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb6:	e0e8      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ebc:	e0e5      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ebe:	bf00      	nop
 8008ec0:	58024400 	.word	0x58024400
 8008ec4:	03d09000 	.word	0x03d09000
 8008ec8:	003d0900 	.word	0x003d0900
 8008ecc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	f040 8085 	bne.w	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008ede:	4b6d      	ldr	r3, [pc, #436]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ee2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008ee6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eee:	d06b      	beq.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ef6:	d874      	bhi.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008efe:	d056      	beq.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f06:	d86c      	bhi.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f0e:	d03b      	beq.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f16:	d864      	bhi.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f1e:	d021      	beq.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f26:	d85c      	bhi.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d004      	beq.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f34:	d004      	beq.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008f36:	e054      	b.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008f38:	f000 f8b4 	bl	80090a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f3c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f3e:	e0a4      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f40:	4b54      	ldr	r3, [pc, #336]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f4c:	d107      	bne.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f4e:	f107 0318 	add.w	r3, r7, #24
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f8bc 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f5c:	e095      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f62:	e092      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f64:	4b4b      	ldr	r3, [pc, #300]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f70:	d107      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f72:	f107 030c 	add.w	r3, r7, #12
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 f9fe 	bl	8009378 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f80:	e083      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f86:	e080      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f88:	4b42      	ldr	r3, [pc, #264]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d109      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f94:	4b3f      	ldr	r3, [pc, #252]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	08db      	lsrs	r3, r3, #3
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fa6:	e070      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fac:	e06d      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008fae:	4b39      	ldr	r3, [pc, #228]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fba:	d102      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008fbc:	4b37      	ldr	r3, [pc, #220]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fc0:	e063      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc6:	e060      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fc8:	4b32      	ldr	r3, [pc, #200]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fd4:	d102      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008fd6:	4b32      	ldr	r3, [pc, #200]	@ (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fda:	e056      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe0:	e053      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe6:	e050      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fec:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	d148      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ff4:	4b27      	ldr	r3, [pc, #156]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ffc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009004:	d02a      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800900c:	d838      	bhi.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800900e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800901a:	d00d      	beq.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800901c:	e030      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800901e:	4b1d      	ldr	r3, [pc, #116]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009026:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800902a:	d102      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800902c:	4b1c      	ldr	r3, [pc, #112]	@ (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800902e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009030:	e02b      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009036:	e028      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009038:	4b16      	ldr	r3, [pc, #88]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009040:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009044:	d107      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800904a:	4618      	mov	r0, r3
 800904c:	f000 fae8 	bl	8009620 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009054:	e019      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800905a:	e016      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800905c:	4b0d      	ldr	r3, [pc, #52]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009068:	d107      	bne.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906a:	f107 0318 	add.w	r3, r7, #24
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f82e 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009078:	e007      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907e:	e004      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009084:	e001      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800908a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800908c:	4618      	mov	r0, r3
 800908e:	3740      	adds	r7, #64	@ 0x40
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	58024400 	.word	0x58024400
 8009098:	03d09000 	.word	0x03d09000
 800909c:	003d0900 	.word	0x003d0900
 80090a0:	017d7840 	.word	0x017d7840

080090a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80090a8:	f7fe f912 	bl	80072d0 <HAL_RCC_GetHCLKFreq>
 80090ac:	4602      	mov	r2, r0
 80090ae:	4b06      	ldr	r3, [pc, #24]	@ (80090c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	091b      	lsrs	r3, r3, #4
 80090b4:	f003 0307 	and.w	r3, r3, #7
 80090b8:	4904      	ldr	r1, [pc, #16]	@ (80090cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80090ba:	5ccb      	ldrb	r3, [r1, r3]
 80090bc:	f003 031f 	and.w	r3, r3, #31
 80090c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	58024400 	.word	0x58024400
 80090cc:	0800c4c0 	.word	0x0800c4c0

080090d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b089      	sub	sp, #36	@ 0x24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090d8:	4ba1      	ldr	r3, [pc, #644]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80090e2:	4b9f      	ldr	r3, [pc, #636]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e6:	0b1b      	lsrs	r3, r3, #12
 80090e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090ee:	4b9c      	ldr	r3, [pc, #624]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f2:	091b      	lsrs	r3, r3, #4
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80090fa:	4b99      	ldr	r3, [pc, #612]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090fe:	08db      	lsrs	r3, r3, #3
 8009100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	fb02 f303 	mul.w	r3, r2, r3
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009112:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 8111 	beq.w	8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	2b02      	cmp	r3, #2
 8009122:	f000 8083 	beq.w	800922c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	2b02      	cmp	r3, #2
 800912a:	f200 80a1 	bhi.w	8009270 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d056      	beq.n	80091e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800913a:	e099      	b.n	8009270 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800913c:	4b88      	ldr	r3, [pc, #544]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0320 	and.w	r3, r3, #32
 8009144:	2b00      	cmp	r3, #0
 8009146:	d02d      	beq.n	80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009148:	4b85      	ldr	r3, [pc, #532]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	08db      	lsrs	r3, r3, #3
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	4a84      	ldr	r2, [pc, #528]	@ (8009364 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009154:	fa22 f303 	lsr.w	r3, r2, r3
 8009158:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009172:	4b7b      	ldr	r3, [pc, #492]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009182:	ed97 6a03 	vldr	s12, [r7, #12]
 8009186:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009368 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800918a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80091a2:	e087      	b.n	80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	ee07 3a90 	vmov	s15, r3
 80091aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800936c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80091b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b6:	4b6a      	ldr	r3, [pc, #424]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009368 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091e6:	e065      	b.n	80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	ee07 3a90 	vmov	s15, r3
 80091ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009370 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091fa:	4b59      	ldr	r3, [pc, #356]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800920a:	ed97 6a03 	vldr	s12, [r7, #12]
 800920e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009368 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800921a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800921e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800922a:	e043      	b.n	80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	ee07 3a90 	vmov	s15, r3
 8009232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009236:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009374 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800923a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800923e:	4b48      	ldr	r3, [pc, #288]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009246:	ee07 3a90 	vmov	s15, r3
 800924a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800924e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009252:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009368 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800925a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800925e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800926a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800926e:	e021      	b.n	80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009370 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800927e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009282:	4b37      	ldr	r3, [pc, #220]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928a:	ee07 3a90 	vmov	s15, r3
 800928e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009292:	ed97 6a03 	vldr	s12, [r7, #12]
 8009296:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009368 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800929a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800929e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80092b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b8:	0a5b      	lsrs	r3, r3, #9
 80092ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80092d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092da:	ee17 2a90 	vmov	r2, s15
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80092e2:	4b1f      	ldr	r3, [pc, #124]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e6:	0c1b      	lsrs	r3, r3, #16
 80092e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009308:	ee17 2a90 	vmov	r2, s15
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009310:	4b13      	ldr	r3, [pc, #76]	@ (8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009314:	0e1b      	lsrs	r3, r3, #24
 8009316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800932a:	edd7 6a07 	vldr	s13, [r7, #28]
 800932e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009336:	ee17 2a90 	vmov	r2, s15
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800933e:	e008      	b.n	8009352 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	609a      	str	r2, [r3, #8]
}
 8009352:	bf00      	nop
 8009354:	3724      	adds	r7, #36	@ 0x24
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	58024400 	.word	0x58024400
 8009364:	03d09000 	.word	0x03d09000
 8009368:	46000000 	.word	0x46000000
 800936c:	4c742400 	.word	0x4c742400
 8009370:	4a742400 	.word	0x4a742400
 8009374:	4bbebc20 	.word	0x4bbebc20

08009378 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009378:	b480      	push	{r7}
 800937a:	b089      	sub	sp, #36	@ 0x24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009380:	4ba1      	ldr	r3, [pc, #644]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009384:	f003 0303 	and.w	r3, r3, #3
 8009388:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800938a:	4b9f      	ldr	r3, [pc, #636]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800938c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938e:	0d1b      	lsrs	r3, r3, #20
 8009390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009394:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009396:	4b9c      	ldr	r3, [pc, #624]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939a:	0a1b      	lsrs	r3, r3, #8
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80093a2:	4b99      	ldr	r3, [pc, #612]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 8111 	beq.w	80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	f000 8083 	beq.w	80094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	f200 80a1 	bhi.w	8009518 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d056      	beq.n	8009490 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093e2:	e099      	b.n	8009518 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093e4:	4b88      	ldr	r3, [pc, #544]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d02d      	beq.n	800944c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093f0:	4b85      	ldr	r3, [pc, #532]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	08db      	lsrs	r3, r3, #3
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	4a84      	ldr	r2, [pc, #528]	@ (800960c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009400:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941a:	4b7b      	ldr	r3, [pc, #492]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800941c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942a:	ed97 6a03 	vldr	s12, [r7, #12]
 800942e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009610 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800943e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009446:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800944a:	e087      	b.n	800955c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009456:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009614 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800945a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800945e:	4b6a      	ldr	r3, [pc, #424]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800946e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009472:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009610 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800947a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800947e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800948a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800948e:	e065      	b.n	800955c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800949e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a2:	4b59      	ldr	r3, [pc, #356]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009610 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094d2:	e043      	b.n	800955c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800961c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e6:	4b48      	ldr	r3, [pc, #288]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009610 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800950a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800950e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009516:	e021      	b.n	800955c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009522:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800952a:	4b37      	ldr	r3, [pc, #220]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800952c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800953a:	ed97 6a03 	vldr	s12, [r7, #12]
 800953e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009610 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800954a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800954e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800955a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800955c:	4b2a      	ldr	r3, [pc, #168]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800955e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009560:	0a5b      	lsrs	r3, r3, #9
 8009562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009576:	edd7 6a07 	vldr	s13, [r7, #28]
 800957a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800957e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009582:	ee17 2a90 	vmov	r2, s15
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800958a:	4b1f      	ldr	r3, [pc, #124]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800958c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800958e:	0c1b      	lsrs	r3, r3, #16
 8009590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009594:	ee07 3a90 	vmov	s15, r3
 8009598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b0:	ee17 2a90 	vmov	r2, s15
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80095b8:	4b13      	ldr	r3, [pc, #76]	@ (8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095bc:	0e1b      	lsrs	r3, r3, #24
 80095be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80095d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095de:	ee17 2a90 	vmov	r2, s15
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80095e6:	e008      	b.n	80095fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	609a      	str	r2, [r3, #8]
}
 80095fa:	bf00      	nop
 80095fc:	3724      	adds	r7, #36	@ 0x24
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	58024400 	.word	0x58024400
 800960c:	03d09000 	.word	0x03d09000
 8009610:	46000000 	.word	0x46000000
 8009614:	4c742400 	.word	0x4c742400
 8009618:	4a742400 	.word	0x4a742400
 800961c:	4bbebc20 	.word	0x4bbebc20

08009620 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009620:	b480      	push	{r7}
 8009622:	b089      	sub	sp, #36	@ 0x24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009628:	4ba0      	ldr	r3, [pc, #640]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800962a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962c:	f003 0303 	and.w	r3, r3, #3
 8009630:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009632:	4b9e      	ldr	r3, [pc, #632]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009636:	091b      	lsrs	r3, r3, #4
 8009638:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800963c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800963e:	4b9b      	ldr	r3, [pc, #620]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009648:	4b98      	ldr	r3, [pc, #608]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800964a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800964c:	08db      	lsrs	r3, r3, #3
 800964e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	fb02 f303 	mul.w	r3, r2, r3
 8009658:	ee07 3a90 	vmov	s15, r3
 800965c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009660:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 8111 	beq.w	800988e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	2b02      	cmp	r3, #2
 8009670:	f000 8083 	beq.w	800977a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	2b02      	cmp	r3, #2
 8009678:	f200 80a1 	bhi.w	80097be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d056      	beq.n	8009736 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009688:	e099      	b.n	80097be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800968a:	4b88      	ldr	r3, [pc, #544]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0320 	and.w	r3, r3, #32
 8009692:	2b00      	cmp	r3, #0
 8009694:	d02d      	beq.n	80096f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009696:	4b85      	ldr	r3, [pc, #532]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	08db      	lsrs	r3, r3, #3
 800969c:	f003 0303 	and.w	r3, r3, #3
 80096a0:	4a83      	ldr	r2, [pc, #524]	@ (80098b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80096a2:	fa22 f303 	lsr.w	r3, r2, r3
 80096a6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	ee07 3a90 	vmov	s15, r3
 80096b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c0:	4b7a      	ldr	r3, [pc, #488]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c8:	ee07 3a90 	vmov	s15, r3
 80096cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096d4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80098b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80096f0:	e087      	b.n	8009802 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	ee07 3a90 	vmov	s15, r3
 80096f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80098b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009704:	4b69      	ldr	r3, [pc, #420]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970c:	ee07 3a90 	vmov	s15, r3
 8009710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009714:	ed97 6a03 	vldr	s12, [r7, #12]
 8009718:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80098b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800971c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009724:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800972c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009730:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009734:	e065      	b.n	8009802 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	ee07 3a90 	vmov	s15, r3
 800973c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009740:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80098bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009748:	4b58      	ldr	r3, [pc, #352]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800974a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800974c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009750:	ee07 3a90 	vmov	s15, r3
 8009754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009758:	ed97 6a03 	vldr	s12, [r7, #12]
 800975c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80098b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009768:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800976c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009774:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009778:	e043      	b.n	8009802 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	ee07 3a90 	vmov	s15, r3
 8009780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009784:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80098c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978c:	4b47      	ldr	r3, [pc, #284]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800978e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009794:	ee07 3a90 	vmov	s15, r3
 8009798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979c:	ed97 6a03 	vldr	s12, [r7, #12]
 80097a0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80098b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097bc:	e021      	b.n	8009802 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	ee07 3a90 	vmov	s15, r3
 80097c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80098b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80097cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097d0:	4b36      	ldr	r3, [pc, #216]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d8:	ee07 3a90 	vmov	s15, r3
 80097dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80098b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009800:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009802:	4b2a      	ldr	r3, [pc, #168]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009806:	0a5b      	lsrs	r3, r3, #9
 8009808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800980c:	ee07 3a90 	vmov	s15, r3
 8009810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009814:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800981c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009828:	ee17 2a90 	vmov	r2, s15
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009830:	4b1e      	ldr	r3, [pc, #120]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009834:	0c1b      	lsrs	r3, r3, #16
 8009836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800983a:	ee07 3a90 	vmov	s15, r3
 800983e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800984a:	edd7 6a07 	vldr	s13, [r7, #28]
 800984e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009856:	ee17 2a90 	vmov	r2, s15
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800985e:	4b13      	ldr	r3, [pc, #76]	@ (80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009862:	0e1b      	lsrs	r3, r3, #24
 8009864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009868:	ee07 3a90 	vmov	s15, r3
 800986c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009878:	edd7 6a07 	vldr	s13, [r7, #28]
 800987c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009884:	ee17 2a90 	vmov	r2, s15
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800988c:	e008      	b.n	80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	609a      	str	r2, [r3, #8]
}
 80098a0:	bf00      	nop
 80098a2:	3724      	adds	r7, #36	@ 0x24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	58024400 	.word	0x58024400
 80098b0:	03d09000 	.word	0x03d09000
 80098b4:	46000000 	.word	0x46000000
 80098b8:	4c742400 	.word	0x4c742400
 80098bc:	4a742400 	.word	0x4a742400
 80098c0:	4bbebc20 	.word	0x4bbebc20

080098c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098d2:	4b53      	ldr	r3, [pc, #332]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80098d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d6:	f003 0303 	and.w	r3, r3, #3
 80098da:	2b03      	cmp	r3, #3
 80098dc:	d101      	bne.n	80098e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e099      	b.n	8009a16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098e2:	4b4f      	ldr	r3, [pc, #316]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a4e      	ldr	r2, [pc, #312]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80098e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ee:	f7f7 fddf 	bl	80014b0 <HAL_GetTick>
 80098f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098f4:	e008      	b.n	8009908 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098f6:	f7f7 fddb 	bl	80014b0 <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	2b02      	cmp	r3, #2
 8009902:	d901      	bls.n	8009908 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009904:	2303      	movs	r3, #3
 8009906:	e086      	b.n	8009a16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009908:	4b45      	ldr	r3, [pc, #276]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1f0      	bne.n	80098f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009914:	4b42      	ldr	r3, [pc, #264]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 8009916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009918:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	031b      	lsls	r3, r3, #12
 8009922:	493f      	ldr	r1, [pc, #252]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 8009924:	4313      	orrs	r3, r2
 8009926:	628b      	str	r3, [r1, #40]	@ 0x28
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	3b01      	subs	r3, #1
 800992e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	3b01      	subs	r3, #1
 8009938:	025b      	lsls	r3, r3, #9
 800993a:	b29b      	uxth	r3, r3
 800993c:	431a      	orrs	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	3b01      	subs	r3, #1
 8009944:	041b      	lsls	r3, r3, #16
 8009946:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	3b01      	subs	r3, #1
 8009952:	061b      	lsls	r3, r3, #24
 8009954:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009958:	4931      	ldr	r1, [pc, #196]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 800995a:	4313      	orrs	r3, r2
 800995c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800995e:	4b30      	ldr	r3, [pc, #192]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 8009960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009962:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	492d      	ldr	r1, [pc, #180]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 800996c:	4313      	orrs	r3, r2
 800996e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009970:	4b2b      	ldr	r3, [pc, #172]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 8009972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009974:	f023 0220 	bic.w	r2, r3, #32
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	4928      	ldr	r1, [pc, #160]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 800997e:	4313      	orrs	r3, r2
 8009980:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009982:	4b27      	ldr	r3, [pc, #156]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 8009984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009986:	4a26      	ldr	r2, [pc, #152]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 8009988:	f023 0310 	bic.w	r3, r3, #16
 800998c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800998e:	4b24      	ldr	r3, [pc, #144]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 8009990:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009992:	4b24      	ldr	r3, [pc, #144]	@ (8009a24 <RCCEx_PLL2_Config+0x160>)
 8009994:	4013      	ands	r3, r2
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	69d2      	ldr	r2, [r2, #28]
 800999a:	00d2      	lsls	r2, r2, #3
 800999c:	4920      	ldr	r1, [pc, #128]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80099a2:	4b1f      	ldr	r3, [pc, #124]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80099a8:	f043 0310 	orr.w	r3, r3, #16
 80099ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d106      	bne.n	80099c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80099b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80099b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b8:	4a19      	ldr	r2, [pc, #100]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80099ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099c0:	e00f      	b.n	80099e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d106      	bne.n	80099d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80099c8:	4b15      	ldr	r3, [pc, #84]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80099ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099cc:	4a14      	ldr	r2, [pc, #80]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80099ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099d4:	e005      	b.n	80099e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80099d6:	4b12      	ldr	r3, [pc, #72]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80099d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099da:	4a11      	ldr	r2, [pc, #68]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80099dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80099e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a0e      	ldr	r2, [pc, #56]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 80099e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80099ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ee:	f7f7 fd5f 	bl	80014b0 <HAL_GetTick>
 80099f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099f4:	e008      	b.n	8009a08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099f6:	f7f7 fd5b 	bl	80014b0 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d901      	bls.n	8009a08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e006      	b.n	8009a16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a08:	4b05      	ldr	r3, [pc, #20]	@ (8009a20 <RCCEx_PLL2_Config+0x15c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0f0      	beq.n	80099f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	58024400 	.word	0x58024400
 8009a24:	ffff0007 	.word	0xffff0007

08009a28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a36:	4b53      	ldr	r3, [pc, #332]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3a:	f003 0303 	and.w	r3, r3, #3
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d101      	bne.n	8009a46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e099      	b.n	8009b7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a46:	4b4f      	ldr	r3, [pc, #316]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a4e      	ldr	r2, [pc, #312]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a52:	f7f7 fd2d 	bl	80014b0 <HAL_GetTick>
 8009a56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a58:	e008      	b.n	8009a6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a5a:	f7f7 fd29 	bl	80014b0 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d901      	bls.n	8009a6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e086      	b.n	8009b7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a6c:	4b45      	ldr	r3, [pc, #276]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1f0      	bne.n	8009a5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a78:	4b42      	ldr	r3, [pc, #264]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	051b      	lsls	r3, r3, #20
 8009a86:	493f      	ldr	r1, [pc, #252]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	025b      	lsls	r3, r3, #9
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	041b      	lsls	r3, r3, #16
 8009aaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	061b      	lsls	r3, r3, #24
 8009ab8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009abc:	4931      	ldr	r1, [pc, #196]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009ac2:	4b30      	ldr	r3, [pc, #192]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	492d      	ldr	r1, [pc, #180]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	4928      	ldr	r1, [pc, #160]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ae6:	4b27      	ldr	r3, [pc, #156]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aea:	4a26      	ldr	r2, [pc, #152]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009af0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009af2:	4b24      	ldr	r3, [pc, #144]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009af6:	4b24      	ldr	r3, [pc, #144]	@ (8009b88 <RCCEx_PLL3_Config+0x160>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	69d2      	ldr	r2, [r2, #28]
 8009afe:	00d2      	lsls	r2, r2, #3
 8009b00:	4920      	ldr	r1, [pc, #128]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b06:	4b1f      	ldr	r3, [pc, #124]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d106      	bne.n	8009b26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b18:	4b1a      	ldr	r3, [pc, #104]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1c:	4a19      	ldr	r2, [pc, #100]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009b22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b24:	e00f      	b.n	8009b46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d106      	bne.n	8009b3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b2c:	4b15      	ldr	r3, [pc, #84]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b30:	4a14      	ldr	r2, [pc, #80]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b38:	e005      	b.n	8009b46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b3a:	4b12      	ldr	r3, [pc, #72]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3e:	4a11      	ldr	r2, [pc, #68]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b46:	4b0f      	ldr	r3, [pc, #60]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b52:	f7f7 fcad 	bl	80014b0 <HAL_GetTick>
 8009b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b58:	e008      	b.n	8009b6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b5a:	f7f7 fca9 	bl	80014b0 <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d901      	bls.n	8009b6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e006      	b.n	8009b7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b6c:	4b05      	ldr	r3, [pc, #20]	@ (8009b84 <RCCEx_PLL3_Config+0x15c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0f0      	beq.n	8009b5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	58024400 	.word	0x58024400
 8009b88:	ffff0007 	.word	0xffff0007

08009b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e049      	b.n	8009c32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d106      	bne.n	8009bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7f7 f9d8 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	f000 f8b4 	bl	8009d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d001      	beq.n	8009c54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e056      	b.n	8009d02 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a2b      	ldr	r2, [pc, #172]	@ (8009d10 <HAL_TIM_Base_Start+0xd4>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d02c      	beq.n	8009cc0 <HAL_TIM_Base_Start+0x84>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c6e:	d027      	beq.n	8009cc0 <HAL_TIM_Base_Start+0x84>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a27      	ldr	r2, [pc, #156]	@ (8009d14 <HAL_TIM_Base_Start+0xd8>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d022      	beq.n	8009cc0 <HAL_TIM_Base_Start+0x84>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a26      	ldr	r2, [pc, #152]	@ (8009d18 <HAL_TIM_Base_Start+0xdc>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d01d      	beq.n	8009cc0 <HAL_TIM_Base_Start+0x84>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a24      	ldr	r2, [pc, #144]	@ (8009d1c <HAL_TIM_Base_Start+0xe0>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d018      	beq.n	8009cc0 <HAL_TIM_Base_Start+0x84>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a23      	ldr	r2, [pc, #140]	@ (8009d20 <HAL_TIM_Base_Start+0xe4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d013      	beq.n	8009cc0 <HAL_TIM_Base_Start+0x84>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a21      	ldr	r2, [pc, #132]	@ (8009d24 <HAL_TIM_Base_Start+0xe8>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d00e      	beq.n	8009cc0 <HAL_TIM_Base_Start+0x84>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a20      	ldr	r2, [pc, #128]	@ (8009d28 <HAL_TIM_Base_Start+0xec>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d009      	beq.n	8009cc0 <HAL_TIM_Base_Start+0x84>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8009d2c <HAL_TIM_Base_Start+0xf0>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d004      	beq.n	8009cc0 <HAL_TIM_Base_Start+0x84>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a1d      	ldr	r2, [pc, #116]	@ (8009d30 <HAL_TIM_Base_Start+0xf4>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d115      	bne.n	8009cec <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8009d34 <HAL_TIM_Base_Start+0xf8>)
 8009cc8:	4013      	ands	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b06      	cmp	r3, #6
 8009cd0:	d015      	beq.n	8009cfe <HAL_TIM_Base_Start+0xc2>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cd8:	d011      	beq.n	8009cfe <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f042 0201 	orr.w	r2, r2, #1
 8009ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cea:	e008      	b.n	8009cfe <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f042 0201 	orr.w	r2, r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	e000      	b.n	8009d00 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	40010000 	.word	0x40010000
 8009d14:	40000400 	.word	0x40000400
 8009d18:	40000800 	.word	0x40000800
 8009d1c:	40000c00 	.word	0x40000c00
 8009d20:	40010400 	.word	0x40010400
 8009d24:	40001800 	.word	0x40001800
 8009d28:	40014000 	.word	0x40014000
 8009d2c:	4000e000 	.word	0x4000e000
 8009d30:	4000e400 	.word	0x4000e400
 8009d34:	00010007 	.word	0x00010007

08009d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a4a      	ldr	r2, [pc, #296]	@ (8009e74 <TIM_Base_SetConfig+0x13c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d013      	beq.n	8009d78 <TIM_Base_SetConfig+0x40>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d56:	d00f      	beq.n	8009d78 <TIM_Base_SetConfig+0x40>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a47      	ldr	r2, [pc, #284]	@ (8009e78 <TIM_Base_SetConfig+0x140>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00b      	beq.n	8009d78 <TIM_Base_SetConfig+0x40>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a46      	ldr	r2, [pc, #280]	@ (8009e7c <TIM_Base_SetConfig+0x144>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d007      	beq.n	8009d78 <TIM_Base_SetConfig+0x40>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a45      	ldr	r2, [pc, #276]	@ (8009e80 <TIM_Base_SetConfig+0x148>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d003      	beq.n	8009d78 <TIM_Base_SetConfig+0x40>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a44      	ldr	r2, [pc, #272]	@ (8009e84 <TIM_Base_SetConfig+0x14c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d108      	bne.n	8009d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a39      	ldr	r2, [pc, #228]	@ (8009e74 <TIM_Base_SetConfig+0x13c>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d027      	beq.n	8009de2 <TIM_Base_SetConfig+0xaa>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d98:	d023      	beq.n	8009de2 <TIM_Base_SetConfig+0xaa>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a36      	ldr	r2, [pc, #216]	@ (8009e78 <TIM_Base_SetConfig+0x140>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d01f      	beq.n	8009de2 <TIM_Base_SetConfig+0xaa>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a35      	ldr	r2, [pc, #212]	@ (8009e7c <TIM_Base_SetConfig+0x144>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d01b      	beq.n	8009de2 <TIM_Base_SetConfig+0xaa>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a34      	ldr	r2, [pc, #208]	@ (8009e80 <TIM_Base_SetConfig+0x148>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d017      	beq.n	8009de2 <TIM_Base_SetConfig+0xaa>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a33      	ldr	r2, [pc, #204]	@ (8009e84 <TIM_Base_SetConfig+0x14c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d013      	beq.n	8009de2 <TIM_Base_SetConfig+0xaa>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a32      	ldr	r2, [pc, #200]	@ (8009e88 <TIM_Base_SetConfig+0x150>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d00f      	beq.n	8009de2 <TIM_Base_SetConfig+0xaa>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a31      	ldr	r2, [pc, #196]	@ (8009e8c <TIM_Base_SetConfig+0x154>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d00b      	beq.n	8009de2 <TIM_Base_SetConfig+0xaa>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a30      	ldr	r2, [pc, #192]	@ (8009e90 <TIM_Base_SetConfig+0x158>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d007      	beq.n	8009de2 <TIM_Base_SetConfig+0xaa>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8009e94 <TIM_Base_SetConfig+0x15c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d003      	beq.n	8009de2 <TIM_Base_SetConfig+0xaa>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8009e98 <TIM_Base_SetConfig+0x160>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d108      	bne.n	8009df4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a16      	ldr	r2, [pc, #88]	@ (8009e74 <TIM_Base_SetConfig+0x13c>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d00f      	beq.n	8009e40 <TIM_Base_SetConfig+0x108>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a18      	ldr	r2, [pc, #96]	@ (8009e84 <TIM_Base_SetConfig+0x14c>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00b      	beq.n	8009e40 <TIM_Base_SetConfig+0x108>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a17      	ldr	r2, [pc, #92]	@ (8009e88 <TIM_Base_SetConfig+0x150>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d007      	beq.n	8009e40 <TIM_Base_SetConfig+0x108>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a16      	ldr	r2, [pc, #88]	@ (8009e8c <TIM_Base_SetConfig+0x154>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d003      	beq.n	8009e40 <TIM_Base_SetConfig+0x108>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a15      	ldr	r2, [pc, #84]	@ (8009e90 <TIM_Base_SetConfig+0x158>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d103      	bne.n	8009e48 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	691a      	ldr	r2, [r3, #16]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d105      	bne.n	8009e66 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	f023 0201 	bic.w	r2, r3, #1
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	611a      	str	r2, [r3, #16]
  }
}
 8009e66:	bf00      	nop
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	40010000 	.word	0x40010000
 8009e78:	40000400 	.word	0x40000400
 8009e7c:	40000800 	.word	0x40000800
 8009e80:	40000c00 	.word	0x40000c00
 8009e84:	40010400 	.word	0x40010400
 8009e88:	40014000 	.word	0x40014000
 8009e8c:	40014400 	.word	0x40014400
 8009e90:	40014800 	.word	0x40014800
 8009e94:	4000e000 	.word	0x4000e000
 8009e98:	4000e400 	.word	0x4000e400

08009e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d101      	bne.n	8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	e077      	b.n	8009fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a35      	ldr	r2, [pc, #212]	@ (8009fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d004      	beq.n	8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a34      	ldr	r2, [pc, #208]	@ (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d108      	bne.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a25      	ldr	r2, [pc, #148]	@ (8009fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d02c      	beq.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f26:	d027      	beq.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a22      	ldr	r2, [pc, #136]	@ (8009fb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d022      	beq.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a21      	ldr	r2, [pc, #132]	@ (8009fbc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d01d      	beq.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a1f      	ldr	r2, [pc, #124]	@ (8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d018      	beq.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d013      	beq.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a1b      	ldr	r2, [pc, #108]	@ (8009fc4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d00e      	beq.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8009fc8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d009      	beq.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a18      	ldr	r2, [pc, #96]	@ (8009fcc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d004      	beq.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a17      	ldr	r2, [pc, #92]	@ (8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d10c      	bne.n	8009f92 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	40010000 	.word	0x40010000
 8009fb4:	40010400 	.word	0x40010400
 8009fb8:	40000400 	.word	0x40000400
 8009fbc:	40000800 	.word	0x40000800
 8009fc0:	40000c00 	.word	0x40000c00
 8009fc4:	40001800 	.word	0x40001800
 8009fc8:	40014000 	.word	0x40014000
 8009fcc:	4000e000 	.word	0x4000e000
 8009fd0:	4000e400 	.word	0x4000e400

08009fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e042      	b.n	800a06c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d106      	bne.n	8009ffe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7f6 ffd7 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2224      	movs	r2, #36	@ 0x24
 800a002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0201 	bic.w	r2, r2, #1
 800a014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 ff22 	bl	800ae68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f8b3 	bl	800a190 <UART_SetConfig>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d101      	bne.n	800a034 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e01b      	b.n	800a06c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0201 	orr.w	r2, r2, #1
 800a062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 ffa1 	bl	800afac <UART_CheckIdleState>
 800a06a:	4603      	mov	r3, r0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	@ 0x28
 800a078:	af02      	add	r7, sp, #8
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	4613      	mov	r3, r2
 800a082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a08a:	2b20      	cmp	r3, #32
 800a08c:	d17b      	bne.n	800a186 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <HAL_UART_Transmit+0x26>
 800a094:	88fb      	ldrh	r3, [r7, #6]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e074      	b.n	800a188 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2221      	movs	r2, #33	@ 0x21
 800a0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0ae:	f7f7 f9ff 	bl	80014b0 <HAL_GetTick>
 800a0b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	88fa      	ldrh	r2, [r7, #6]
 800a0b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	88fa      	ldrh	r2, [r7, #6]
 800a0c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0cc:	d108      	bne.n	800a0e0 <HAL_UART_Transmit+0x6c>
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d104      	bne.n	800a0e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	61bb      	str	r3, [r7, #24]
 800a0de:	e003      	b.n	800a0e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a0e8:	e030      	b.n	800a14c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2180      	movs	r1, #128	@ 0x80
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f001 f803 	bl	800b100 <UART_WaitOnFlagUntilTimeout>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d005      	beq.n	800a10c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2220      	movs	r2, #32
 800a104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e03d      	b.n	800a188 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10b      	bne.n	800a12a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a120:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	3302      	adds	r3, #2
 800a126:	61bb      	str	r3, [r7, #24]
 800a128:	e007      	b.n	800a13a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	781a      	ldrb	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	3301      	adds	r3, #1
 800a138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a140:	b29b      	uxth	r3, r3
 800a142:	3b01      	subs	r3, #1
 800a144:	b29a      	uxth	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a152:	b29b      	uxth	r3, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1c8      	bne.n	800a0ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	2200      	movs	r2, #0
 800a160:	2140      	movs	r1, #64	@ 0x40
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 ffcc 	bl	800b100 <UART_WaitOnFlagUntilTimeout>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d005      	beq.n	800a17a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2220      	movs	r2, #32
 800a172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e006      	b.n	800a188 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	e000      	b.n	800a188 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a186:	2302      	movs	r3, #2
  }
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3720      	adds	r7, #32
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a194:	b092      	sub	sp, #72	@ 0x48
 800a196:	af00      	add	r7, sp, #0
 800a198:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	689a      	ldr	r2, [r3, #8]
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	4bbe      	ldr	r3, [pc, #760]	@ (800a4b8 <UART_SetConfig+0x328>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	6812      	ldr	r2, [r2, #0]
 800a1c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	68da      	ldr	r2, [r3, #12]
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	430a      	orrs	r2, r1
 800a1e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4ab3      	ldr	r2, [pc, #716]	@ (800a4bc <UART_SetConfig+0x32c>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d004      	beq.n	800a1fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	4baf      	ldr	r3, [pc, #700]	@ (800a4c0 <UART_SetConfig+0x330>)
 800a204:	4013      	ands	r3, r2
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	6812      	ldr	r2, [r2, #0]
 800a20a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a20c:	430b      	orrs	r3, r1
 800a20e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a216:	f023 010f 	bic.w	r1, r3, #15
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4aa6      	ldr	r2, [pc, #664]	@ (800a4c4 <UART_SetConfig+0x334>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d177      	bne.n	800a320 <UART_SetConfig+0x190>
 800a230:	4ba5      	ldr	r3, [pc, #660]	@ (800a4c8 <UART_SetConfig+0x338>)
 800a232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a238:	2b28      	cmp	r3, #40	@ 0x28
 800a23a:	d86d      	bhi.n	800a318 <UART_SetConfig+0x188>
 800a23c:	a201      	add	r2, pc, #4	@ (adr r2, 800a244 <UART_SetConfig+0xb4>)
 800a23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a242:	bf00      	nop
 800a244:	0800a2e9 	.word	0x0800a2e9
 800a248:	0800a319 	.word	0x0800a319
 800a24c:	0800a319 	.word	0x0800a319
 800a250:	0800a319 	.word	0x0800a319
 800a254:	0800a319 	.word	0x0800a319
 800a258:	0800a319 	.word	0x0800a319
 800a25c:	0800a319 	.word	0x0800a319
 800a260:	0800a319 	.word	0x0800a319
 800a264:	0800a2f1 	.word	0x0800a2f1
 800a268:	0800a319 	.word	0x0800a319
 800a26c:	0800a319 	.word	0x0800a319
 800a270:	0800a319 	.word	0x0800a319
 800a274:	0800a319 	.word	0x0800a319
 800a278:	0800a319 	.word	0x0800a319
 800a27c:	0800a319 	.word	0x0800a319
 800a280:	0800a319 	.word	0x0800a319
 800a284:	0800a2f9 	.word	0x0800a2f9
 800a288:	0800a319 	.word	0x0800a319
 800a28c:	0800a319 	.word	0x0800a319
 800a290:	0800a319 	.word	0x0800a319
 800a294:	0800a319 	.word	0x0800a319
 800a298:	0800a319 	.word	0x0800a319
 800a29c:	0800a319 	.word	0x0800a319
 800a2a0:	0800a319 	.word	0x0800a319
 800a2a4:	0800a301 	.word	0x0800a301
 800a2a8:	0800a319 	.word	0x0800a319
 800a2ac:	0800a319 	.word	0x0800a319
 800a2b0:	0800a319 	.word	0x0800a319
 800a2b4:	0800a319 	.word	0x0800a319
 800a2b8:	0800a319 	.word	0x0800a319
 800a2bc:	0800a319 	.word	0x0800a319
 800a2c0:	0800a319 	.word	0x0800a319
 800a2c4:	0800a309 	.word	0x0800a309
 800a2c8:	0800a319 	.word	0x0800a319
 800a2cc:	0800a319 	.word	0x0800a319
 800a2d0:	0800a319 	.word	0x0800a319
 800a2d4:	0800a319 	.word	0x0800a319
 800a2d8:	0800a319 	.word	0x0800a319
 800a2dc:	0800a319 	.word	0x0800a319
 800a2e0:	0800a319 	.word	0x0800a319
 800a2e4:	0800a311 	.word	0x0800a311
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ee:	e326      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a2f0:	2304      	movs	r3, #4
 800a2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2f6:	e322      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a2f8:	2308      	movs	r3, #8
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2fe:	e31e      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a300:	2310      	movs	r3, #16
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a306:	e31a      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a308:	2320      	movs	r3, #32
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30e:	e316      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a310:	2340      	movs	r3, #64	@ 0x40
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a316:	e312      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a318:	2380      	movs	r3, #128	@ 0x80
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31e:	e30e      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a69      	ldr	r2, [pc, #420]	@ (800a4cc <UART_SetConfig+0x33c>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d130      	bne.n	800a38c <UART_SetConfig+0x1fc>
 800a32a:	4b67      	ldr	r3, [pc, #412]	@ (800a4c8 <UART_SetConfig+0x338>)
 800a32c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a32e:	f003 0307 	and.w	r3, r3, #7
 800a332:	2b05      	cmp	r3, #5
 800a334:	d826      	bhi.n	800a384 <UART_SetConfig+0x1f4>
 800a336:	a201      	add	r2, pc, #4	@ (adr r2, 800a33c <UART_SetConfig+0x1ac>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a355 	.word	0x0800a355
 800a340:	0800a35d 	.word	0x0800a35d
 800a344:	0800a365 	.word	0x0800a365
 800a348:	0800a36d 	.word	0x0800a36d
 800a34c:	0800a375 	.word	0x0800a375
 800a350:	0800a37d 	.word	0x0800a37d
 800a354:	2300      	movs	r3, #0
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35a:	e2f0      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a35c:	2304      	movs	r3, #4
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a362:	e2ec      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a364:	2308      	movs	r3, #8
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36a:	e2e8      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a36c:	2310      	movs	r3, #16
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a372:	e2e4      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a374:	2320      	movs	r3, #32
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e2e0      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a37c:	2340      	movs	r3, #64	@ 0x40
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e2dc      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a384:	2380      	movs	r3, #128	@ 0x80
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38a:	e2d8      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a4f      	ldr	r2, [pc, #316]	@ (800a4d0 <UART_SetConfig+0x340>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d130      	bne.n	800a3f8 <UART_SetConfig+0x268>
 800a396:	4b4c      	ldr	r3, [pc, #304]	@ (800a4c8 <UART_SetConfig+0x338>)
 800a398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	2b05      	cmp	r3, #5
 800a3a0:	d826      	bhi.n	800a3f0 <UART_SetConfig+0x260>
 800a3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a8 <UART_SetConfig+0x218>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a3c1 	.word	0x0800a3c1
 800a3ac:	0800a3c9 	.word	0x0800a3c9
 800a3b0:	0800a3d1 	.word	0x0800a3d1
 800a3b4:	0800a3d9 	.word	0x0800a3d9
 800a3b8:	0800a3e1 	.word	0x0800a3e1
 800a3bc:	0800a3e9 	.word	0x0800a3e9
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e2ba      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a3c8:	2304      	movs	r3, #4
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e2b6      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e2b2      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a3d8:	2310      	movs	r3, #16
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3de:	e2ae      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e2aa      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a3e8:	2340      	movs	r3, #64	@ 0x40
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e2a6      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a3f0:	2380      	movs	r3, #128	@ 0x80
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f6:	e2a2      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a35      	ldr	r2, [pc, #212]	@ (800a4d4 <UART_SetConfig+0x344>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d130      	bne.n	800a464 <UART_SetConfig+0x2d4>
 800a402:	4b31      	ldr	r3, [pc, #196]	@ (800a4c8 <UART_SetConfig+0x338>)
 800a404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b05      	cmp	r3, #5
 800a40c:	d826      	bhi.n	800a45c <UART_SetConfig+0x2cc>
 800a40e:	a201      	add	r2, pc, #4	@ (adr r2, 800a414 <UART_SetConfig+0x284>)
 800a410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a414:	0800a42d 	.word	0x0800a42d
 800a418:	0800a435 	.word	0x0800a435
 800a41c:	0800a43d 	.word	0x0800a43d
 800a420:	0800a445 	.word	0x0800a445
 800a424:	0800a44d 	.word	0x0800a44d
 800a428:	0800a455 	.word	0x0800a455
 800a42c:	2300      	movs	r3, #0
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e284      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a434:	2304      	movs	r3, #4
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e280      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a43c:	2308      	movs	r3, #8
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a442:	e27c      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a444:	2310      	movs	r3, #16
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e278      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a44c:	2320      	movs	r3, #32
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e274      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a454:	2340      	movs	r3, #64	@ 0x40
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e270      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a45c:	2380      	movs	r3, #128	@ 0x80
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a462:	e26c      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a1b      	ldr	r2, [pc, #108]	@ (800a4d8 <UART_SetConfig+0x348>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d142      	bne.n	800a4f4 <UART_SetConfig+0x364>
 800a46e:	4b16      	ldr	r3, [pc, #88]	@ (800a4c8 <UART_SetConfig+0x338>)
 800a470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a472:	f003 0307 	and.w	r3, r3, #7
 800a476:	2b05      	cmp	r3, #5
 800a478:	d838      	bhi.n	800a4ec <UART_SetConfig+0x35c>
 800a47a:	a201      	add	r2, pc, #4	@ (adr r2, 800a480 <UART_SetConfig+0x2f0>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a499 	.word	0x0800a499
 800a484:	0800a4a1 	.word	0x0800a4a1
 800a488:	0800a4a9 	.word	0x0800a4a9
 800a48c:	0800a4b1 	.word	0x0800a4b1
 800a490:	0800a4dd 	.word	0x0800a4dd
 800a494:	0800a4e5 	.word	0x0800a4e5
 800a498:	2300      	movs	r3, #0
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e24e      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a4a0:	2304      	movs	r3, #4
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a6:	e24a      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a4a8:	2308      	movs	r3, #8
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ae:	e246      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a4b0:	2310      	movs	r3, #16
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e242      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a4b8:	cfff69f3 	.word	0xcfff69f3
 800a4bc:	58000c00 	.word	0x58000c00
 800a4c0:	11fff4ff 	.word	0x11fff4ff
 800a4c4:	40011000 	.word	0x40011000
 800a4c8:	58024400 	.word	0x58024400
 800a4cc:	40004400 	.word	0x40004400
 800a4d0:	40004800 	.word	0x40004800
 800a4d4:	40004c00 	.word	0x40004c00
 800a4d8:	40005000 	.word	0x40005000
 800a4dc:	2320      	movs	r3, #32
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e22c      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a4e4:	2340      	movs	r3, #64	@ 0x40
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ea:	e228      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a4ec:	2380      	movs	r3, #128	@ 0x80
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f2:	e224      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4ab1      	ldr	r2, [pc, #708]	@ (800a7c0 <UART_SetConfig+0x630>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d176      	bne.n	800a5ec <UART_SetConfig+0x45c>
 800a4fe:	4bb1      	ldr	r3, [pc, #708]	@ (800a7c4 <UART_SetConfig+0x634>)
 800a500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a506:	2b28      	cmp	r3, #40	@ 0x28
 800a508:	d86c      	bhi.n	800a5e4 <UART_SetConfig+0x454>
 800a50a:	a201      	add	r2, pc, #4	@ (adr r2, 800a510 <UART_SetConfig+0x380>)
 800a50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a510:	0800a5b5 	.word	0x0800a5b5
 800a514:	0800a5e5 	.word	0x0800a5e5
 800a518:	0800a5e5 	.word	0x0800a5e5
 800a51c:	0800a5e5 	.word	0x0800a5e5
 800a520:	0800a5e5 	.word	0x0800a5e5
 800a524:	0800a5e5 	.word	0x0800a5e5
 800a528:	0800a5e5 	.word	0x0800a5e5
 800a52c:	0800a5e5 	.word	0x0800a5e5
 800a530:	0800a5bd 	.word	0x0800a5bd
 800a534:	0800a5e5 	.word	0x0800a5e5
 800a538:	0800a5e5 	.word	0x0800a5e5
 800a53c:	0800a5e5 	.word	0x0800a5e5
 800a540:	0800a5e5 	.word	0x0800a5e5
 800a544:	0800a5e5 	.word	0x0800a5e5
 800a548:	0800a5e5 	.word	0x0800a5e5
 800a54c:	0800a5e5 	.word	0x0800a5e5
 800a550:	0800a5c5 	.word	0x0800a5c5
 800a554:	0800a5e5 	.word	0x0800a5e5
 800a558:	0800a5e5 	.word	0x0800a5e5
 800a55c:	0800a5e5 	.word	0x0800a5e5
 800a560:	0800a5e5 	.word	0x0800a5e5
 800a564:	0800a5e5 	.word	0x0800a5e5
 800a568:	0800a5e5 	.word	0x0800a5e5
 800a56c:	0800a5e5 	.word	0x0800a5e5
 800a570:	0800a5cd 	.word	0x0800a5cd
 800a574:	0800a5e5 	.word	0x0800a5e5
 800a578:	0800a5e5 	.word	0x0800a5e5
 800a57c:	0800a5e5 	.word	0x0800a5e5
 800a580:	0800a5e5 	.word	0x0800a5e5
 800a584:	0800a5e5 	.word	0x0800a5e5
 800a588:	0800a5e5 	.word	0x0800a5e5
 800a58c:	0800a5e5 	.word	0x0800a5e5
 800a590:	0800a5d5 	.word	0x0800a5d5
 800a594:	0800a5e5 	.word	0x0800a5e5
 800a598:	0800a5e5 	.word	0x0800a5e5
 800a59c:	0800a5e5 	.word	0x0800a5e5
 800a5a0:	0800a5e5 	.word	0x0800a5e5
 800a5a4:	0800a5e5 	.word	0x0800a5e5
 800a5a8:	0800a5e5 	.word	0x0800a5e5
 800a5ac:	0800a5e5 	.word	0x0800a5e5
 800a5b0:	0800a5dd 	.word	0x0800a5dd
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ba:	e1c0      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a5bc:	2304      	movs	r3, #4
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c2:	e1bc      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a5c4:	2308      	movs	r3, #8
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ca:	e1b8      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d2:	e1b4      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a5d4:	2320      	movs	r3, #32
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5da:	e1b0      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a5dc:	2340      	movs	r3, #64	@ 0x40
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e2:	e1ac      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a5e4:	2380      	movs	r3, #128	@ 0x80
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ea:	e1a8      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a75      	ldr	r2, [pc, #468]	@ (800a7c8 <UART_SetConfig+0x638>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d130      	bne.n	800a658 <UART_SetConfig+0x4c8>
 800a5f6:	4b73      	ldr	r3, [pc, #460]	@ (800a7c4 <UART_SetConfig+0x634>)
 800a5f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5fa:	f003 0307 	and.w	r3, r3, #7
 800a5fe:	2b05      	cmp	r3, #5
 800a600:	d826      	bhi.n	800a650 <UART_SetConfig+0x4c0>
 800a602:	a201      	add	r2, pc, #4	@ (adr r2, 800a608 <UART_SetConfig+0x478>)
 800a604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a608:	0800a621 	.word	0x0800a621
 800a60c:	0800a629 	.word	0x0800a629
 800a610:	0800a631 	.word	0x0800a631
 800a614:	0800a639 	.word	0x0800a639
 800a618:	0800a641 	.word	0x0800a641
 800a61c:	0800a649 	.word	0x0800a649
 800a620:	2300      	movs	r3, #0
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a626:	e18a      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a628:	2304      	movs	r3, #4
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62e:	e186      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a630:	2308      	movs	r3, #8
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a636:	e182      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a638:	2310      	movs	r3, #16
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63e:	e17e      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a640:	2320      	movs	r3, #32
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a646:	e17a      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a648:	2340      	movs	r3, #64	@ 0x40
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64e:	e176      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a650:	2380      	movs	r3, #128	@ 0x80
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a656:	e172      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a5b      	ldr	r2, [pc, #364]	@ (800a7cc <UART_SetConfig+0x63c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d130      	bne.n	800a6c4 <UART_SetConfig+0x534>
 800a662:	4b58      	ldr	r3, [pc, #352]	@ (800a7c4 <UART_SetConfig+0x634>)
 800a664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	2b05      	cmp	r3, #5
 800a66c:	d826      	bhi.n	800a6bc <UART_SetConfig+0x52c>
 800a66e:	a201      	add	r2, pc, #4	@ (adr r2, 800a674 <UART_SetConfig+0x4e4>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a68d 	.word	0x0800a68d
 800a678:	0800a695 	.word	0x0800a695
 800a67c:	0800a69d 	.word	0x0800a69d
 800a680:	0800a6a5 	.word	0x0800a6a5
 800a684:	0800a6ad 	.word	0x0800a6ad
 800a688:	0800a6b5 	.word	0x0800a6b5
 800a68c:	2300      	movs	r3, #0
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e154      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a694:	2304      	movs	r3, #4
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69a:	e150      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a69c:	2308      	movs	r3, #8
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a2:	e14c      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a6a4:	2310      	movs	r3, #16
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	e148      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a6ac:	2320      	movs	r3, #32
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e144      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a6b4:	2340      	movs	r3, #64	@ 0x40
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ba:	e140      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a6bc:	2380      	movs	r3, #128	@ 0x80
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c2:	e13c      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a41      	ldr	r2, [pc, #260]	@ (800a7d0 <UART_SetConfig+0x640>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	f040 8082 	bne.w	800a7d4 <UART_SetConfig+0x644>
 800a6d0:	4b3c      	ldr	r3, [pc, #240]	@ (800a7c4 <UART_SetConfig+0x634>)
 800a6d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6d8:	2b28      	cmp	r3, #40	@ 0x28
 800a6da:	d86d      	bhi.n	800a7b8 <UART_SetConfig+0x628>
 800a6dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e4 <UART_SetConfig+0x554>)
 800a6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e2:	bf00      	nop
 800a6e4:	0800a789 	.word	0x0800a789
 800a6e8:	0800a7b9 	.word	0x0800a7b9
 800a6ec:	0800a7b9 	.word	0x0800a7b9
 800a6f0:	0800a7b9 	.word	0x0800a7b9
 800a6f4:	0800a7b9 	.word	0x0800a7b9
 800a6f8:	0800a7b9 	.word	0x0800a7b9
 800a6fc:	0800a7b9 	.word	0x0800a7b9
 800a700:	0800a7b9 	.word	0x0800a7b9
 800a704:	0800a791 	.word	0x0800a791
 800a708:	0800a7b9 	.word	0x0800a7b9
 800a70c:	0800a7b9 	.word	0x0800a7b9
 800a710:	0800a7b9 	.word	0x0800a7b9
 800a714:	0800a7b9 	.word	0x0800a7b9
 800a718:	0800a7b9 	.word	0x0800a7b9
 800a71c:	0800a7b9 	.word	0x0800a7b9
 800a720:	0800a7b9 	.word	0x0800a7b9
 800a724:	0800a799 	.word	0x0800a799
 800a728:	0800a7b9 	.word	0x0800a7b9
 800a72c:	0800a7b9 	.word	0x0800a7b9
 800a730:	0800a7b9 	.word	0x0800a7b9
 800a734:	0800a7b9 	.word	0x0800a7b9
 800a738:	0800a7b9 	.word	0x0800a7b9
 800a73c:	0800a7b9 	.word	0x0800a7b9
 800a740:	0800a7b9 	.word	0x0800a7b9
 800a744:	0800a7a1 	.word	0x0800a7a1
 800a748:	0800a7b9 	.word	0x0800a7b9
 800a74c:	0800a7b9 	.word	0x0800a7b9
 800a750:	0800a7b9 	.word	0x0800a7b9
 800a754:	0800a7b9 	.word	0x0800a7b9
 800a758:	0800a7b9 	.word	0x0800a7b9
 800a75c:	0800a7b9 	.word	0x0800a7b9
 800a760:	0800a7b9 	.word	0x0800a7b9
 800a764:	0800a7a9 	.word	0x0800a7a9
 800a768:	0800a7b9 	.word	0x0800a7b9
 800a76c:	0800a7b9 	.word	0x0800a7b9
 800a770:	0800a7b9 	.word	0x0800a7b9
 800a774:	0800a7b9 	.word	0x0800a7b9
 800a778:	0800a7b9 	.word	0x0800a7b9
 800a77c:	0800a7b9 	.word	0x0800a7b9
 800a780:	0800a7b9 	.word	0x0800a7b9
 800a784:	0800a7b1 	.word	0x0800a7b1
 800a788:	2301      	movs	r3, #1
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78e:	e0d6      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a790:	2304      	movs	r3, #4
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a796:	e0d2      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a798:	2308      	movs	r3, #8
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79e:	e0ce      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a7a0:	2310      	movs	r3, #16
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a6:	e0ca      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a7a8:	2320      	movs	r3, #32
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ae:	e0c6      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a7b0:	2340      	movs	r3, #64	@ 0x40
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b6:	e0c2      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a7b8:	2380      	movs	r3, #128	@ 0x80
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7be:	e0be      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a7c0:	40011400 	.word	0x40011400
 800a7c4:	58024400 	.word	0x58024400
 800a7c8:	40007800 	.word	0x40007800
 800a7cc:	40007c00 	.word	0x40007c00
 800a7d0:	40011800 	.word	0x40011800
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4aad      	ldr	r2, [pc, #692]	@ (800aa90 <UART_SetConfig+0x900>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d176      	bne.n	800a8cc <UART_SetConfig+0x73c>
 800a7de:	4bad      	ldr	r3, [pc, #692]	@ (800aa94 <UART_SetConfig+0x904>)
 800a7e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a7e6:	2b28      	cmp	r3, #40	@ 0x28
 800a7e8:	d86c      	bhi.n	800a8c4 <UART_SetConfig+0x734>
 800a7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f0 <UART_SetConfig+0x660>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a895 	.word	0x0800a895
 800a7f4:	0800a8c5 	.word	0x0800a8c5
 800a7f8:	0800a8c5 	.word	0x0800a8c5
 800a7fc:	0800a8c5 	.word	0x0800a8c5
 800a800:	0800a8c5 	.word	0x0800a8c5
 800a804:	0800a8c5 	.word	0x0800a8c5
 800a808:	0800a8c5 	.word	0x0800a8c5
 800a80c:	0800a8c5 	.word	0x0800a8c5
 800a810:	0800a89d 	.word	0x0800a89d
 800a814:	0800a8c5 	.word	0x0800a8c5
 800a818:	0800a8c5 	.word	0x0800a8c5
 800a81c:	0800a8c5 	.word	0x0800a8c5
 800a820:	0800a8c5 	.word	0x0800a8c5
 800a824:	0800a8c5 	.word	0x0800a8c5
 800a828:	0800a8c5 	.word	0x0800a8c5
 800a82c:	0800a8c5 	.word	0x0800a8c5
 800a830:	0800a8a5 	.word	0x0800a8a5
 800a834:	0800a8c5 	.word	0x0800a8c5
 800a838:	0800a8c5 	.word	0x0800a8c5
 800a83c:	0800a8c5 	.word	0x0800a8c5
 800a840:	0800a8c5 	.word	0x0800a8c5
 800a844:	0800a8c5 	.word	0x0800a8c5
 800a848:	0800a8c5 	.word	0x0800a8c5
 800a84c:	0800a8c5 	.word	0x0800a8c5
 800a850:	0800a8ad 	.word	0x0800a8ad
 800a854:	0800a8c5 	.word	0x0800a8c5
 800a858:	0800a8c5 	.word	0x0800a8c5
 800a85c:	0800a8c5 	.word	0x0800a8c5
 800a860:	0800a8c5 	.word	0x0800a8c5
 800a864:	0800a8c5 	.word	0x0800a8c5
 800a868:	0800a8c5 	.word	0x0800a8c5
 800a86c:	0800a8c5 	.word	0x0800a8c5
 800a870:	0800a8b5 	.word	0x0800a8b5
 800a874:	0800a8c5 	.word	0x0800a8c5
 800a878:	0800a8c5 	.word	0x0800a8c5
 800a87c:	0800a8c5 	.word	0x0800a8c5
 800a880:	0800a8c5 	.word	0x0800a8c5
 800a884:	0800a8c5 	.word	0x0800a8c5
 800a888:	0800a8c5 	.word	0x0800a8c5
 800a88c:	0800a8c5 	.word	0x0800a8c5
 800a890:	0800a8bd 	.word	0x0800a8bd
 800a894:	2301      	movs	r3, #1
 800a896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89a:	e050      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a89c:	2304      	movs	r3, #4
 800a89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a2:	e04c      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a8a4:	2308      	movs	r3, #8
 800a8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8aa:	e048      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a8ac:	2310      	movs	r3, #16
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b2:	e044      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a8b4:	2320      	movs	r3, #32
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ba:	e040      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a8bc:	2340      	movs	r3, #64	@ 0x40
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c2:	e03c      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a8c4:	2380      	movs	r3, #128	@ 0x80
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ca:	e038      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a71      	ldr	r2, [pc, #452]	@ (800aa98 <UART_SetConfig+0x908>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d130      	bne.n	800a938 <UART_SetConfig+0x7a8>
 800a8d6:	4b6f      	ldr	r3, [pc, #444]	@ (800aa94 <UART_SetConfig+0x904>)
 800a8d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8da:	f003 0307 	and.w	r3, r3, #7
 800a8de:	2b05      	cmp	r3, #5
 800a8e0:	d826      	bhi.n	800a930 <UART_SetConfig+0x7a0>
 800a8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e8 <UART_SetConfig+0x758>)
 800a8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e8:	0800a901 	.word	0x0800a901
 800a8ec:	0800a909 	.word	0x0800a909
 800a8f0:	0800a911 	.word	0x0800a911
 800a8f4:	0800a919 	.word	0x0800a919
 800a8f8:	0800a921 	.word	0x0800a921
 800a8fc:	0800a929 	.word	0x0800a929
 800a900:	2302      	movs	r3, #2
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a906:	e01a      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a908:	2304      	movs	r3, #4
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90e:	e016      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a910:	2308      	movs	r3, #8
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a916:	e012      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a918:	2310      	movs	r3, #16
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91e:	e00e      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a920:	2320      	movs	r3, #32
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a926:	e00a      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a928:	2340      	movs	r3, #64	@ 0x40
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92e:	e006      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a930:	2380      	movs	r3, #128	@ 0x80
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a936:	e002      	b.n	800a93e <UART_SetConfig+0x7ae>
 800a938:	2380      	movs	r3, #128	@ 0x80
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a55      	ldr	r2, [pc, #340]	@ (800aa98 <UART_SetConfig+0x908>)
 800a944:	4293      	cmp	r3, r2
 800a946:	f040 80f8 	bne.w	800ab3a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a94a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a94e:	2b20      	cmp	r3, #32
 800a950:	dc46      	bgt.n	800a9e0 <UART_SetConfig+0x850>
 800a952:	2b02      	cmp	r3, #2
 800a954:	db75      	blt.n	800aa42 <UART_SetConfig+0x8b2>
 800a956:	3b02      	subs	r3, #2
 800a958:	2b1e      	cmp	r3, #30
 800a95a:	d872      	bhi.n	800aa42 <UART_SetConfig+0x8b2>
 800a95c:	a201      	add	r2, pc, #4	@ (adr r2, 800a964 <UART_SetConfig+0x7d4>)
 800a95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a962:	bf00      	nop
 800a964:	0800a9e7 	.word	0x0800a9e7
 800a968:	0800aa43 	.word	0x0800aa43
 800a96c:	0800a9ef 	.word	0x0800a9ef
 800a970:	0800aa43 	.word	0x0800aa43
 800a974:	0800aa43 	.word	0x0800aa43
 800a978:	0800aa43 	.word	0x0800aa43
 800a97c:	0800a9ff 	.word	0x0800a9ff
 800a980:	0800aa43 	.word	0x0800aa43
 800a984:	0800aa43 	.word	0x0800aa43
 800a988:	0800aa43 	.word	0x0800aa43
 800a98c:	0800aa43 	.word	0x0800aa43
 800a990:	0800aa43 	.word	0x0800aa43
 800a994:	0800aa43 	.word	0x0800aa43
 800a998:	0800aa43 	.word	0x0800aa43
 800a99c:	0800aa0f 	.word	0x0800aa0f
 800a9a0:	0800aa43 	.word	0x0800aa43
 800a9a4:	0800aa43 	.word	0x0800aa43
 800a9a8:	0800aa43 	.word	0x0800aa43
 800a9ac:	0800aa43 	.word	0x0800aa43
 800a9b0:	0800aa43 	.word	0x0800aa43
 800a9b4:	0800aa43 	.word	0x0800aa43
 800a9b8:	0800aa43 	.word	0x0800aa43
 800a9bc:	0800aa43 	.word	0x0800aa43
 800a9c0:	0800aa43 	.word	0x0800aa43
 800a9c4:	0800aa43 	.word	0x0800aa43
 800a9c8:	0800aa43 	.word	0x0800aa43
 800a9cc:	0800aa43 	.word	0x0800aa43
 800a9d0:	0800aa43 	.word	0x0800aa43
 800a9d4:	0800aa43 	.word	0x0800aa43
 800a9d8:	0800aa43 	.word	0x0800aa43
 800a9dc:	0800aa35 	.word	0x0800aa35
 800a9e0:	2b40      	cmp	r3, #64	@ 0x40
 800a9e2:	d02a      	beq.n	800aa3a <UART_SetConfig+0x8aa>
 800a9e4:	e02d      	b.n	800aa42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a9e6:	f7fe fb5d 	bl	80090a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9ec:	e02f      	b.n	800aa4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fe fb6c 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9fc:	e027      	b.n	800aa4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9fe:	f107 0318 	add.w	r3, r7, #24
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fe fcb8 	bl	8009378 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa0c:	e01f      	b.n	800aa4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa0e:	4b21      	ldr	r3, [pc, #132]	@ (800aa94 <UART_SetConfig+0x904>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d009      	beq.n	800aa2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa1a:	4b1e      	ldr	r3, [pc, #120]	@ (800aa94 <UART_SetConfig+0x904>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	08db      	lsrs	r3, r3, #3
 800aa20:	f003 0303 	and.w	r3, r3, #3
 800aa24:	4a1d      	ldr	r2, [pc, #116]	@ (800aa9c <UART_SetConfig+0x90c>)
 800aa26:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa2c:	e00f      	b.n	800aa4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aa2e:	4b1b      	ldr	r3, [pc, #108]	@ (800aa9c <UART_SetConfig+0x90c>)
 800aa30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa32:	e00c      	b.n	800aa4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa34:	4b1a      	ldr	r3, [pc, #104]	@ (800aaa0 <UART_SetConfig+0x910>)
 800aa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa38:	e009      	b.n	800aa4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa40:	e005      	b.n	800aa4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aa42:	2300      	movs	r3, #0
 800aa44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 81ee 	beq.w	800ae32 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa5a:	4a12      	ldr	r2, [pc, #72]	@ (800aaa4 <UART_SetConfig+0x914>)
 800aa5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa60:	461a      	mov	r2, r3
 800aa62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa64:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa68:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	005b      	lsls	r3, r3, #1
 800aa72:	4413      	add	r3, r2
 800aa74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d305      	bcc.n	800aa86 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d910      	bls.n	800aaa8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa8c:	e1d1      	b.n	800ae32 <UART_SetConfig+0xca2>
 800aa8e:	bf00      	nop
 800aa90:	40011c00 	.word	0x40011c00
 800aa94:	58024400 	.word	0x58024400
 800aa98:	58000c00 	.word	0x58000c00
 800aa9c:	03d09000 	.word	0x03d09000
 800aaa0:	003d0900 	.word	0x003d0900
 800aaa4:	0800c4d8 	.word	0x0800c4d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaaa:	2200      	movs	r2, #0
 800aaac:	60bb      	str	r3, [r7, #8]
 800aaae:	60fa      	str	r2, [r7, #12]
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab4:	4ac0      	ldr	r2, [pc, #768]	@ (800adb8 <UART_SetConfig+0xc28>)
 800aab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	2200      	movs	r2, #0
 800aabe:	603b      	str	r3, [r7, #0]
 800aac0:	607a      	str	r2, [r7, #4]
 800aac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aaca:	f7f5 fc71 	bl	80003b0 <__aeabi_uldivmod>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4610      	mov	r0, r2
 800aad4:	4619      	mov	r1, r3
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	f04f 0300 	mov.w	r3, #0
 800aade:	020b      	lsls	r3, r1, #8
 800aae0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aae4:	0202      	lsls	r2, r0, #8
 800aae6:	6979      	ldr	r1, [r7, #20]
 800aae8:	6849      	ldr	r1, [r1, #4]
 800aaea:	0849      	lsrs	r1, r1, #1
 800aaec:	2000      	movs	r0, #0
 800aaee:	460c      	mov	r4, r1
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	eb12 0804 	adds.w	r8, r2, r4
 800aaf6:	eb43 0905 	adc.w	r9, r3, r5
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	469a      	mov	sl, r3
 800ab02:	4693      	mov	fp, r2
 800ab04:	4652      	mov	r2, sl
 800ab06:	465b      	mov	r3, fp
 800ab08:	4640      	mov	r0, r8
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	f7f5 fc50 	bl	80003b0 <__aeabi_uldivmod>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	4613      	mov	r3, r2
 800ab16:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab1e:	d308      	bcc.n	800ab32 <UART_SetConfig+0x9a2>
 800ab20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab26:	d204      	bcs.n	800ab32 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab2e:	60da      	str	r2, [r3, #12]
 800ab30:	e17f      	b.n	800ae32 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab38:	e17b      	b.n	800ae32 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab42:	f040 80bd 	bne.w	800acc0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ab46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab4a:	2b20      	cmp	r3, #32
 800ab4c:	dc48      	bgt.n	800abe0 <UART_SetConfig+0xa50>
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	db7b      	blt.n	800ac4a <UART_SetConfig+0xaba>
 800ab52:	2b20      	cmp	r3, #32
 800ab54:	d879      	bhi.n	800ac4a <UART_SetConfig+0xaba>
 800ab56:	a201      	add	r2, pc, #4	@ (adr r2, 800ab5c <UART_SetConfig+0x9cc>)
 800ab58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5c:	0800abe7 	.word	0x0800abe7
 800ab60:	0800abef 	.word	0x0800abef
 800ab64:	0800ac4b 	.word	0x0800ac4b
 800ab68:	0800ac4b 	.word	0x0800ac4b
 800ab6c:	0800abf7 	.word	0x0800abf7
 800ab70:	0800ac4b 	.word	0x0800ac4b
 800ab74:	0800ac4b 	.word	0x0800ac4b
 800ab78:	0800ac4b 	.word	0x0800ac4b
 800ab7c:	0800ac07 	.word	0x0800ac07
 800ab80:	0800ac4b 	.word	0x0800ac4b
 800ab84:	0800ac4b 	.word	0x0800ac4b
 800ab88:	0800ac4b 	.word	0x0800ac4b
 800ab8c:	0800ac4b 	.word	0x0800ac4b
 800ab90:	0800ac4b 	.word	0x0800ac4b
 800ab94:	0800ac4b 	.word	0x0800ac4b
 800ab98:	0800ac4b 	.word	0x0800ac4b
 800ab9c:	0800ac17 	.word	0x0800ac17
 800aba0:	0800ac4b 	.word	0x0800ac4b
 800aba4:	0800ac4b 	.word	0x0800ac4b
 800aba8:	0800ac4b 	.word	0x0800ac4b
 800abac:	0800ac4b 	.word	0x0800ac4b
 800abb0:	0800ac4b 	.word	0x0800ac4b
 800abb4:	0800ac4b 	.word	0x0800ac4b
 800abb8:	0800ac4b 	.word	0x0800ac4b
 800abbc:	0800ac4b 	.word	0x0800ac4b
 800abc0:	0800ac4b 	.word	0x0800ac4b
 800abc4:	0800ac4b 	.word	0x0800ac4b
 800abc8:	0800ac4b 	.word	0x0800ac4b
 800abcc:	0800ac4b 	.word	0x0800ac4b
 800abd0:	0800ac4b 	.word	0x0800ac4b
 800abd4:	0800ac4b 	.word	0x0800ac4b
 800abd8:	0800ac4b 	.word	0x0800ac4b
 800abdc:	0800ac3d 	.word	0x0800ac3d
 800abe0:	2b40      	cmp	r3, #64	@ 0x40
 800abe2:	d02e      	beq.n	800ac42 <UART_SetConfig+0xab2>
 800abe4:	e031      	b.n	800ac4a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abe6:	f7fc fba3 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 800abea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abec:	e033      	b.n	800ac56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abee:	f7fc fbb5 	bl	800735c <HAL_RCC_GetPCLK2Freq>
 800abf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abf4:	e02f      	b.n	800ac56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fe fa68 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac04:	e027      	b.n	800ac56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac06:	f107 0318 	add.w	r3, r7, #24
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe fbb4 	bl	8009378 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac14:	e01f      	b.n	800ac56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac16:	4b69      	ldr	r3, [pc, #420]	@ (800adbc <UART_SetConfig+0xc2c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 0320 	and.w	r3, r3, #32
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d009      	beq.n	800ac36 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac22:	4b66      	ldr	r3, [pc, #408]	@ (800adbc <UART_SetConfig+0xc2c>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	08db      	lsrs	r3, r3, #3
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	4a64      	ldr	r2, [pc, #400]	@ (800adc0 <UART_SetConfig+0xc30>)
 800ac2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac34:	e00f      	b.n	800ac56 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ac36:	4b62      	ldr	r3, [pc, #392]	@ (800adc0 <UART_SetConfig+0xc30>)
 800ac38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac3a:	e00c      	b.n	800ac56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac3c:	4b61      	ldr	r3, [pc, #388]	@ (800adc4 <UART_SetConfig+0xc34>)
 800ac3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac40:	e009      	b.n	800ac56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac48:	e005      	b.n	800ac56 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 80ea 	beq.w	800ae32 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac62:	4a55      	ldr	r2, [pc, #340]	@ (800adb8 <UART_SetConfig+0xc28>)
 800ac64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac70:	005a      	lsls	r2, r3, #1
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	085b      	lsrs	r3, r3, #1
 800ac78:	441a      	add	r2, r3
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac86:	2b0f      	cmp	r3, #15
 800ac88:	d916      	bls.n	800acb8 <UART_SetConfig+0xb28>
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac90:	d212      	bcs.n	800acb8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	f023 030f 	bic.w	r3, r3, #15
 800ac9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9e:	085b      	lsrs	r3, r3, #1
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	f003 0307 	and.w	r3, r3, #7
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800acaa:	4313      	orrs	r3, r2
 800acac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800acb4:	60da      	str	r2, [r3, #12]
 800acb6:	e0bc      	b.n	800ae32 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800acbe:	e0b8      	b.n	800ae32 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800acc0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800acc4:	2b20      	cmp	r3, #32
 800acc6:	dc4b      	bgt.n	800ad60 <UART_SetConfig+0xbd0>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f2c0 8087 	blt.w	800addc <UART_SetConfig+0xc4c>
 800acce:	2b20      	cmp	r3, #32
 800acd0:	f200 8084 	bhi.w	800addc <UART_SetConfig+0xc4c>
 800acd4:	a201      	add	r2, pc, #4	@ (adr r2, 800acdc <UART_SetConfig+0xb4c>)
 800acd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acda:	bf00      	nop
 800acdc:	0800ad67 	.word	0x0800ad67
 800ace0:	0800ad6f 	.word	0x0800ad6f
 800ace4:	0800addd 	.word	0x0800addd
 800ace8:	0800addd 	.word	0x0800addd
 800acec:	0800ad77 	.word	0x0800ad77
 800acf0:	0800addd 	.word	0x0800addd
 800acf4:	0800addd 	.word	0x0800addd
 800acf8:	0800addd 	.word	0x0800addd
 800acfc:	0800ad87 	.word	0x0800ad87
 800ad00:	0800addd 	.word	0x0800addd
 800ad04:	0800addd 	.word	0x0800addd
 800ad08:	0800addd 	.word	0x0800addd
 800ad0c:	0800addd 	.word	0x0800addd
 800ad10:	0800addd 	.word	0x0800addd
 800ad14:	0800addd 	.word	0x0800addd
 800ad18:	0800addd 	.word	0x0800addd
 800ad1c:	0800ad97 	.word	0x0800ad97
 800ad20:	0800addd 	.word	0x0800addd
 800ad24:	0800addd 	.word	0x0800addd
 800ad28:	0800addd 	.word	0x0800addd
 800ad2c:	0800addd 	.word	0x0800addd
 800ad30:	0800addd 	.word	0x0800addd
 800ad34:	0800addd 	.word	0x0800addd
 800ad38:	0800addd 	.word	0x0800addd
 800ad3c:	0800addd 	.word	0x0800addd
 800ad40:	0800addd 	.word	0x0800addd
 800ad44:	0800addd 	.word	0x0800addd
 800ad48:	0800addd 	.word	0x0800addd
 800ad4c:	0800addd 	.word	0x0800addd
 800ad50:	0800addd 	.word	0x0800addd
 800ad54:	0800addd 	.word	0x0800addd
 800ad58:	0800addd 	.word	0x0800addd
 800ad5c:	0800adcf 	.word	0x0800adcf
 800ad60:	2b40      	cmp	r3, #64	@ 0x40
 800ad62:	d037      	beq.n	800add4 <UART_SetConfig+0xc44>
 800ad64:	e03a      	b.n	800addc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad66:	f7fc fae3 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 800ad6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad6c:	e03c      	b.n	800ade8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad6e:	f7fc faf5 	bl	800735c <HAL_RCC_GetPCLK2Freq>
 800ad72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad74:	e038      	b.n	800ade8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe f9a8 	bl	80090d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad84:	e030      	b.n	800ade8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad86:	f107 0318 	add.w	r3, r7, #24
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe faf4 	bl	8009378 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad94:	e028      	b.n	800ade8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad96:	4b09      	ldr	r3, [pc, #36]	@ (800adbc <UART_SetConfig+0xc2c>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0320 	and.w	r3, r3, #32
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d012      	beq.n	800adc8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ada2:	4b06      	ldr	r3, [pc, #24]	@ (800adbc <UART_SetConfig+0xc2c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	08db      	lsrs	r3, r3, #3
 800ada8:	f003 0303 	and.w	r3, r3, #3
 800adac:	4a04      	ldr	r2, [pc, #16]	@ (800adc0 <UART_SetConfig+0xc30>)
 800adae:	fa22 f303 	lsr.w	r3, r2, r3
 800adb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adb4:	e018      	b.n	800ade8 <UART_SetConfig+0xc58>
 800adb6:	bf00      	nop
 800adb8:	0800c4d8 	.word	0x0800c4d8
 800adbc:	58024400 	.word	0x58024400
 800adc0:	03d09000 	.word	0x03d09000
 800adc4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800adc8:	4b24      	ldr	r3, [pc, #144]	@ (800ae5c <UART_SetConfig+0xccc>)
 800adca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adcc:	e00c      	b.n	800ade8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800adce:	4b24      	ldr	r3, [pc, #144]	@ (800ae60 <UART_SetConfig+0xcd0>)
 800add0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add2:	e009      	b.n	800ade8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800add4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800add8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adda:	e005      	b.n	800ade8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800addc:	2300      	movs	r3, #0
 800adde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ade6:	bf00      	nop
    }

    if (pclk != 0U)
 800ade8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adea:	2b00      	cmp	r3, #0
 800adec:	d021      	beq.n	800ae32 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf2:	4a1c      	ldr	r2, [pc, #112]	@ (800ae64 <UART_SetConfig+0xcd4>)
 800adf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adf8:	461a      	mov	r2, r3
 800adfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfc:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	085b      	lsrs	r3, r3, #1
 800ae06:	441a      	add	r2, r3
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae10:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae14:	2b0f      	cmp	r3, #15
 800ae16:	d909      	bls.n	800ae2c <UART_SetConfig+0xc9c>
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae1e:	d205      	bcs.n	800ae2c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	60da      	str	r2, [r3, #12]
 800ae2a:	e002      	b.n	800ae32 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2200      	movs	r2, #0
 800ae46:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ae4e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3748      	adds	r7, #72	@ 0x48
 800ae56:	46bd      	mov	sp, r7
 800ae58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae5c:	03d09000 	.word	0x03d09000
 800ae60:	003d0900 	.word	0x003d0900
 800ae64:	0800c4d8 	.word	0x0800c4d8

0800ae68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae74:	f003 0308 	and.w	r3, r3, #8
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00a      	beq.n	800ae92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae96:	f003 0301 	and.w	r3, r3, #1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00a      	beq.n	800aeb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb8:	f003 0302 	and.w	r3, r3, #2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00a      	beq.n	800aed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	430a      	orrs	r2, r1
 800aed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeda:	f003 0304 	and.w	r3, r3, #4
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00a      	beq.n	800aef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	430a      	orrs	r2, r1
 800aef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefc:	f003 0310 	and.w	r3, r3, #16
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00a      	beq.n	800af1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	430a      	orrs	r2, r1
 800af18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af1e:	f003 0320 	and.w	r3, r3, #32
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00a      	beq.n	800af3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	430a      	orrs	r2, r1
 800af3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af44:	2b00      	cmp	r3, #0
 800af46:	d01a      	beq.n	800af7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	430a      	orrs	r2, r1
 800af5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af66:	d10a      	bne.n	800af7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00a      	beq.n	800afa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	605a      	str	r2, [r3, #4]
  }
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b098      	sub	sp, #96	@ 0x60
 800afb0:	af02      	add	r7, sp, #8
 800afb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afbc:	f7f6 fa78 	bl	80014b0 <HAL_GetTick>
 800afc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0308 	and.w	r3, r3, #8
 800afcc:	2b08      	cmp	r3, #8
 800afce:	d12f      	bne.n	800b030 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afd8:	2200      	movs	r2, #0
 800afda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f88e 	bl	800b100 <UART_WaitOnFlagUntilTimeout>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d022      	beq.n	800b030 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff2:	e853 3f00 	ldrex	r3, [r3]
 800aff6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800affa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800affe:	653b      	str	r3, [r7, #80]	@ 0x50
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	461a      	mov	r2, r3
 800b006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b008:	647b      	str	r3, [r7, #68]	@ 0x44
 800b00a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b00e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b010:	e841 2300 	strex	r3, r2, [r1]
 800b014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1e6      	bne.n	800afea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2220      	movs	r2, #32
 800b020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b02c:	2303      	movs	r3, #3
 800b02e:	e063      	b.n	800b0f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	d149      	bne.n	800b0d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b03e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b046:	2200      	movs	r2, #0
 800b048:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f857 	bl	800b100 <UART_WaitOnFlagUntilTimeout>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d03c      	beq.n	800b0d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b060:	e853 3f00 	ldrex	r3, [r3]
 800b064:	623b      	str	r3, [r7, #32]
   return(result);
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b06c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	461a      	mov	r2, r3
 800b074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b076:	633b      	str	r3, [r7, #48]	@ 0x30
 800b078:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b07c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b07e:	e841 2300 	strex	r3, r2, [r1]
 800b082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1e6      	bne.n	800b058 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3308      	adds	r3, #8
 800b090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	e853 3f00 	ldrex	r3, [r3]
 800b098:	60fb      	str	r3, [r7, #12]
   return(result);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f023 0301 	bic.w	r3, r3, #1
 800b0a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0aa:	61fa      	str	r2, [r7, #28]
 800b0ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	69b9      	ldr	r1, [r7, #24]
 800b0b0:	69fa      	ldr	r2, [r7, #28]
 800b0b2:	e841 2300 	strex	r3, r2, [r1]
 800b0b6:	617b      	str	r3, [r7, #20]
   return(result);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1e5      	bne.n	800b08a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e012      	b.n	800b0f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2220      	movs	r2, #32
 800b0de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3758      	adds	r7, #88	@ 0x58
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	603b      	str	r3, [r7, #0]
 800b10c:	4613      	mov	r3, r2
 800b10e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b110:	e04f      	b.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b118:	d04b      	beq.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b11a:	f7f6 f9c9 	bl	80014b0 <HAL_GetTick>
 800b11e:	4602      	mov	r2, r0
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	429a      	cmp	r2, r3
 800b128:	d302      	bcc.n	800b130 <UART_WaitOnFlagUntilTimeout+0x30>
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b130:	2303      	movs	r3, #3
 800b132:	e04e      	b.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 0304 	and.w	r3, r3, #4
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d037      	beq.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2b80      	cmp	r3, #128	@ 0x80
 800b146:	d034      	beq.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b40      	cmp	r3, #64	@ 0x40
 800b14c:	d031      	beq.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	69db      	ldr	r3, [r3, #28]
 800b154:	f003 0308 	and.w	r3, r3, #8
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d110      	bne.n	800b17e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2208      	movs	r2, #8
 800b162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 f839 	bl	800b1dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2208      	movs	r2, #8
 800b16e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e029      	b.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	69db      	ldr	r3, [r3, #28]
 800b184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b18c:	d111      	bne.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f000 f81f 	bl	800b1dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2220      	movs	r2, #32
 800b1a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	e00f      	b.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	69da      	ldr	r2, [r3, #28]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	bf0c      	ite	eq
 800b1c2:	2301      	moveq	r3, #1
 800b1c4:	2300      	movne	r3, #0
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d0a0      	beq.n	800b112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
	...

0800b1dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b095      	sub	sp, #84	@ 0x54
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ec:	e853 3f00 	ldrex	r3, [r3]
 800b1f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b202:	643b      	str	r3, [r7, #64]	@ 0x40
 800b204:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b206:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b208:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b20a:	e841 2300 	strex	r3, r2, [r1]
 800b20e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1e6      	bne.n	800b1e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3308      	adds	r3, #8
 800b21c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	e853 3f00 	ldrex	r3, [r3]
 800b224:	61fb      	str	r3, [r7, #28]
   return(result);
 800b226:	69fa      	ldr	r2, [r7, #28]
 800b228:	4b1e      	ldr	r3, [pc, #120]	@ (800b2a4 <UART_EndRxTransfer+0xc8>)
 800b22a:	4013      	ands	r3, r2
 800b22c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3308      	adds	r3, #8
 800b234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b238:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b23c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b23e:	e841 2300 	strex	r3, r2, [r1]
 800b242:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1e5      	bne.n	800b216 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d118      	bne.n	800b284 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f023 0310 	bic.w	r3, r3, #16
 800b266:	647b      	str	r3, [r7, #68]	@ 0x44
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	461a      	mov	r2, r3
 800b26e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b270:	61bb      	str	r3, [r7, #24]
 800b272:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	6979      	ldr	r1, [r7, #20]
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	613b      	str	r3, [r7, #16]
   return(result);
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e6      	bne.n	800b252 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2220      	movs	r2, #32
 800b288:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b298:	bf00      	nop
 800b29a:	3754      	adds	r7, #84	@ 0x54
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	effffffe 	.word	0xeffffffe

0800b2a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d101      	bne.n	800b2be <HAL_UARTEx_DisableFifoMode+0x16>
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	e027      	b.n	800b30e <HAL_UARTEx_DisableFifoMode+0x66>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2224      	movs	r2, #36	@ 0x24
 800b2ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f022 0201 	bic.w	r2, r2, #1
 800b2e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b2ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d101      	bne.n	800b332 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b32e:	2302      	movs	r3, #2
 800b330:	e02d      	b.n	800b38e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2224      	movs	r2, #36	@ 0x24
 800b33e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f022 0201 	bic.w	r2, r2, #1
 800b358:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f850 	bl	800b414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2220      	movs	r2, #32
 800b380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d101      	bne.n	800b3ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	e02d      	b.n	800b40a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2224      	movs	r2, #36	@ 0x24
 800b3ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 0201 	bic.w	r2, r2, #1
 800b3d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f812 	bl	800b414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2220      	movs	r2, #32
 800b3fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
	...

0800b414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b420:	2b00      	cmp	r3, #0
 800b422:	d108      	bne.n	800b436 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b434:	e031      	b.n	800b49a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b436:	2310      	movs	r3, #16
 800b438:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b43a:	2310      	movs	r3, #16
 800b43c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	0e5b      	lsrs	r3, r3, #25
 800b446:	b2db      	uxtb	r3, r3
 800b448:	f003 0307 	and.w	r3, r3, #7
 800b44c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	0f5b      	lsrs	r3, r3, #29
 800b456:	b2db      	uxtb	r3, r3
 800b458:	f003 0307 	and.w	r3, r3, #7
 800b45c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	7b3a      	ldrb	r2, [r7, #12]
 800b462:	4911      	ldr	r1, [pc, #68]	@ (800b4a8 <UARTEx_SetNbDataToProcess+0x94>)
 800b464:	5c8a      	ldrb	r2, [r1, r2]
 800b466:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b46a:	7b3a      	ldrb	r2, [r7, #12]
 800b46c:	490f      	ldr	r1, [pc, #60]	@ (800b4ac <UARTEx_SetNbDataToProcess+0x98>)
 800b46e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b470:	fb93 f3f2 	sdiv	r3, r3, r2
 800b474:	b29a      	uxth	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
 800b47e:	7b7a      	ldrb	r2, [r7, #13]
 800b480:	4909      	ldr	r1, [pc, #36]	@ (800b4a8 <UARTEx_SetNbDataToProcess+0x94>)
 800b482:	5c8a      	ldrb	r2, [r1, r2]
 800b484:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b488:	7b7a      	ldrb	r2, [r7, #13]
 800b48a:	4908      	ldr	r1, [pc, #32]	@ (800b4ac <UARTEx_SetNbDataToProcess+0x98>)
 800b48c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b48e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b492:	b29a      	uxth	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b49a:	bf00      	nop
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	0800c4f0 	.word	0x0800c4f0
 800b4ac:	0800c4f8 	.word	0x0800c4f8

0800b4b0 <std>:
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	b510      	push	{r4, lr}
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b4ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4be:	6083      	str	r3, [r0, #8]
 800b4c0:	8181      	strh	r1, [r0, #12]
 800b4c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b4c4:	81c2      	strh	r2, [r0, #14]
 800b4c6:	6183      	str	r3, [r0, #24]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	2208      	movs	r2, #8
 800b4cc:	305c      	adds	r0, #92	@ 0x5c
 800b4ce:	f000 fa01 	bl	800b8d4 <memset>
 800b4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b508 <std+0x58>)
 800b4d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b50c <std+0x5c>)
 800b4d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b4da:	4b0d      	ldr	r3, [pc, #52]	@ (800b510 <std+0x60>)
 800b4dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b4de:	4b0d      	ldr	r3, [pc, #52]	@ (800b514 <std+0x64>)
 800b4e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b518 <std+0x68>)
 800b4e4:	6224      	str	r4, [r4, #32]
 800b4e6:	429c      	cmp	r4, r3
 800b4e8:	d006      	beq.n	800b4f8 <std+0x48>
 800b4ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b4ee:	4294      	cmp	r4, r2
 800b4f0:	d002      	beq.n	800b4f8 <std+0x48>
 800b4f2:	33d0      	adds	r3, #208	@ 0xd0
 800b4f4:	429c      	cmp	r4, r3
 800b4f6:	d105      	bne.n	800b504 <std+0x54>
 800b4f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b500:	f000 ba60 	b.w	800b9c4 <__retarget_lock_init_recursive>
 800b504:	bd10      	pop	{r4, pc}
 800b506:	bf00      	nop
 800b508:	0800b725 	.word	0x0800b725
 800b50c:	0800b747 	.word	0x0800b747
 800b510:	0800b77f 	.word	0x0800b77f
 800b514:	0800b7a3 	.word	0x0800b7a3
 800b518:	240004cc 	.word	0x240004cc

0800b51c <stdio_exit_handler>:
 800b51c:	4a02      	ldr	r2, [pc, #8]	@ (800b528 <stdio_exit_handler+0xc>)
 800b51e:	4903      	ldr	r1, [pc, #12]	@ (800b52c <stdio_exit_handler+0x10>)
 800b520:	4803      	ldr	r0, [pc, #12]	@ (800b530 <stdio_exit_handler+0x14>)
 800b522:	f000 b869 	b.w	800b5f8 <_fwalk_sglue>
 800b526:	bf00      	nop
 800b528:	24000010 	.word	0x24000010
 800b52c:	0800c265 	.word	0x0800c265
 800b530:	24000020 	.word	0x24000020

0800b534 <cleanup_stdio>:
 800b534:	6841      	ldr	r1, [r0, #4]
 800b536:	4b0c      	ldr	r3, [pc, #48]	@ (800b568 <cleanup_stdio+0x34>)
 800b538:	4299      	cmp	r1, r3
 800b53a:	b510      	push	{r4, lr}
 800b53c:	4604      	mov	r4, r0
 800b53e:	d001      	beq.n	800b544 <cleanup_stdio+0x10>
 800b540:	f000 fe90 	bl	800c264 <_fflush_r>
 800b544:	68a1      	ldr	r1, [r4, #8]
 800b546:	4b09      	ldr	r3, [pc, #36]	@ (800b56c <cleanup_stdio+0x38>)
 800b548:	4299      	cmp	r1, r3
 800b54a:	d002      	beq.n	800b552 <cleanup_stdio+0x1e>
 800b54c:	4620      	mov	r0, r4
 800b54e:	f000 fe89 	bl	800c264 <_fflush_r>
 800b552:	68e1      	ldr	r1, [r4, #12]
 800b554:	4b06      	ldr	r3, [pc, #24]	@ (800b570 <cleanup_stdio+0x3c>)
 800b556:	4299      	cmp	r1, r3
 800b558:	d004      	beq.n	800b564 <cleanup_stdio+0x30>
 800b55a:	4620      	mov	r0, r4
 800b55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b560:	f000 be80 	b.w	800c264 <_fflush_r>
 800b564:	bd10      	pop	{r4, pc}
 800b566:	bf00      	nop
 800b568:	240004cc 	.word	0x240004cc
 800b56c:	24000534 	.word	0x24000534
 800b570:	2400059c 	.word	0x2400059c

0800b574 <global_stdio_init.part.0>:
 800b574:	b510      	push	{r4, lr}
 800b576:	4b0b      	ldr	r3, [pc, #44]	@ (800b5a4 <global_stdio_init.part.0+0x30>)
 800b578:	4c0b      	ldr	r4, [pc, #44]	@ (800b5a8 <global_stdio_init.part.0+0x34>)
 800b57a:	4a0c      	ldr	r2, [pc, #48]	@ (800b5ac <global_stdio_init.part.0+0x38>)
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	4620      	mov	r0, r4
 800b580:	2200      	movs	r2, #0
 800b582:	2104      	movs	r1, #4
 800b584:	f7ff ff94 	bl	800b4b0 <std>
 800b588:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b58c:	2201      	movs	r2, #1
 800b58e:	2109      	movs	r1, #9
 800b590:	f7ff ff8e 	bl	800b4b0 <std>
 800b594:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b598:	2202      	movs	r2, #2
 800b59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b59e:	2112      	movs	r1, #18
 800b5a0:	f7ff bf86 	b.w	800b4b0 <std>
 800b5a4:	24000604 	.word	0x24000604
 800b5a8:	240004cc 	.word	0x240004cc
 800b5ac:	0800b51d 	.word	0x0800b51d

0800b5b0 <__sfp_lock_acquire>:
 800b5b0:	4801      	ldr	r0, [pc, #4]	@ (800b5b8 <__sfp_lock_acquire+0x8>)
 800b5b2:	f000 ba08 	b.w	800b9c6 <__retarget_lock_acquire_recursive>
 800b5b6:	bf00      	nop
 800b5b8:	2400060d 	.word	0x2400060d

0800b5bc <__sfp_lock_release>:
 800b5bc:	4801      	ldr	r0, [pc, #4]	@ (800b5c4 <__sfp_lock_release+0x8>)
 800b5be:	f000 ba03 	b.w	800b9c8 <__retarget_lock_release_recursive>
 800b5c2:	bf00      	nop
 800b5c4:	2400060d 	.word	0x2400060d

0800b5c8 <__sinit>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	f7ff fff0 	bl	800b5b0 <__sfp_lock_acquire>
 800b5d0:	6a23      	ldr	r3, [r4, #32]
 800b5d2:	b11b      	cbz	r3, 800b5dc <__sinit+0x14>
 800b5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5d8:	f7ff bff0 	b.w	800b5bc <__sfp_lock_release>
 800b5dc:	4b04      	ldr	r3, [pc, #16]	@ (800b5f0 <__sinit+0x28>)
 800b5de:	6223      	str	r3, [r4, #32]
 800b5e0:	4b04      	ldr	r3, [pc, #16]	@ (800b5f4 <__sinit+0x2c>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1f5      	bne.n	800b5d4 <__sinit+0xc>
 800b5e8:	f7ff ffc4 	bl	800b574 <global_stdio_init.part.0>
 800b5ec:	e7f2      	b.n	800b5d4 <__sinit+0xc>
 800b5ee:	bf00      	nop
 800b5f0:	0800b535 	.word	0x0800b535
 800b5f4:	24000604 	.word	0x24000604

0800b5f8 <_fwalk_sglue>:
 800b5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5fc:	4607      	mov	r7, r0
 800b5fe:	4688      	mov	r8, r1
 800b600:	4614      	mov	r4, r2
 800b602:	2600      	movs	r6, #0
 800b604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b608:	f1b9 0901 	subs.w	r9, r9, #1
 800b60c:	d505      	bpl.n	800b61a <_fwalk_sglue+0x22>
 800b60e:	6824      	ldr	r4, [r4, #0]
 800b610:	2c00      	cmp	r4, #0
 800b612:	d1f7      	bne.n	800b604 <_fwalk_sglue+0xc>
 800b614:	4630      	mov	r0, r6
 800b616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b61a:	89ab      	ldrh	r3, [r5, #12]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d907      	bls.n	800b630 <_fwalk_sglue+0x38>
 800b620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b624:	3301      	adds	r3, #1
 800b626:	d003      	beq.n	800b630 <_fwalk_sglue+0x38>
 800b628:	4629      	mov	r1, r5
 800b62a:	4638      	mov	r0, r7
 800b62c:	47c0      	blx	r8
 800b62e:	4306      	orrs	r6, r0
 800b630:	3568      	adds	r5, #104	@ 0x68
 800b632:	e7e9      	b.n	800b608 <_fwalk_sglue+0x10>

0800b634 <iprintf>:
 800b634:	b40f      	push	{r0, r1, r2, r3}
 800b636:	b507      	push	{r0, r1, r2, lr}
 800b638:	4906      	ldr	r1, [pc, #24]	@ (800b654 <iprintf+0x20>)
 800b63a:	ab04      	add	r3, sp, #16
 800b63c:	6808      	ldr	r0, [r1, #0]
 800b63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b642:	6881      	ldr	r1, [r0, #8]
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	f000 fae3 	bl	800bc10 <_vfiprintf_r>
 800b64a:	b003      	add	sp, #12
 800b64c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b650:	b004      	add	sp, #16
 800b652:	4770      	bx	lr
 800b654:	2400001c 	.word	0x2400001c

0800b658 <putchar>:
 800b658:	4b02      	ldr	r3, [pc, #8]	@ (800b664 <putchar+0xc>)
 800b65a:	4601      	mov	r1, r0
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	6882      	ldr	r2, [r0, #8]
 800b660:	f000 be8a 	b.w	800c378 <_putc_r>
 800b664:	2400001c 	.word	0x2400001c

0800b668 <_puts_r>:
 800b668:	6a03      	ldr	r3, [r0, #32]
 800b66a:	b570      	push	{r4, r5, r6, lr}
 800b66c:	6884      	ldr	r4, [r0, #8]
 800b66e:	4605      	mov	r5, r0
 800b670:	460e      	mov	r6, r1
 800b672:	b90b      	cbnz	r3, 800b678 <_puts_r+0x10>
 800b674:	f7ff ffa8 	bl	800b5c8 <__sinit>
 800b678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b67a:	07db      	lsls	r3, r3, #31
 800b67c:	d405      	bmi.n	800b68a <_puts_r+0x22>
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	0598      	lsls	r0, r3, #22
 800b682:	d402      	bmi.n	800b68a <_puts_r+0x22>
 800b684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b686:	f000 f99e 	bl	800b9c6 <__retarget_lock_acquire_recursive>
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	0719      	lsls	r1, r3, #28
 800b68e:	d502      	bpl.n	800b696 <_puts_r+0x2e>
 800b690:	6923      	ldr	r3, [r4, #16]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d135      	bne.n	800b702 <_puts_r+0x9a>
 800b696:	4621      	mov	r1, r4
 800b698:	4628      	mov	r0, r5
 800b69a:	f000 f8c5 	bl	800b828 <__swsetup_r>
 800b69e:	b380      	cbz	r0, 800b702 <_puts_r+0x9a>
 800b6a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b6a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6a6:	07da      	lsls	r2, r3, #31
 800b6a8:	d405      	bmi.n	800b6b6 <_puts_r+0x4e>
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	059b      	lsls	r3, r3, #22
 800b6ae:	d402      	bmi.n	800b6b6 <_puts_r+0x4e>
 800b6b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6b2:	f000 f989 	bl	800b9c8 <__retarget_lock_release_recursive>
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	da04      	bge.n	800b6c8 <_puts_r+0x60>
 800b6be:	69a2      	ldr	r2, [r4, #24]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	dc17      	bgt.n	800b6f4 <_puts_r+0x8c>
 800b6c4:	290a      	cmp	r1, #10
 800b6c6:	d015      	beq.n	800b6f4 <_puts_r+0x8c>
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	6022      	str	r2, [r4, #0]
 800b6ce:	7019      	strb	r1, [r3, #0]
 800b6d0:	68a3      	ldr	r3, [r4, #8]
 800b6d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	60a3      	str	r3, [r4, #8]
 800b6da:	2900      	cmp	r1, #0
 800b6dc:	d1ed      	bne.n	800b6ba <_puts_r+0x52>
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	da11      	bge.n	800b706 <_puts_r+0x9e>
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	210a      	movs	r1, #10
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f000 f85f 	bl	800b7aa <__swbuf_r>
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d0d7      	beq.n	800b6a0 <_puts_r+0x38>
 800b6f0:	250a      	movs	r5, #10
 800b6f2:	e7d7      	b.n	800b6a4 <_puts_r+0x3c>
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	f000 f857 	bl	800b7aa <__swbuf_r>
 800b6fc:	3001      	adds	r0, #1
 800b6fe:	d1e7      	bne.n	800b6d0 <_puts_r+0x68>
 800b700:	e7ce      	b.n	800b6a0 <_puts_r+0x38>
 800b702:	3e01      	subs	r6, #1
 800b704:	e7e4      	b.n	800b6d0 <_puts_r+0x68>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	6022      	str	r2, [r4, #0]
 800b70c:	220a      	movs	r2, #10
 800b70e:	701a      	strb	r2, [r3, #0]
 800b710:	e7ee      	b.n	800b6f0 <_puts_r+0x88>
	...

0800b714 <puts>:
 800b714:	4b02      	ldr	r3, [pc, #8]	@ (800b720 <puts+0xc>)
 800b716:	4601      	mov	r1, r0
 800b718:	6818      	ldr	r0, [r3, #0]
 800b71a:	f7ff bfa5 	b.w	800b668 <_puts_r>
 800b71e:	bf00      	nop
 800b720:	2400001c 	.word	0x2400001c

0800b724 <__sread>:
 800b724:	b510      	push	{r4, lr}
 800b726:	460c      	mov	r4, r1
 800b728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b72c:	f000 f8fc 	bl	800b928 <_read_r>
 800b730:	2800      	cmp	r0, #0
 800b732:	bfab      	itete	ge
 800b734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b736:	89a3      	ldrhlt	r3, [r4, #12]
 800b738:	181b      	addge	r3, r3, r0
 800b73a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b73e:	bfac      	ite	ge
 800b740:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b742:	81a3      	strhlt	r3, [r4, #12]
 800b744:	bd10      	pop	{r4, pc}

0800b746 <__swrite>:
 800b746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74a:	461f      	mov	r7, r3
 800b74c:	898b      	ldrh	r3, [r1, #12]
 800b74e:	05db      	lsls	r3, r3, #23
 800b750:	4605      	mov	r5, r0
 800b752:	460c      	mov	r4, r1
 800b754:	4616      	mov	r6, r2
 800b756:	d505      	bpl.n	800b764 <__swrite+0x1e>
 800b758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b75c:	2302      	movs	r3, #2
 800b75e:	2200      	movs	r2, #0
 800b760:	f000 f8d0 	bl	800b904 <_lseek_r>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b76a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b76e:	81a3      	strh	r3, [r4, #12]
 800b770:	4632      	mov	r2, r6
 800b772:	463b      	mov	r3, r7
 800b774:	4628      	mov	r0, r5
 800b776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b77a:	f000 b8e7 	b.w	800b94c <_write_r>

0800b77e <__sseek>:
 800b77e:	b510      	push	{r4, lr}
 800b780:	460c      	mov	r4, r1
 800b782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b786:	f000 f8bd 	bl	800b904 <_lseek_r>
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	bf15      	itete	ne
 800b790:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b79a:	81a3      	strheq	r3, [r4, #12]
 800b79c:	bf18      	it	ne
 800b79e:	81a3      	strhne	r3, [r4, #12]
 800b7a0:	bd10      	pop	{r4, pc}

0800b7a2 <__sclose>:
 800b7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a6:	f000 b89d 	b.w	800b8e4 <_close_r>

0800b7aa <__swbuf_r>:
 800b7aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ac:	460e      	mov	r6, r1
 800b7ae:	4614      	mov	r4, r2
 800b7b0:	4605      	mov	r5, r0
 800b7b2:	b118      	cbz	r0, 800b7bc <__swbuf_r+0x12>
 800b7b4:	6a03      	ldr	r3, [r0, #32]
 800b7b6:	b90b      	cbnz	r3, 800b7bc <__swbuf_r+0x12>
 800b7b8:	f7ff ff06 	bl	800b5c8 <__sinit>
 800b7bc:	69a3      	ldr	r3, [r4, #24]
 800b7be:	60a3      	str	r3, [r4, #8]
 800b7c0:	89a3      	ldrh	r3, [r4, #12]
 800b7c2:	071a      	lsls	r2, r3, #28
 800b7c4:	d501      	bpl.n	800b7ca <__swbuf_r+0x20>
 800b7c6:	6923      	ldr	r3, [r4, #16]
 800b7c8:	b943      	cbnz	r3, 800b7dc <__swbuf_r+0x32>
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	f000 f82b 	bl	800b828 <__swsetup_r>
 800b7d2:	b118      	cbz	r0, 800b7dc <__swbuf_r+0x32>
 800b7d4:	f04f 37ff 	mov.w	r7, #4294967295
 800b7d8:	4638      	mov	r0, r7
 800b7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	6922      	ldr	r2, [r4, #16]
 800b7e0:	1a98      	subs	r0, r3, r2
 800b7e2:	6963      	ldr	r3, [r4, #20]
 800b7e4:	b2f6      	uxtb	r6, r6
 800b7e6:	4283      	cmp	r3, r0
 800b7e8:	4637      	mov	r7, r6
 800b7ea:	dc05      	bgt.n	800b7f8 <__swbuf_r+0x4e>
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f000 fd38 	bl	800c264 <_fflush_r>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d1ed      	bne.n	800b7d4 <__swbuf_r+0x2a>
 800b7f8:	68a3      	ldr	r3, [r4, #8]
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	60a3      	str	r3, [r4, #8]
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	6022      	str	r2, [r4, #0]
 800b804:	701e      	strb	r6, [r3, #0]
 800b806:	6962      	ldr	r2, [r4, #20]
 800b808:	1c43      	adds	r3, r0, #1
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d004      	beq.n	800b818 <__swbuf_r+0x6e>
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	07db      	lsls	r3, r3, #31
 800b812:	d5e1      	bpl.n	800b7d8 <__swbuf_r+0x2e>
 800b814:	2e0a      	cmp	r6, #10
 800b816:	d1df      	bne.n	800b7d8 <__swbuf_r+0x2e>
 800b818:	4621      	mov	r1, r4
 800b81a:	4628      	mov	r0, r5
 800b81c:	f000 fd22 	bl	800c264 <_fflush_r>
 800b820:	2800      	cmp	r0, #0
 800b822:	d0d9      	beq.n	800b7d8 <__swbuf_r+0x2e>
 800b824:	e7d6      	b.n	800b7d4 <__swbuf_r+0x2a>
	...

0800b828 <__swsetup_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4b29      	ldr	r3, [pc, #164]	@ (800b8d0 <__swsetup_r+0xa8>)
 800b82c:	4605      	mov	r5, r0
 800b82e:	6818      	ldr	r0, [r3, #0]
 800b830:	460c      	mov	r4, r1
 800b832:	b118      	cbz	r0, 800b83c <__swsetup_r+0x14>
 800b834:	6a03      	ldr	r3, [r0, #32]
 800b836:	b90b      	cbnz	r3, 800b83c <__swsetup_r+0x14>
 800b838:	f7ff fec6 	bl	800b5c8 <__sinit>
 800b83c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b840:	0719      	lsls	r1, r3, #28
 800b842:	d422      	bmi.n	800b88a <__swsetup_r+0x62>
 800b844:	06da      	lsls	r2, r3, #27
 800b846:	d407      	bmi.n	800b858 <__swsetup_r+0x30>
 800b848:	2209      	movs	r2, #9
 800b84a:	602a      	str	r2, [r5, #0]
 800b84c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b850:	81a3      	strh	r3, [r4, #12]
 800b852:	f04f 30ff 	mov.w	r0, #4294967295
 800b856:	e033      	b.n	800b8c0 <__swsetup_r+0x98>
 800b858:	0758      	lsls	r0, r3, #29
 800b85a:	d512      	bpl.n	800b882 <__swsetup_r+0x5a>
 800b85c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b85e:	b141      	cbz	r1, 800b872 <__swsetup_r+0x4a>
 800b860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b864:	4299      	cmp	r1, r3
 800b866:	d002      	beq.n	800b86e <__swsetup_r+0x46>
 800b868:	4628      	mov	r0, r5
 800b86a:	f000 f8af 	bl	800b9cc <_free_r>
 800b86e:	2300      	movs	r3, #0
 800b870:	6363      	str	r3, [r4, #52]	@ 0x34
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b878:	81a3      	strh	r3, [r4, #12]
 800b87a:	2300      	movs	r3, #0
 800b87c:	6063      	str	r3, [r4, #4]
 800b87e:	6923      	ldr	r3, [r4, #16]
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	f043 0308 	orr.w	r3, r3, #8
 800b888:	81a3      	strh	r3, [r4, #12]
 800b88a:	6923      	ldr	r3, [r4, #16]
 800b88c:	b94b      	cbnz	r3, 800b8a2 <__swsetup_r+0x7a>
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b898:	d003      	beq.n	800b8a2 <__swsetup_r+0x7a>
 800b89a:	4621      	mov	r1, r4
 800b89c:	4628      	mov	r0, r5
 800b89e:	f000 fd2f 	bl	800c300 <__smakebuf_r>
 800b8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a6:	f013 0201 	ands.w	r2, r3, #1
 800b8aa:	d00a      	beq.n	800b8c2 <__swsetup_r+0x9a>
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	60a2      	str	r2, [r4, #8]
 800b8b0:	6962      	ldr	r2, [r4, #20]
 800b8b2:	4252      	negs	r2, r2
 800b8b4:	61a2      	str	r2, [r4, #24]
 800b8b6:	6922      	ldr	r2, [r4, #16]
 800b8b8:	b942      	cbnz	r2, 800b8cc <__swsetup_r+0xa4>
 800b8ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b8be:	d1c5      	bne.n	800b84c <__swsetup_r+0x24>
 800b8c0:	bd38      	pop	{r3, r4, r5, pc}
 800b8c2:	0799      	lsls	r1, r3, #30
 800b8c4:	bf58      	it	pl
 800b8c6:	6962      	ldrpl	r2, [r4, #20]
 800b8c8:	60a2      	str	r2, [r4, #8]
 800b8ca:	e7f4      	b.n	800b8b6 <__swsetup_r+0x8e>
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	e7f7      	b.n	800b8c0 <__swsetup_r+0x98>
 800b8d0:	2400001c 	.word	0x2400001c

0800b8d4 <memset>:
 800b8d4:	4402      	add	r2, r0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d100      	bne.n	800b8de <memset+0xa>
 800b8dc:	4770      	bx	lr
 800b8de:	f803 1b01 	strb.w	r1, [r3], #1
 800b8e2:	e7f9      	b.n	800b8d8 <memset+0x4>

0800b8e4 <_close_r>:
 800b8e4:	b538      	push	{r3, r4, r5, lr}
 800b8e6:	4d06      	ldr	r5, [pc, #24]	@ (800b900 <_close_r+0x1c>)
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	4608      	mov	r0, r1
 800b8ee:	602b      	str	r3, [r5, #0]
 800b8f0:	f7f5 fc4b 	bl	800118a <_close>
 800b8f4:	1c43      	adds	r3, r0, #1
 800b8f6:	d102      	bne.n	800b8fe <_close_r+0x1a>
 800b8f8:	682b      	ldr	r3, [r5, #0]
 800b8fa:	b103      	cbz	r3, 800b8fe <_close_r+0x1a>
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	24000608 	.word	0x24000608

0800b904 <_lseek_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d07      	ldr	r5, [pc, #28]	@ (800b924 <_lseek_r+0x20>)
 800b908:	4604      	mov	r4, r0
 800b90a:	4608      	mov	r0, r1
 800b90c:	4611      	mov	r1, r2
 800b90e:	2200      	movs	r2, #0
 800b910:	602a      	str	r2, [r5, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	f7f5 fc60 	bl	80011d8 <_lseek>
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	d102      	bne.n	800b922 <_lseek_r+0x1e>
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	b103      	cbz	r3, 800b922 <_lseek_r+0x1e>
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	bd38      	pop	{r3, r4, r5, pc}
 800b924:	24000608 	.word	0x24000608

0800b928 <_read_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d07      	ldr	r5, [pc, #28]	@ (800b948 <_read_r+0x20>)
 800b92c:	4604      	mov	r4, r0
 800b92e:	4608      	mov	r0, r1
 800b930:	4611      	mov	r1, r2
 800b932:	2200      	movs	r2, #0
 800b934:	602a      	str	r2, [r5, #0]
 800b936:	461a      	mov	r2, r3
 800b938:	f7f5 fbee 	bl	8001118 <_read>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d102      	bne.n	800b946 <_read_r+0x1e>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	b103      	cbz	r3, 800b946 <_read_r+0x1e>
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	24000608 	.word	0x24000608

0800b94c <_write_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d07      	ldr	r5, [pc, #28]	@ (800b96c <_write_r+0x20>)
 800b950:	4604      	mov	r4, r0
 800b952:	4608      	mov	r0, r1
 800b954:	4611      	mov	r1, r2
 800b956:	2200      	movs	r2, #0
 800b958:	602a      	str	r2, [r5, #0]
 800b95a:	461a      	mov	r2, r3
 800b95c:	f7f5 fbf9 	bl	8001152 <_write>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	d102      	bne.n	800b96a <_write_r+0x1e>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	b103      	cbz	r3, 800b96a <_write_r+0x1e>
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	24000608 	.word	0x24000608

0800b970 <__errno>:
 800b970:	4b01      	ldr	r3, [pc, #4]	@ (800b978 <__errno+0x8>)
 800b972:	6818      	ldr	r0, [r3, #0]
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	2400001c 	.word	0x2400001c

0800b97c <__libc_init_array>:
 800b97c:	b570      	push	{r4, r5, r6, lr}
 800b97e:	4d0d      	ldr	r5, [pc, #52]	@ (800b9b4 <__libc_init_array+0x38>)
 800b980:	4c0d      	ldr	r4, [pc, #52]	@ (800b9b8 <__libc_init_array+0x3c>)
 800b982:	1b64      	subs	r4, r4, r5
 800b984:	10a4      	asrs	r4, r4, #2
 800b986:	2600      	movs	r6, #0
 800b988:	42a6      	cmp	r6, r4
 800b98a:	d109      	bne.n	800b9a0 <__libc_init_array+0x24>
 800b98c:	4d0b      	ldr	r5, [pc, #44]	@ (800b9bc <__libc_init_array+0x40>)
 800b98e:	4c0c      	ldr	r4, [pc, #48]	@ (800b9c0 <__libc_init_array+0x44>)
 800b990:	f000 fd58 	bl	800c444 <_init>
 800b994:	1b64      	subs	r4, r4, r5
 800b996:	10a4      	asrs	r4, r4, #2
 800b998:	2600      	movs	r6, #0
 800b99a:	42a6      	cmp	r6, r4
 800b99c:	d105      	bne.n	800b9aa <__libc_init_array+0x2e>
 800b99e:	bd70      	pop	{r4, r5, r6, pc}
 800b9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a4:	4798      	blx	r3
 800b9a6:	3601      	adds	r6, #1
 800b9a8:	e7ee      	b.n	800b988 <__libc_init_array+0xc>
 800b9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ae:	4798      	blx	r3
 800b9b0:	3601      	adds	r6, #1
 800b9b2:	e7f2      	b.n	800b99a <__libc_init_array+0x1e>
 800b9b4:	0800c53c 	.word	0x0800c53c
 800b9b8:	0800c53c 	.word	0x0800c53c
 800b9bc:	0800c53c 	.word	0x0800c53c
 800b9c0:	0800c540 	.word	0x0800c540

0800b9c4 <__retarget_lock_init_recursive>:
 800b9c4:	4770      	bx	lr

0800b9c6 <__retarget_lock_acquire_recursive>:
 800b9c6:	4770      	bx	lr

0800b9c8 <__retarget_lock_release_recursive>:
 800b9c8:	4770      	bx	lr
	...

0800b9cc <_free_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4605      	mov	r5, r0
 800b9d0:	2900      	cmp	r1, #0
 800b9d2:	d041      	beq.n	800ba58 <_free_r+0x8c>
 800b9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d8:	1f0c      	subs	r4, r1, #4
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	bfb8      	it	lt
 800b9de:	18e4      	addlt	r4, r4, r3
 800b9e0:	f000 f8e0 	bl	800bba4 <__malloc_lock>
 800b9e4:	4a1d      	ldr	r2, [pc, #116]	@ (800ba5c <_free_r+0x90>)
 800b9e6:	6813      	ldr	r3, [r2, #0]
 800b9e8:	b933      	cbnz	r3, 800b9f8 <_free_r+0x2c>
 800b9ea:	6063      	str	r3, [r4, #4]
 800b9ec:	6014      	str	r4, [r2, #0]
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9f4:	f000 b8dc 	b.w	800bbb0 <__malloc_unlock>
 800b9f8:	42a3      	cmp	r3, r4
 800b9fa:	d908      	bls.n	800ba0e <_free_r+0x42>
 800b9fc:	6820      	ldr	r0, [r4, #0]
 800b9fe:	1821      	adds	r1, r4, r0
 800ba00:	428b      	cmp	r3, r1
 800ba02:	bf01      	itttt	eq
 800ba04:	6819      	ldreq	r1, [r3, #0]
 800ba06:	685b      	ldreq	r3, [r3, #4]
 800ba08:	1809      	addeq	r1, r1, r0
 800ba0a:	6021      	streq	r1, [r4, #0]
 800ba0c:	e7ed      	b.n	800b9ea <_free_r+0x1e>
 800ba0e:	461a      	mov	r2, r3
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	b10b      	cbz	r3, 800ba18 <_free_r+0x4c>
 800ba14:	42a3      	cmp	r3, r4
 800ba16:	d9fa      	bls.n	800ba0e <_free_r+0x42>
 800ba18:	6811      	ldr	r1, [r2, #0]
 800ba1a:	1850      	adds	r0, r2, r1
 800ba1c:	42a0      	cmp	r0, r4
 800ba1e:	d10b      	bne.n	800ba38 <_free_r+0x6c>
 800ba20:	6820      	ldr	r0, [r4, #0]
 800ba22:	4401      	add	r1, r0
 800ba24:	1850      	adds	r0, r2, r1
 800ba26:	4283      	cmp	r3, r0
 800ba28:	6011      	str	r1, [r2, #0]
 800ba2a:	d1e0      	bne.n	800b9ee <_free_r+0x22>
 800ba2c:	6818      	ldr	r0, [r3, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	6053      	str	r3, [r2, #4]
 800ba32:	4408      	add	r0, r1
 800ba34:	6010      	str	r0, [r2, #0]
 800ba36:	e7da      	b.n	800b9ee <_free_r+0x22>
 800ba38:	d902      	bls.n	800ba40 <_free_r+0x74>
 800ba3a:	230c      	movs	r3, #12
 800ba3c:	602b      	str	r3, [r5, #0]
 800ba3e:	e7d6      	b.n	800b9ee <_free_r+0x22>
 800ba40:	6820      	ldr	r0, [r4, #0]
 800ba42:	1821      	adds	r1, r4, r0
 800ba44:	428b      	cmp	r3, r1
 800ba46:	bf04      	itt	eq
 800ba48:	6819      	ldreq	r1, [r3, #0]
 800ba4a:	685b      	ldreq	r3, [r3, #4]
 800ba4c:	6063      	str	r3, [r4, #4]
 800ba4e:	bf04      	itt	eq
 800ba50:	1809      	addeq	r1, r1, r0
 800ba52:	6021      	streq	r1, [r4, #0]
 800ba54:	6054      	str	r4, [r2, #4]
 800ba56:	e7ca      	b.n	800b9ee <_free_r+0x22>
 800ba58:	bd38      	pop	{r3, r4, r5, pc}
 800ba5a:	bf00      	nop
 800ba5c:	24000614 	.word	0x24000614

0800ba60 <sbrk_aligned>:
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	4e0f      	ldr	r6, [pc, #60]	@ (800baa0 <sbrk_aligned+0x40>)
 800ba64:	460c      	mov	r4, r1
 800ba66:	6831      	ldr	r1, [r6, #0]
 800ba68:	4605      	mov	r5, r0
 800ba6a:	b911      	cbnz	r1, 800ba72 <sbrk_aligned+0x12>
 800ba6c:	f000 fcda 	bl	800c424 <_sbrk_r>
 800ba70:	6030      	str	r0, [r6, #0]
 800ba72:	4621      	mov	r1, r4
 800ba74:	4628      	mov	r0, r5
 800ba76:	f000 fcd5 	bl	800c424 <_sbrk_r>
 800ba7a:	1c43      	adds	r3, r0, #1
 800ba7c:	d103      	bne.n	800ba86 <sbrk_aligned+0x26>
 800ba7e:	f04f 34ff 	mov.w	r4, #4294967295
 800ba82:	4620      	mov	r0, r4
 800ba84:	bd70      	pop	{r4, r5, r6, pc}
 800ba86:	1cc4      	adds	r4, r0, #3
 800ba88:	f024 0403 	bic.w	r4, r4, #3
 800ba8c:	42a0      	cmp	r0, r4
 800ba8e:	d0f8      	beq.n	800ba82 <sbrk_aligned+0x22>
 800ba90:	1a21      	subs	r1, r4, r0
 800ba92:	4628      	mov	r0, r5
 800ba94:	f000 fcc6 	bl	800c424 <_sbrk_r>
 800ba98:	3001      	adds	r0, #1
 800ba9a:	d1f2      	bne.n	800ba82 <sbrk_aligned+0x22>
 800ba9c:	e7ef      	b.n	800ba7e <sbrk_aligned+0x1e>
 800ba9e:	bf00      	nop
 800baa0:	24000610 	.word	0x24000610

0800baa4 <_malloc_r>:
 800baa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa8:	1ccd      	adds	r5, r1, #3
 800baaa:	f025 0503 	bic.w	r5, r5, #3
 800baae:	3508      	adds	r5, #8
 800bab0:	2d0c      	cmp	r5, #12
 800bab2:	bf38      	it	cc
 800bab4:	250c      	movcc	r5, #12
 800bab6:	2d00      	cmp	r5, #0
 800bab8:	4606      	mov	r6, r0
 800baba:	db01      	blt.n	800bac0 <_malloc_r+0x1c>
 800babc:	42a9      	cmp	r1, r5
 800babe:	d904      	bls.n	800baca <_malloc_r+0x26>
 800bac0:	230c      	movs	r3, #12
 800bac2:	6033      	str	r3, [r6, #0]
 800bac4:	2000      	movs	r0, #0
 800bac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bba0 <_malloc_r+0xfc>
 800bace:	f000 f869 	bl	800bba4 <__malloc_lock>
 800bad2:	f8d8 3000 	ldr.w	r3, [r8]
 800bad6:	461c      	mov	r4, r3
 800bad8:	bb44      	cbnz	r4, 800bb2c <_malloc_r+0x88>
 800bada:	4629      	mov	r1, r5
 800badc:	4630      	mov	r0, r6
 800bade:	f7ff ffbf 	bl	800ba60 <sbrk_aligned>
 800bae2:	1c43      	adds	r3, r0, #1
 800bae4:	4604      	mov	r4, r0
 800bae6:	d158      	bne.n	800bb9a <_malloc_r+0xf6>
 800bae8:	f8d8 4000 	ldr.w	r4, [r8]
 800baec:	4627      	mov	r7, r4
 800baee:	2f00      	cmp	r7, #0
 800baf0:	d143      	bne.n	800bb7a <_malloc_r+0xd6>
 800baf2:	2c00      	cmp	r4, #0
 800baf4:	d04b      	beq.n	800bb8e <_malloc_r+0xea>
 800baf6:	6823      	ldr	r3, [r4, #0]
 800baf8:	4639      	mov	r1, r7
 800bafa:	4630      	mov	r0, r6
 800bafc:	eb04 0903 	add.w	r9, r4, r3
 800bb00:	f000 fc90 	bl	800c424 <_sbrk_r>
 800bb04:	4581      	cmp	r9, r0
 800bb06:	d142      	bne.n	800bb8e <_malloc_r+0xea>
 800bb08:	6821      	ldr	r1, [r4, #0]
 800bb0a:	1a6d      	subs	r5, r5, r1
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	4630      	mov	r0, r6
 800bb10:	f7ff ffa6 	bl	800ba60 <sbrk_aligned>
 800bb14:	3001      	adds	r0, #1
 800bb16:	d03a      	beq.n	800bb8e <_malloc_r+0xea>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	442b      	add	r3, r5
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	bb62      	cbnz	r2, 800bb80 <_malloc_r+0xdc>
 800bb26:	f8c8 7000 	str.w	r7, [r8]
 800bb2a:	e00f      	b.n	800bb4c <_malloc_r+0xa8>
 800bb2c:	6822      	ldr	r2, [r4, #0]
 800bb2e:	1b52      	subs	r2, r2, r5
 800bb30:	d420      	bmi.n	800bb74 <_malloc_r+0xd0>
 800bb32:	2a0b      	cmp	r2, #11
 800bb34:	d917      	bls.n	800bb66 <_malloc_r+0xc2>
 800bb36:	1961      	adds	r1, r4, r5
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	6025      	str	r5, [r4, #0]
 800bb3c:	bf18      	it	ne
 800bb3e:	6059      	strne	r1, [r3, #4]
 800bb40:	6863      	ldr	r3, [r4, #4]
 800bb42:	bf08      	it	eq
 800bb44:	f8c8 1000 	streq.w	r1, [r8]
 800bb48:	5162      	str	r2, [r4, r5]
 800bb4a:	604b      	str	r3, [r1, #4]
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f000 f82f 	bl	800bbb0 <__malloc_unlock>
 800bb52:	f104 000b 	add.w	r0, r4, #11
 800bb56:	1d23      	adds	r3, r4, #4
 800bb58:	f020 0007 	bic.w	r0, r0, #7
 800bb5c:	1ac2      	subs	r2, r0, r3
 800bb5e:	bf1c      	itt	ne
 800bb60:	1a1b      	subne	r3, r3, r0
 800bb62:	50a3      	strne	r3, [r4, r2]
 800bb64:	e7af      	b.n	800bac6 <_malloc_r+0x22>
 800bb66:	6862      	ldr	r2, [r4, #4]
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	bf0c      	ite	eq
 800bb6c:	f8c8 2000 	streq.w	r2, [r8]
 800bb70:	605a      	strne	r2, [r3, #4]
 800bb72:	e7eb      	b.n	800bb4c <_malloc_r+0xa8>
 800bb74:	4623      	mov	r3, r4
 800bb76:	6864      	ldr	r4, [r4, #4]
 800bb78:	e7ae      	b.n	800bad8 <_malloc_r+0x34>
 800bb7a:	463c      	mov	r4, r7
 800bb7c:	687f      	ldr	r7, [r7, #4]
 800bb7e:	e7b6      	b.n	800baee <_malloc_r+0x4a>
 800bb80:	461a      	mov	r2, r3
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	42a3      	cmp	r3, r4
 800bb86:	d1fb      	bne.n	800bb80 <_malloc_r+0xdc>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	6053      	str	r3, [r2, #4]
 800bb8c:	e7de      	b.n	800bb4c <_malloc_r+0xa8>
 800bb8e:	230c      	movs	r3, #12
 800bb90:	6033      	str	r3, [r6, #0]
 800bb92:	4630      	mov	r0, r6
 800bb94:	f000 f80c 	bl	800bbb0 <__malloc_unlock>
 800bb98:	e794      	b.n	800bac4 <_malloc_r+0x20>
 800bb9a:	6005      	str	r5, [r0, #0]
 800bb9c:	e7d6      	b.n	800bb4c <_malloc_r+0xa8>
 800bb9e:	bf00      	nop
 800bba0:	24000614 	.word	0x24000614

0800bba4 <__malloc_lock>:
 800bba4:	4801      	ldr	r0, [pc, #4]	@ (800bbac <__malloc_lock+0x8>)
 800bba6:	f7ff bf0e 	b.w	800b9c6 <__retarget_lock_acquire_recursive>
 800bbaa:	bf00      	nop
 800bbac:	2400060c 	.word	0x2400060c

0800bbb0 <__malloc_unlock>:
 800bbb0:	4801      	ldr	r0, [pc, #4]	@ (800bbb8 <__malloc_unlock+0x8>)
 800bbb2:	f7ff bf09 	b.w	800b9c8 <__retarget_lock_release_recursive>
 800bbb6:	bf00      	nop
 800bbb8:	2400060c 	.word	0x2400060c

0800bbbc <__sfputc_r>:
 800bbbc:	6893      	ldr	r3, [r2, #8]
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	b410      	push	{r4}
 800bbc4:	6093      	str	r3, [r2, #8]
 800bbc6:	da08      	bge.n	800bbda <__sfputc_r+0x1e>
 800bbc8:	6994      	ldr	r4, [r2, #24]
 800bbca:	42a3      	cmp	r3, r4
 800bbcc:	db01      	blt.n	800bbd2 <__sfputc_r+0x16>
 800bbce:	290a      	cmp	r1, #10
 800bbd0:	d103      	bne.n	800bbda <__sfputc_r+0x1e>
 800bbd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbd6:	f7ff bde8 	b.w	800b7aa <__swbuf_r>
 800bbda:	6813      	ldr	r3, [r2, #0]
 800bbdc:	1c58      	adds	r0, r3, #1
 800bbde:	6010      	str	r0, [r2, #0]
 800bbe0:	7019      	strb	r1, [r3, #0]
 800bbe2:	4608      	mov	r0, r1
 800bbe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <__sfputs_r>:
 800bbea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbec:	4606      	mov	r6, r0
 800bbee:	460f      	mov	r7, r1
 800bbf0:	4614      	mov	r4, r2
 800bbf2:	18d5      	adds	r5, r2, r3
 800bbf4:	42ac      	cmp	r4, r5
 800bbf6:	d101      	bne.n	800bbfc <__sfputs_r+0x12>
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	e007      	b.n	800bc0c <__sfputs_r+0x22>
 800bbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc00:	463a      	mov	r2, r7
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7ff ffda 	bl	800bbbc <__sfputc_r>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d1f3      	bne.n	800bbf4 <__sfputs_r+0xa>
 800bc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc10 <_vfiprintf_r>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	460d      	mov	r5, r1
 800bc16:	b09d      	sub	sp, #116	@ 0x74
 800bc18:	4614      	mov	r4, r2
 800bc1a:	4698      	mov	r8, r3
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	b118      	cbz	r0, 800bc28 <_vfiprintf_r+0x18>
 800bc20:	6a03      	ldr	r3, [r0, #32]
 800bc22:	b90b      	cbnz	r3, 800bc28 <_vfiprintf_r+0x18>
 800bc24:	f7ff fcd0 	bl	800b5c8 <__sinit>
 800bc28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc2a:	07d9      	lsls	r1, r3, #31
 800bc2c:	d405      	bmi.n	800bc3a <_vfiprintf_r+0x2a>
 800bc2e:	89ab      	ldrh	r3, [r5, #12]
 800bc30:	059a      	lsls	r2, r3, #22
 800bc32:	d402      	bmi.n	800bc3a <_vfiprintf_r+0x2a>
 800bc34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc36:	f7ff fec6 	bl	800b9c6 <__retarget_lock_acquire_recursive>
 800bc3a:	89ab      	ldrh	r3, [r5, #12]
 800bc3c:	071b      	lsls	r3, r3, #28
 800bc3e:	d501      	bpl.n	800bc44 <_vfiprintf_r+0x34>
 800bc40:	692b      	ldr	r3, [r5, #16]
 800bc42:	b99b      	cbnz	r3, 800bc6c <_vfiprintf_r+0x5c>
 800bc44:	4629      	mov	r1, r5
 800bc46:	4630      	mov	r0, r6
 800bc48:	f7ff fdee 	bl	800b828 <__swsetup_r>
 800bc4c:	b170      	cbz	r0, 800bc6c <_vfiprintf_r+0x5c>
 800bc4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc50:	07dc      	lsls	r4, r3, #31
 800bc52:	d504      	bpl.n	800bc5e <_vfiprintf_r+0x4e>
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295
 800bc58:	b01d      	add	sp, #116	@ 0x74
 800bc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5e:	89ab      	ldrh	r3, [r5, #12]
 800bc60:	0598      	lsls	r0, r3, #22
 800bc62:	d4f7      	bmi.n	800bc54 <_vfiprintf_r+0x44>
 800bc64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc66:	f7ff feaf 	bl	800b9c8 <__retarget_lock_release_recursive>
 800bc6a:	e7f3      	b.n	800bc54 <_vfiprintf_r+0x44>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc70:	2320      	movs	r3, #32
 800bc72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc76:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc7a:	2330      	movs	r3, #48	@ 0x30
 800bc7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be2c <_vfiprintf_r+0x21c>
 800bc80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc84:	f04f 0901 	mov.w	r9, #1
 800bc88:	4623      	mov	r3, r4
 800bc8a:	469a      	mov	sl, r3
 800bc8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc90:	b10a      	cbz	r2, 800bc96 <_vfiprintf_r+0x86>
 800bc92:	2a25      	cmp	r2, #37	@ 0x25
 800bc94:	d1f9      	bne.n	800bc8a <_vfiprintf_r+0x7a>
 800bc96:	ebba 0b04 	subs.w	fp, sl, r4
 800bc9a:	d00b      	beq.n	800bcb4 <_vfiprintf_r+0xa4>
 800bc9c:	465b      	mov	r3, fp
 800bc9e:	4622      	mov	r2, r4
 800bca0:	4629      	mov	r1, r5
 800bca2:	4630      	mov	r0, r6
 800bca4:	f7ff ffa1 	bl	800bbea <__sfputs_r>
 800bca8:	3001      	adds	r0, #1
 800bcaa:	f000 80a7 	beq.w	800bdfc <_vfiprintf_r+0x1ec>
 800bcae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcb0:	445a      	add	r2, fp
 800bcb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f000 809f 	beq.w	800bdfc <_vfiprintf_r+0x1ec>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcc8:	f10a 0a01 	add.w	sl, sl, #1
 800bccc:	9304      	str	r3, [sp, #16]
 800bcce:	9307      	str	r3, [sp, #28]
 800bcd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcd4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcd6:	4654      	mov	r4, sl
 800bcd8:	2205      	movs	r2, #5
 800bcda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcde:	4853      	ldr	r0, [pc, #332]	@ (800be2c <_vfiprintf_r+0x21c>)
 800bce0:	f7f4 fb16 	bl	8000310 <memchr>
 800bce4:	9a04      	ldr	r2, [sp, #16]
 800bce6:	b9d8      	cbnz	r0, 800bd20 <_vfiprintf_r+0x110>
 800bce8:	06d1      	lsls	r1, r2, #27
 800bcea:	bf44      	itt	mi
 800bcec:	2320      	movmi	r3, #32
 800bcee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcf2:	0713      	lsls	r3, r2, #28
 800bcf4:	bf44      	itt	mi
 800bcf6:	232b      	movmi	r3, #43	@ 0x2b
 800bcf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcfc:	f89a 3000 	ldrb.w	r3, [sl]
 800bd00:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd02:	d015      	beq.n	800bd30 <_vfiprintf_r+0x120>
 800bd04:	9a07      	ldr	r2, [sp, #28]
 800bd06:	4654      	mov	r4, sl
 800bd08:	2000      	movs	r0, #0
 800bd0a:	f04f 0c0a 	mov.w	ip, #10
 800bd0e:	4621      	mov	r1, r4
 800bd10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd14:	3b30      	subs	r3, #48	@ 0x30
 800bd16:	2b09      	cmp	r3, #9
 800bd18:	d94b      	bls.n	800bdb2 <_vfiprintf_r+0x1a2>
 800bd1a:	b1b0      	cbz	r0, 800bd4a <_vfiprintf_r+0x13a>
 800bd1c:	9207      	str	r2, [sp, #28]
 800bd1e:	e014      	b.n	800bd4a <_vfiprintf_r+0x13a>
 800bd20:	eba0 0308 	sub.w	r3, r0, r8
 800bd24:	fa09 f303 	lsl.w	r3, r9, r3
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	9304      	str	r3, [sp, #16]
 800bd2c:	46a2      	mov	sl, r4
 800bd2e:	e7d2      	b.n	800bcd6 <_vfiprintf_r+0xc6>
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	1d19      	adds	r1, r3, #4
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	9103      	str	r1, [sp, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	bfbb      	ittet	lt
 800bd3c:	425b      	neglt	r3, r3
 800bd3e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd42:	9307      	strge	r3, [sp, #28]
 800bd44:	9307      	strlt	r3, [sp, #28]
 800bd46:	bfb8      	it	lt
 800bd48:	9204      	strlt	r2, [sp, #16]
 800bd4a:	7823      	ldrb	r3, [r4, #0]
 800bd4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd4e:	d10a      	bne.n	800bd66 <_vfiprintf_r+0x156>
 800bd50:	7863      	ldrb	r3, [r4, #1]
 800bd52:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd54:	d132      	bne.n	800bdbc <_vfiprintf_r+0x1ac>
 800bd56:	9b03      	ldr	r3, [sp, #12]
 800bd58:	1d1a      	adds	r2, r3, #4
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	9203      	str	r2, [sp, #12]
 800bd5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd62:	3402      	adds	r4, #2
 800bd64:	9305      	str	r3, [sp, #20]
 800bd66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be3c <_vfiprintf_r+0x22c>
 800bd6a:	7821      	ldrb	r1, [r4, #0]
 800bd6c:	2203      	movs	r2, #3
 800bd6e:	4650      	mov	r0, sl
 800bd70:	f7f4 face 	bl	8000310 <memchr>
 800bd74:	b138      	cbz	r0, 800bd86 <_vfiprintf_r+0x176>
 800bd76:	9b04      	ldr	r3, [sp, #16]
 800bd78:	eba0 000a 	sub.w	r0, r0, sl
 800bd7c:	2240      	movs	r2, #64	@ 0x40
 800bd7e:	4082      	lsls	r2, r0
 800bd80:	4313      	orrs	r3, r2
 800bd82:	3401      	adds	r4, #1
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8a:	4829      	ldr	r0, [pc, #164]	@ (800be30 <_vfiprintf_r+0x220>)
 800bd8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd90:	2206      	movs	r2, #6
 800bd92:	f7f4 fabd 	bl	8000310 <memchr>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d03f      	beq.n	800be1a <_vfiprintf_r+0x20a>
 800bd9a:	4b26      	ldr	r3, [pc, #152]	@ (800be34 <_vfiprintf_r+0x224>)
 800bd9c:	bb1b      	cbnz	r3, 800bde6 <_vfiprintf_r+0x1d6>
 800bd9e:	9b03      	ldr	r3, [sp, #12]
 800bda0:	3307      	adds	r3, #7
 800bda2:	f023 0307 	bic.w	r3, r3, #7
 800bda6:	3308      	adds	r3, #8
 800bda8:	9303      	str	r3, [sp, #12]
 800bdaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdac:	443b      	add	r3, r7
 800bdae:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdb0:	e76a      	b.n	800bc88 <_vfiprintf_r+0x78>
 800bdb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	2001      	movs	r0, #1
 800bdba:	e7a8      	b.n	800bd0e <_vfiprintf_r+0xfe>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	3401      	adds	r4, #1
 800bdc0:	9305      	str	r3, [sp, #20]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	f04f 0c0a 	mov.w	ip, #10
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdce:	3a30      	subs	r2, #48	@ 0x30
 800bdd0:	2a09      	cmp	r2, #9
 800bdd2:	d903      	bls.n	800bddc <_vfiprintf_r+0x1cc>
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d0c6      	beq.n	800bd66 <_vfiprintf_r+0x156>
 800bdd8:	9105      	str	r1, [sp, #20]
 800bdda:	e7c4      	b.n	800bd66 <_vfiprintf_r+0x156>
 800bddc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bde0:	4604      	mov	r4, r0
 800bde2:	2301      	movs	r3, #1
 800bde4:	e7f0      	b.n	800bdc8 <_vfiprintf_r+0x1b8>
 800bde6:	ab03      	add	r3, sp, #12
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	462a      	mov	r2, r5
 800bdec:	4b12      	ldr	r3, [pc, #72]	@ (800be38 <_vfiprintf_r+0x228>)
 800bdee:	a904      	add	r1, sp, #16
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	f3af 8000 	nop.w
 800bdf6:	4607      	mov	r7, r0
 800bdf8:	1c78      	adds	r0, r7, #1
 800bdfa:	d1d6      	bne.n	800bdaa <_vfiprintf_r+0x19a>
 800bdfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdfe:	07d9      	lsls	r1, r3, #31
 800be00:	d405      	bmi.n	800be0e <_vfiprintf_r+0x1fe>
 800be02:	89ab      	ldrh	r3, [r5, #12]
 800be04:	059a      	lsls	r2, r3, #22
 800be06:	d402      	bmi.n	800be0e <_vfiprintf_r+0x1fe>
 800be08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be0a:	f7ff fddd 	bl	800b9c8 <__retarget_lock_release_recursive>
 800be0e:	89ab      	ldrh	r3, [r5, #12]
 800be10:	065b      	lsls	r3, r3, #25
 800be12:	f53f af1f 	bmi.w	800bc54 <_vfiprintf_r+0x44>
 800be16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be18:	e71e      	b.n	800bc58 <_vfiprintf_r+0x48>
 800be1a:	ab03      	add	r3, sp, #12
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	462a      	mov	r2, r5
 800be20:	4b05      	ldr	r3, [pc, #20]	@ (800be38 <_vfiprintf_r+0x228>)
 800be22:	a904      	add	r1, sp, #16
 800be24:	4630      	mov	r0, r6
 800be26:	f000 f879 	bl	800bf1c <_printf_i>
 800be2a:	e7e4      	b.n	800bdf6 <_vfiprintf_r+0x1e6>
 800be2c:	0800c500 	.word	0x0800c500
 800be30:	0800c50a 	.word	0x0800c50a
 800be34:	00000000 	.word	0x00000000
 800be38:	0800bbeb 	.word	0x0800bbeb
 800be3c:	0800c506 	.word	0x0800c506

0800be40 <_printf_common>:
 800be40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be44:	4616      	mov	r6, r2
 800be46:	4698      	mov	r8, r3
 800be48:	688a      	ldr	r2, [r1, #8]
 800be4a:	690b      	ldr	r3, [r1, #16]
 800be4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be50:	4293      	cmp	r3, r2
 800be52:	bfb8      	it	lt
 800be54:	4613      	movlt	r3, r2
 800be56:	6033      	str	r3, [r6, #0]
 800be58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be5c:	4607      	mov	r7, r0
 800be5e:	460c      	mov	r4, r1
 800be60:	b10a      	cbz	r2, 800be66 <_printf_common+0x26>
 800be62:	3301      	adds	r3, #1
 800be64:	6033      	str	r3, [r6, #0]
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	0699      	lsls	r1, r3, #26
 800be6a:	bf42      	ittt	mi
 800be6c:	6833      	ldrmi	r3, [r6, #0]
 800be6e:	3302      	addmi	r3, #2
 800be70:	6033      	strmi	r3, [r6, #0]
 800be72:	6825      	ldr	r5, [r4, #0]
 800be74:	f015 0506 	ands.w	r5, r5, #6
 800be78:	d106      	bne.n	800be88 <_printf_common+0x48>
 800be7a:	f104 0a19 	add.w	sl, r4, #25
 800be7e:	68e3      	ldr	r3, [r4, #12]
 800be80:	6832      	ldr	r2, [r6, #0]
 800be82:	1a9b      	subs	r3, r3, r2
 800be84:	42ab      	cmp	r3, r5
 800be86:	dc26      	bgt.n	800bed6 <_printf_common+0x96>
 800be88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be8c:	6822      	ldr	r2, [r4, #0]
 800be8e:	3b00      	subs	r3, #0
 800be90:	bf18      	it	ne
 800be92:	2301      	movne	r3, #1
 800be94:	0692      	lsls	r2, r2, #26
 800be96:	d42b      	bmi.n	800bef0 <_printf_common+0xb0>
 800be98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be9c:	4641      	mov	r1, r8
 800be9e:	4638      	mov	r0, r7
 800bea0:	47c8      	blx	r9
 800bea2:	3001      	adds	r0, #1
 800bea4:	d01e      	beq.n	800bee4 <_printf_common+0xa4>
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	6922      	ldr	r2, [r4, #16]
 800beaa:	f003 0306 	and.w	r3, r3, #6
 800beae:	2b04      	cmp	r3, #4
 800beb0:	bf02      	ittt	eq
 800beb2:	68e5      	ldreq	r5, [r4, #12]
 800beb4:	6833      	ldreq	r3, [r6, #0]
 800beb6:	1aed      	subeq	r5, r5, r3
 800beb8:	68a3      	ldr	r3, [r4, #8]
 800beba:	bf0c      	ite	eq
 800bebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bec0:	2500      	movne	r5, #0
 800bec2:	4293      	cmp	r3, r2
 800bec4:	bfc4      	itt	gt
 800bec6:	1a9b      	subgt	r3, r3, r2
 800bec8:	18ed      	addgt	r5, r5, r3
 800beca:	2600      	movs	r6, #0
 800becc:	341a      	adds	r4, #26
 800bece:	42b5      	cmp	r5, r6
 800bed0:	d11a      	bne.n	800bf08 <_printf_common+0xc8>
 800bed2:	2000      	movs	r0, #0
 800bed4:	e008      	b.n	800bee8 <_printf_common+0xa8>
 800bed6:	2301      	movs	r3, #1
 800bed8:	4652      	mov	r2, sl
 800beda:	4641      	mov	r1, r8
 800bedc:	4638      	mov	r0, r7
 800bede:	47c8      	blx	r9
 800bee0:	3001      	adds	r0, #1
 800bee2:	d103      	bne.n	800beec <_printf_common+0xac>
 800bee4:	f04f 30ff 	mov.w	r0, #4294967295
 800bee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beec:	3501      	adds	r5, #1
 800beee:	e7c6      	b.n	800be7e <_printf_common+0x3e>
 800bef0:	18e1      	adds	r1, r4, r3
 800bef2:	1c5a      	adds	r2, r3, #1
 800bef4:	2030      	movs	r0, #48	@ 0x30
 800bef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800befa:	4422      	add	r2, r4
 800befc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf04:	3302      	adds	r3, #2
 800bf06:	e7c7      	b.n	800be98 <_printf_common+0x58>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	4641      	mov	r1, r8
 800bf0e:	4638      	mov	r0, r7
 800bf10:	47c8      	blx	r9
 800bf12:	3001      	adds	r0, #1
 800bf14:	d0e6      	beq.n	800bee4 <_printf_common+0xa4>
 800bf16:	3601      	adds	r6, #1
 800bf18:	e7d9      	b.n	800bece <_printf_common+0x8e>
	...

0800bf1c <_printf_i>:
 800bf1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf20:	7e0f      	ldrb	r7, [r1, #24]
 800bf22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf24:	2f78      	cmp	r7, #120	@ 0x78
 800bf26:	4691      	mov	r9, r2
 800bf28:	4680      	mov	r8, r0
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	469a      	mov	sl, r3
 800bf2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf32:	d807      	bhi.n	800bf44 <_printf_i+0x28>
 800bf34:	2f62      	cmp	r7, #98	@ 0x62
 800bf36:	d80a      	bhi.n	800bf4e <_printf_i+0x32>
 800bf38:	2f00      	cmp	r7, #0
 800bf3a:	f000 80d2 	beq.w	800c0e2 <_printf_i+0x1c6>
 800bf3e:	2f58      	cmp	r7, #88	@ 0x58
 800bf40:	f000 80b9 	beq.w	800c0b6 <_printf_i+0x19a>
 800bf44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf4c:	e03a      	b.n	800bfc4 <_printf_i+0xa8>
 800bf4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf52:	2b15      	cmp	r3, #21
 800bf54:	d8f6      	bhi.n	800bf44 <_printf_i+0x28>
 800bf56:	a101      	add	r1, pc, #4	@ (adr r1, 800bf5c <_printf_i+0x40>)
 800bf58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf5c:	0800bfb5 	.word	0x0800bfb5
 800bf60:	0800bfc9 	.word	0x0800bfc9
 800bf64:	0800bf45 	.word	0x0800bf45
 800bf68:	0800bf45 	.word	0x0800bf45
 800bf6c:	0800bf45 	.word	0x0800bf45
 800bf70:	0800bf45 	.word	0x0800bf45
 800bf74:	0800bfc9 	.word	0x0800bfc9
 800bf78:	0800bf45 	.word	0x0800bf45
 800bf7c:	0800bf45 	.word	0x0800bf45
 800bf80:	0800bf45 	.word	0x0800bf45
 800bf84:	0800bf45 	.word	0x0800bf45
 800bf88:	0800c0c9 	.word	0x0800c0c9
 800bf8c:	0800bff3 	.word	0x0800bff3
 800bf90:	0800c083 	.word	0x0800c083
 800bf94:	0800bf45 	.word	0x0800bf45
 800bf98:	0800bf45 	.word	0x0800bf45
 800bf9c:	0800c0eb 	.word	0x0800c0eb
 800bfa0:	0800bf45 	.word	0x0800bf45
 800bfa4:	0800bff3 	.word	0x0800bff3
 800bfa8:	0800bf45 	.word	0x0800bf45
 800bfac:	0800bf45 	.word	0x0800bf45
 800bfb0:	0800c08b 	.word	0x0800c08b
 800bfb4:	6833      	ldr	r3, [r6, #0]
 800bfb6:	1d1a      	adds	r2, r3, #4
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6032      	str	r2, [r6, #0]
 800bfbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e09d      	b.n	800c104 <_printf_i+0x1e8>
 800bfc8:	6833      	ldr	r3, [r6, #0]
 800bfca:	6820      	ldr	r0, [r4, #0]
 800bfcc:	1d19      	adds	r1, r3, #4
 800bfce:	6031      	str	r1, [r6, #0]
 800bfd0:	0606      	lsls	r6, r0, #24
 800bfd2:	d501      	bpl.n	800bfd8 <_printf_i+0xbc>
 800bfd4:	681d      	ldr	r5, [r3, #0]
 800bfd6:	e003      	b.n	800bfe0 <_printf_i+0xc4>
 800bfd8:	0645      	lsls	r5, r0, #25
 800bfda:	d5fb      	bpl.n	800bfd4 <_printf_i+0xb8>
 800bfdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfe0:	2d00      	cmp	r5, #0
 800bfe2:	da03      	bge.n	800bfec <_printf_i+0xd0>
 800bfe4:	232d      	movs	r3, #45	@ 0x2d
 800bfe6:	426d      	negs	r5, r5
 800bfe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfec:	4859      	ldr	r0, [pc, #356]	@ (800c154 <_printf_i+0x238>)
 800bfee:	230a      	movs	r3, #10
 800bff0:	e011      	b.n	800c016 <_printf_i+0xfa>
 800bff2:	6821      	ldr	r1, [r4, #0]
 800bff4:	6833      	ldr	r3, [r6, #0]
 800bff6:	0608      	lsls	r0, r1, #24
 800bff8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bffc:	d402      	bmi.n	800c004 <_printf_i+0xe8>
 800bffe:	0649      	lsls	r1, r1, #25
 800c000:	bf48      	it	mi
 800c002:	b2ad      	uxthmi	r5, r5
 800c004:	2f6f      	cmp	r7, #111	@ 0x6f
 800c006:	4853      	ldr	r0, [pc, #332]	@ (800c154 <_printf_i+0x238>)
 800c008:	6033      	str	r3, [r6, #0]
 800c00a:	bf14      	ite	ne
 800c00c:	230a      	movne	r3, #10
 800c00e:	2308      	moveq	r3, #8
 800c010:	2100      	movs	r1, #0
 800c012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c016:	6866      	ldr	r6, [r4, #4]
 800c018:	60a6      	str	r6, [r4, #8]
 800c01a:	2e00      	cmp	r6, #0
 800c01c:	bfa2      	ittt	ge
 800c01e:	6821      	ldrge	r1, [r4, #0]
 800c020:	f021 0104 	bicge.w	r1, r1, #4
 800c024:	6021      	strge	r1, [r4, #0]
 800c026:	b90d      	cbnz	r5, 800c02c <_printf_i+0x110>
 800c028:	2e00      	cmp	r6, #0
 800c02a:	d04b      	beq.n	800c0c4 <_printf_i+0x1a8>
 800c02c:	4616      	mov	r6, r2
 800c02e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c032:	fb03 5711 	mls	r7, r3, r1, r5
 800c036:	5dc7      	ldrb	r7, [r0, r7]
 800c038:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c03c:	462f      	mov	r7, r5
 800c03e:	42bb      	cmp	r3, r7
 800c040:	460d      	mov	r5, r1
 800c042:	d9f4      	bls.n	800c02e <_printf_i+0x112>
 800c044:	2b08      	cmp	r3, #8
 800c046:	d10b      	bne.n	800c060 <_printf_i+0x144>
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	07df      	lsls	r7, r3, #31
 800c04c:	d508      	bpl.n	800c060 <_printf_i+0x144>
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	6861      	ldr	r1, [r4, #4]
 800c052:	4299      	cmp	r1, r3
 800c054:	bfde      	ittt	le
 800c056:	2330      	movle	r3, #48	@ 0x30
 800c058:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c05c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c060:	1b92      	subs	r2, r2, r6
 800c062:	6122      	str	r2, [r4, #16]
 800c064:	f8cd a000 	str.w	sl, [sp]
 800c068:	464b      	mov	r3, r9
 800c06a:	aa03      	add	r2, sp, #12
 800c06c:	4621      	mov	r1, r4
 800c06e:	4640      	mov	r0, r8
 800c070:	f7ff fee6 	bl	800be40 <_printf_common>
 800c074:	3001      	adds	r0, #1
 800c076:	d14a      	bne.n	800c10e <_printf_i+0x1f2>
 800c078:	f04f 30ff 	mov.w	r0, #4294967295
 800c07c:	b004      	add	sp, #16
 800c07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	f043 0320 	orr.w	r3, r3, #32
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	4833      	ldr	r0, [pc, #204]	@ (800c158 <_printf_i+0x23c>)
 800c08c:	2778      	movs	r7, #120	@ 0x78
 800c08e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	6831      	ldr	r1, [r6, #0]
 800c096:	061f      	lsls	r7, r3, #24
 800c098:	f851 5b04 	ldr.w	r5, [r1], #4
 800c09c:	d402      	bmi.n	800c0a4 <_printf_i+0x188>
 800c09e:	065f      	lsls	r7, r3, #25
 800c0a0:	bf48      	it	mi
 800c0a2:	b2ad      	uxthmi	r5, r5
 800c0a4:	6031      	str	r1, [r6, #0]
 800c0a6:	07d9      	lsls	r1, r3, #31
 800c0a8:	bf44      	itt	mi
 800c0aa:	f043 0320 	orrmi.w	r3, r3, #32
 800c0ae:	6023      	strmi	r3, [r4, #0]
 800c0b0:	b11d      	cbz	r5, 800c0ba <_printf_i+0x19e>
 800c0b2:	2310      	movs	r3, #16
 800c0b4:	e7ac      	b.n	800c010 <_printf_i+0xf4>
 800c0b6:	4827      	ldr	r0, [pc, #156]	@ (800c154 <_printf_i+0x238>)
 800c0b8:	e7e9      	b.n	800c08e <_printf_i+0x172>
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	f023 0320 	bic.w	r3, r3, #32
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	e7f6      	b.n	800c0b2 <_printf_i+0x196>
 800c0c4:	4616      	mov	r6, r2
 800c0c6:	e7bd      	b.n	800c044 <_printf_i+0x128>
 800c0c8:	6833      	ldr	r3, [r6, #0]
 800c0ca:	6825      	ldr	r5, [r4, #0]
 800c0cc:	6961      	ldr	r1, [r4, #20]
 800c0ce:	1d18      	adds	r0, r3, #4
 800c0d0:	6030      	str	r0, [r6, #0]
 800c0d2:	062e      	lsls	r6, r5, #24
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	d501      	bpl.n	800c0dc <_printf_i+0x1c0>
 800c0d8:	6019      	str	r1, [r3, #0]
 800c0da:	e002      	b.n	800c0e2 <_printf_i+0x1c6>
 800c0dc:	0668      	lsls	r0, r5, #25
 800c0de:	d5fb      	bpl.n	800c0d8 <_printf_i+0x1bc>
 800c0e0:	8019      	strh	r1, [r3, #0]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	6123      	str	r3, [r4, #16]
 800c0e6:	4616      	mov	r6, r2
 800c0e8:	e7bc      	b.n	800c064 <_printf_i+0x148>
 800c0ea:	6833      	ldr	r3, [r6, #0]
 800c0ec:	1d1a      	adds	r2, r3, #4
 800c0ee:	6032      	str	r2, [r6, #0]
 800c0f0:	681e      	ldr	r6, [r3, #0]
 800c0f2:	6862      	ldr	r2, [r4, #4]
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f7f4 f90a 	bl	8000310 <memchr>
 800c0fc:	b108      	cbz	r0, 800c102 <_printf_i+0x1e6>
 800c0fe:	1b80      	subs	r0, r0, r6
 800c100:	6060      	str	r0, [r4, #4]
 800c102:	6863      	ldr	r3, [r4, #4]
 800c104:	6123      	str	r3, [r4, #16]
 800c106:	2300      	movs	r3, #0
 800c108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c10c:	e7aa      	b.n	800c064 <_printf_i+0x148>
 800c10e:	6923      	ldr	r3, [r4, #16]
 800c110:	4632      	mov	r2, r6
 800c112:	4649      	mov	r1, r9
 800c114:	4640      	mov	r0, r8
 800c116:	47d0      	blx	sl
 800c118:	3001      	adds	r0, #1
 800c11a:	d0ad      	beq.n	800c078 <_printf_i+0x15c>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	079b      	lsls	r3, r3, #30
 800c120:	d413      	bmi.n	800c14a <_printf_i+0x22e>
 800c122:	68e0      	ldr	r0, [r4, #12]
 800c124:	9b03      	ldr	r3, [sp, #12]
 800c126:	4298      	cmp	r0, r3
 800c128:	bfb8      	it	lt
 800c12a:	4618      	movlt	r0, r3
 800c12c:	e7a6      	b.n	800c07c <_printf_i+0x160>
 800c12e:	2301      	movs	r3, #1
 800c130:	4632      	mov	r2, r6
 800c132:	4649      	mov	r1, r9
 800c134:	4640      	mov	r0, r8
 800c136:	47d0      	blx	sl
 800c138:	3001      	adds	r0, #1
 800c13a:	d09d      	beq.n	800c078 <_printf_i+0x15c>
 800c13c:	3501      	adds	r5, #1
 800c13e:	68e3      	ldr	r3, [r4, #12]
 800c140:	9903      	ldr	r1, [sp, #12]
 800c142:	1a5b      	subs	r3, r3, r1
 800c144:	42ab      	cmp	r3, r5
 800c146:	dcf2      	bgt.n	800c12e <_printf_i+0x212>
 800c148:	e7eb      	b.n	800c122 <_printf_i+0x206>
 800c14a:	2500      	movs	r5, #0
 800c14c:	f104 0619 	add.w	r6, r4, #25
 800c150:	e7f5      	b.n	800c13e <_printf_i+0x222>
 800c152:	bf00      	nop
 800c154:	0800c511 	.word	0x0800c511
 800c158:	0800c522 	.word	0x0800c522

0800c15c <__sflush_r>:
 800c15c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c164:	0716      	lsls	r6, r2, #28
 800c166:	4605      	mov	r5, r0
 800c168:	460c      	mov	r4, r1
 800c16a:	d454      	bmi.n	800c216 <__sflush_r+0xba>
 800c16c:	684b      	ldr	r3, [r1, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	dc02      	bgt.n	800c178 <__sflush_r+0x1c>
 800c172:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c174:	2b00      	cmp	r3, #0
 800c176:	dd48      	ble.n	800c20a <__sflush_r+0xae>
 800c178:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c17a:	2e00      	cmp	r6, #0
 800c17c:	d045      	beq.n	800c20a <__sflush_r+0xae>
 800c17e:	2300      	movs	r3, #0
 800c180:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c184:	682f      	ldr	r7, [r5, #0]
 800c186:	6a21      	ldr	r1, [r4, #32]
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	d030      	beq.n	800c1ee <__sflush_r+0x92>
 800c18c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	0759      	lsls	r1, r3, #29
 800c192:	d505      	bpl.n	800c1a0 <__sflush_r+0x44>
 800c194:	6863      	ldr	r3, [r4, #4]
 800c196:	1ad2      	subs	r2, r2, r3
 800c198:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c19a:	b10b      	cbz	r3, 800c1a0 <__sflush_r+0x44>
 800c19c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c19e:	1ad2      	subs	r2, r2, r3
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1a4:	6a21      	ldr	r1, [r4, #32]
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	47b0      	blx	r6
 800c1aa:	1c43      	adds	r3, r0, #1
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	d106      	bne.n	800c1be <__sflush_r+0x62>
 800c1b0:	6829      	ldr	r1, [r5, #0]
 800c1b2:	291d      	cmp	r1, #29
 800c1b4:	d82b      	bhi.n	800c20e <__sflush_r+0xb2>
 800c1b6:	4a2a      	ldr	r2, [pc, #168]	@ (800c260 <__sflush_r+0x104>)
 800c1b8:	410a      	asrs	r2, r1
 800c1ba:	07d6      	lsls	r6, r2, #31
 800c1bc:	d427      	bmi.n	800c20e <__sflush_r+0xb2>
 800c1be:	2200      	movs	r2, #0
 800c1c0:	6062      	str	r2, [r4, #4]
 800c1c2:	04d9      	lsls	r1, r3, #19
 800c1c4:	6922      	ldr	r2, [r4, #16]
 800c1c6:	6022      	str	r2, [r4, #0]
 800c1c8:	d504      	bpl.n	800c1d4 <__sflush_r+0x78>
 800c1ca:	1c42      	adds	r2, r0, #1
 800c1cc:	d101      	bne.n	800c1d2 <__sflush_r+0x76>
 800c1ce:	682b      	ldr	r3, [r5, #0]
 800c1d0:	b903      	cbnz	r3, 800c1d4 <__sflush_r+0x78>
 800c1d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c1d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1d6:	602f      	str	r7, [r5, #0]
 800c1d8:	b1b9      	cbz	r1, 800c20a <__sflush_r+0xae>
 800c1da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1de:	4299      	cmp	r1, r3
 800c1e0:	d002      	beq.n	800c1e8 <__sflush_r+0x8c>
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f7ff fbf2 	bl	800b9cc <_free_r>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1ec:	e00d      	b.n	800c20a <__sflush_r+0xae>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	47b0      	blx	r6
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	1c50      	adds	r0, r2, #1
 800c1f8:	d1c9      	bne.n	800c18e <__sflush_r+0x32>
 800c1fa:	682b      	ldr	r3, [r5, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d0c6      	beq.n	800c18e <__sflush_r+0x32>
 800c200:	2b1d      	cmp	r3, #29
 800c202:	d001      	beq.n	800c208 <__sflush_r+0xac>
 800c204:	2b16      	cmp	r3, #22
 800c206:	d11e      	bne.n	800c246 <__sflush_r+0xea>
 800c208:	602f      	str	r7, [r5, #0]
 800c20a:	2000      	movs	r0, #0
 800c20c:	e022      	b.n	800c254 <__sflush_r+0xf8>
 800c20e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c212:	b21b      	sxth	r3, r3
 800c214:	e01b      	b.n	800c24e <__sflush_r+0xf2>
 800c216:	690f      	ldr	r7, [r1, #16]
 800c218:	2f00      	cmp	r7, #0
 800c21a:	d0f6      	beq.n	800c20a <__sflush_r+0xae>
 800c21c:	0793      	lsls	r3, r2, #30
 800c21e:	680e      	ldr	r6, [r1, #0]
 800c220:	bf08      	it	eq
 800c222:	694b      	ldreq	r3, [r1, #20]
 800c224:	600f      	str	r7, [r1, #0]
 800c226:	bf18      	it	ne
 800c228:	2300      	movne	r3, #0
 800c22a:	eba6 0807 	sub.w	r8, r6, r7
 800c22e:	608b      	str	r3, [r1, #8]
 800c230:	f1b8 0f00 	cmp.w	r8, #0
 800c234:	dde9      	ble.n	800c20a <__sflush_r+0xae>
 800c236:	6a21      	ldr	r1, [r4, #32]
 800c238:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c23a:	4643      	mov	r3, r8
 800c23c:	463a      	mov	r2, r7
 800c23e:	4628      	mov	r0, r5
 800c240:	47b0      	blx	r6
 800c242:	2800      	cmp	r0, #0
 800c244:	dc08      	bgt.n	800c258 <__sflush_r+0xfc>
 800c246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c24a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c24e:	81a3      	strh	r3, [r4, #12]
 800c250:	f04f 30ff 	mov.w	r0, #4294967295
 800c254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c258:	4407      	add	r7, r0
 800c25a:	eba8 0800 	sub.w	r8, r8, r0
 800c25e:	e7e7      	b.n	800c230 <__sflush_r+0xd4>
 800c260:	dfbffffe 	.word	0xdfbffffe

0800c264 <_fflush_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	690b      	ldr	r3, [r1, #16]
 800c268:	4605      	mov	r5, r0
 800c26a:	460c      	mov	r4, r1
 800c26c:	b913      	cbnz	r3, 800c274 <_fflush_r+0x10>
 800c26e:	2500      	movs	r5, #0
 800c270:	4628      	mov	r0, r5
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	b118      	cbz	r0, 800c27e <_fflush_r+0x1a>
 800c276:	6a03      	ldr	r3, [r0, #32]
 800c278:	b90b      	cbnz	r3, 800c27e <_fflush_r+0x1a>
 800c27a:	f7ff f9a5 	bl	800b5c8 <__sinit>
 800c27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d0f3      	beq.n	800c26e <_fflush_r+0xa>
 800c286:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c288:	07d0      	lsls	r0, r2, #31
 800c28a:	d404      	bmi.n	800c296 <_fflush_r+0x32>
 800c28c:	0599      	lsls	r1, r3, #22
 800c28e:	d402      	bmi.n	800c296 <_fflush_r+0x32>
 800c290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c292:	f7ff fb98 	bl	800b9c6 <__retarget_lock_acquire_recursive>
 800c296:	4628      	mov	r0, r5
 800c298:	4621      	mov	r1, r4
 800c29a:	f7ff ff5f 	bl	800c15c <__sflush_r>
 800c29e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2a0:	07da      	lsls	r2, r3, #31
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	d4e4      	bmi.n	800c270 <_fflush_r+0xc>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	059b      	lsls	r3, r3, #22
 800c2aa:	d4e1      	bmi.n	800c270 <_fflush_r+0xc>
 800c2ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2ae:	f7ff fb8b 	bl	800b9c8 <__retarget_lock_release_recursive>
 800c2b2:	e7dd      	b.n	800c270 <_fflush_r+0xc>

0800c2b4 <__swhatbuf_r>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2bc:	2900      	cmp	r1, #0
 800c2be:	b096      	sub	sp, #88	@ 0x58
 800c2c0:	4615      	mov	r5, r2
 800c2c2:	461e      	mov	r6, r3
 800c2c4:	da0d      	bge.n	800c2e2 <__swhatbuf_r+0x2e>
 800c2c6:	89a3      	ldrh	r3, [r4, #12]
 800c2c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c2cc:	f04f 0100 	mov.w	r1, #0
 800c2d0:	bf14      	ite	ne
 800c2d2:	2340      	movne	r3, #64	@ 0x40
 800c2d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c2d8:	2000      	movs	r0, #0
 800c2da:	6031      	str	r1, [r6, #0]
 800c2dc:	602b      	str	r3, [r5, #0]
 800c2de:	b016      	add	sp, #88	@ 0x58
 800c2e0:	bd70      	pop	{r4, r5, r6, pc}
 800c2e2:	466a      	mov	r2, sp
 800c2e4:	f000 f87c 	bl	800c3e0 <_fstat_r>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	dbec      	blt.n	800c2c6 <__swhatbuf_r+0x12>
 800c2ec:	9901      	ldr	r1, [sp, #4]
 800c2ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c2f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c2f6:	4259      	negs	r1, r3
 800c2f8:	4159      	adcs	r1, r3
 800c2fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2fe:	e7eb      	b.n	800c2d8 <__swhatbuf_r+0x24>

0800c300 <__smakebuf_r>:
 800c300:	898b      	ldrh	r3, [r1, #12]
 800c302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c304:	079d      	lsls	r5, r3, #30
 800c306:	4606      	mov	r6, r0
 800c308:	460c      	mov	r4, r1
 800c30a:	d507      	bpl.n	800c31c <__smakebuf_r+0x1c>
 800c30c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	6123      	str	r3, [r4, #16]
 800c314:	2301      	movs	r3, #1
 800c316:	6163      	str	r3, [r4, #20]
 800c318:	b003      	add	sp, #12
 800c31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c31c:	ab01      	add	r3, sp, #4
 800c31e:	466a      	mov	r2, sp
 800c320:	f7ff ffc8 	bl	800c2b4 <__swhatbuf_r>
 800c324:	9f00      	ldr	r7, [sp, #0]
 800c326:	4605      	mov	r5, r0
 800c328:	4639      	mov	r1, r7
 800c32a:	4630      	mov	r0, r6
 800c32c:	f7ff fbba 	bl	800baa4 <_malloc_r>
 800c330:	b948      	cbnz	r0, 800c346 <__smakebuf_r+0x46>
 800c332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c336:	059a      	lsls	r2, r3, #22
 800c338:	d4ee      	bmi.n	800c318 <__smakebuf_r+0x18>
 800c33a:	f023 0303 	bic.w	r3, r3, #3
 800c33e:	f043 0302 	orr.w	r3, r3, #2
 800c342:	81a3      	strh	r3, [r4, #12]
 800c344:	e7e2      	b.n	800c30c <__smakebuf_r+0xc>
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	6020      	str	r0, [r4, #0]
 800c34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c34e:	81a3      	strh	r3, [r4, #12]
 800c350:	9b01      	ldr	r3, [sp, #4]
 800c352:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c356:	b15b      	cbz	r3, 800c370 <__smakebuf_r+0x70>
 800c358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c35c:	4630      	mov	r0, r6
 800c35e:	f000 f851 	bl	800c404 <_isatty_r>
 800c362:	b128      	cbz	r0, 800c370 <__smakebuf_r+0x70>
 800c364:	89a3      	ldrh	r3, [r4, #12]
 800c366:	f023 0303 	bic.w	r3, r3, #3
 800c36a:	f043 0301 	orr.w	r3, r3, #1
 800c36e:	81a3      	strh	r3, [r4, #12]
 800c370:	89a3      	ldrh	r3, [r4, #12]
 800c372:	431d      	orrs	r5, r3
 800c374:	81a5      	strh	r5, [r4, #12]
 800c376:	e7cf      	b.n	800c318 <__smakebuf_r+0x18>

0800c378 <_putc_r>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	460d      	mov	r5, r1
 800c37c:	4614      	mov	r4, r2
 800c37e:	4606      	mov	r6, r0
 800c380:	b118      	cbz	r0, 800c38a <_putc_r+0x12>
 800c382:	6a03      	ldr	r3, [r0, #32]
 800c384:	b90b      	cbnz	r3, 800c38a <_putc_r+0x12>
 800c386:	f7ff f91f 	bl	800b5c8 <__sinit>
 800c38a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c38c:	07d8      	lsls	r0, r3, #31
 800c38e:	d405      	bmi.n	800c39c <_putc_r+0x24>
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	0599      	lsls	r1, r3, #22
 800c394:	d402      	bmi.n	800c39c <_putc_r+0x24>
 800c396:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c398:	f7ff fb15 	bl	800b9c6 <__retarget_lock_acquire_recursive>
 800c39c:	68a3      	ldr	r3, [r4, #8]
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	60a3      	str	r3, [r4, #8]
 800c3a4:	da05      	bge.n	800c3b2 <_putc_r+0x3a>
 800c3a6:	69a2      	ldr	r2, [r4, #24]
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	db12      	blt.n	800c3d2 <_putc_r+0x5a>
 800c3ac:	b2eb      	uxtb	r3, r5
 800c3ae:	2b0a      	cmp	r3, #10
 800c3b0:	d00f      	beq.n	800c3d2 <_putc_r+0x5a>
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	6022      	str	r2, [r4, #0]
 800c3b8:	701d      	strb	r5, [r3, #0]
 800c3ba:	b2ed      	uxtb	r5, r5
 800c3bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c3be:	07da      	lsls	r2, r3, #31
 800c3c0:	d405      	bmi.n	800c3ce <_putc_r+0x56>
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	059b      	lsls	r3, r3, #22
 800c3c6:	d402      	bmi.n	800c3ce <_putc_r+0x56>
 800c3c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3ca:	f7ff fafd 	bl	800b9c8 <__retarget_lock_release_recursive>
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	bd70      	pop	{r4, r5, r6, pc}
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f7ff f9e7 	bl	800b7aa <__swbuf_r>
 800c3dc:	4605      	mov	r5, r0
 800c3de:	e7ed      	b.n	800c3bc <_putc_r+0x44>

0800c3e0 <_fstat_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d07      	ldr	r5, [pc, #28]	@ (800c400 <_fstat_r+0x20>)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	4611      	mov	r1, r2
 800c3ec:	602b      	str	r3, [r5, #0]
 800c3ee:	f7f4 fed8 	bl	80011a2 <_fstat>
 800c3f2:	1c43      	adds	r3, r0, #1
 800c3f4:	d102      	bne.n	800c3fc <_fstat_r+0x1c>
 800c3f6:	682b      	ldr	r3, [r5, #0]
 800c3f8:	b103      	cbz	r3, 800c3fc <_fstat_r+0x1c>
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	bd38      	pop	{r3, r4, r5, pc}
 800c3fe:	bf00      	nop
 800c400:	24000608 	.word	0x24000608

0800c404 <_isatty_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4d06      	ldr	r5, [pc, #24]	@ (800c420 <_isatty_r+0x1c>)
 800c408:	2300      	movs	r3, #0
 800c40a:	4604      	mov	r4, r0
 800c40c:	4608      	mov	r0, r1
 800c40e:	602b      	str	r3, [r5, #0]
 800c410:	f7f4 fed7 	bl	80011c2 <_isatty>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d102      	bne.n	800c41e <_isatty_r+0x1a>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	b103      	cbz	r3, 800c41e <_isatty_r+0x1a>
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	24000608 	.word	0x24000608

0800c424 <_sbrk_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4d06      	ldr	r5, [pc, #24]	@ (800c440 <_sbrk_r+0x1c>)
 800c428:	2300      	movs	r3, #0
 800c42a:	4604      	mov	r4, r0
 800c42c:	4608      	mov	r0, r1
 800c42e:	602b      	str	r3, [r5, #0]
 800c430:	f7f4 fee0 	bl	80011f4 <_sbrk>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <_sbrk_r+0x1a>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	b103      	cbz	r3, 800c43e <_sbrk_r+0x1a>
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	24000608 	.word	0x24000608

0800c444 <_init>:
 800c444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c446:	bf00      	nop
 800c448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c44a:	bc08      	pop	{r3}
 800c44c:	469e      	mov	lr, r3
 800c44e:	4770      	bx	lr

0800c450 <_fini>:
 800c450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c452:	bf00      	nop
 800c454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c456:	bc08      	pop	{r3}
 800c458:	469e      	mov	lr, r3
 800c45a:	4770      	bx	lr
